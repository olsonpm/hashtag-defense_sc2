//==================================================================================================
// 
// Generated Map Script
// 
// Name:   #Defense
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"

//--------------------------------------------------------------------------------------------------
// Library: utils - personal
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1_ge_removeunittype_kill = 0;
const int lib1_ge_removeunittype_remove = 1;
const int lib1_ge_race_protoss = 0;
const int lib1_ge_race_terran = 1;
const int lib1_ge_race_zerg = 2;

// Constants
const int lib1_gv_anyplayer = 16;
const string lib1_gv_emptystring = "";
const string lib1_gv_nogamelinkunittype = null;

// Structures
struct lib1_gs_debouncedmessage {
    text lv_message;
    int lv_insertedattimeint;
    int lv_secondstodebounce;
    string lv_id;
};

// Variable Declarations
unit[17][3] lib1_gv_selectedunits;
lib1_gs_debouncedmessage[101] lib1_gv_debouncedmessages;
text lib1_gv_colorcalamity;
timer lib1_gv_everysecond;
bool lib1_gv_localdebug;
int[17] lib1_gv_randomindices;
bool lib1_gv_test;
unitgroup[17][17] lib1_gv_unitsingroupsofNperplayer;

// Function Declarations
bool lib1_gf_and2 (bool lp_left, bool lp_right);
unit lib1_gf_anyunitatpoint (point lp_p, int lp_player);
unit lib1_gf_anyunitnearpoint (point lp_point, int lp_player);
bool lib1_gf_atleastNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p);
bool lib1_gf_fewerthanNunitsinregionforplayer (int lp_n, region lp_r, int lp_p);
bool lib1_gf_fewerthanNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p);
bool lib1_gf_isemptystring (string lp_str);
bool lib1_gf_istrue (bool lp_b);
bool lib1_gf_isfalse (bool lp_b);
bool lib1_gf_isdebugginglocally ();
bool lib1_gf_istesting ();
bool lib1_gf_isunitwithindistanceofpoint (unit lp_u, fixed lp_d, point lp_pt);
bool lib1_gf_or2 (bool lp_bool1, bool lp_bool2);
bool lib1_gf_or3 (bool lp_bool1, bool lp_bool2, bool lp_bool3);
bool lib1_gf_playerisingroup (int lp_p, playergroup lp_pg);
bool lib1_gf_timerisactive (timer lp_t);
bool lib1_gf_timerisnotactive (timer lp_t);
bool lib1_gf_triggeringplayerhasatleastNresources (int lp_mins, int lp_gas);
bool lib1_gf_triggeringunitbelongstoplayergroup (playergroup lp_pg);
bool lib1_gf_triggeringunitbelongstoplayer (int lp_p);
bool lib1_gf_triggeringunitisoftype (string lp_t);
bool lib1_gf_unithasbuff (unit lp_u, string lp_b);
bool lib1_gf_unitisalive (unit lp_u);
bool lib1_gf_unitistype (unit lp_u, string lp_ut);
bool lib1_gf_convertbooltoenabledisableoption (bool lp_bool);
text lib1_gf_convertbooltoonoff (bool lp_bool);
unit lib1_gf_findoneunitbytypeforplayer (string lp_unittype, int lp_p);
int lib1_gf_foraregionsetunitsingroupsofNforplayerthenreturnthenumberofgroupsfound (region lp_r, int lp_p, int lp_n, string lp_unittype);
text lib1_gf_getabililtystageastext (int lp_stage);
int lib1_gf_getcurrenttimeint ();
text lib1_gf_getplayerraceastext (int lp_p);
int lib1_gf_getraceintegerfromplayer (int lp_p);
int lib1_gf_numberofstructuresinregion (region lp_r, int lp_p);
int lib1_gf_numberofunitsinregion (region lp_r, int lp_p);
int lib1_gf_numberofunitsoftypeinregion (region lp_r, int lp_p, string lp_t);
int lib1_gf_numberofunitsoftypeforplayer (string lp_t, int lp_p);
int lib1_gf_numberofunitsoftwotypesforplayer (string lp_t1, string lp_t2, int lp_p);
point lib1_gf_pointwithxyzoffset (point lp_p, fixed lp_x, fixed lp_y, fixed lp_z);
unit lib1_gf_previousselectedunit (int lp_p);
unit lib1_gf_unitatpoint (point lp_p, int lp_player, string lp_ut);
void lib1_gf_alertplayernotenoughminerals (int lp_p);
void lib1_gf_alertplayererror (int lp_p, text lp_err);
void lib1_gf_createunitatpoint (string lp_ut, point lp_point, int lp_player, int lp_opts);
void lib1_gf_createNunitsatpoint (int lp_n, string lp_ut, point lp_point, int lp_player);
void lib1_gf_debouncedmessageaddorset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage);
void lib1_gf_debouncedmessageremove (string lp_id);
void lib1_gf_debouncedmessageset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage, int lp_i);
void lib1_gf_displaydebugmessage (text lp_msg);
void lib1_gf_initeverysecondtimer ();
void lib1_gf_initlocaldebuggingstate ();
void lib1_gf_issueordertoallunitsinregion (order lp_o, region lp_r, int lp_p, int lp_orderqueue);
void lib1_gf_issueordertounittypeinregion (order lp_o, string lp_u, region lp_r, int lp_p, int lp_orderqueue);
void lib1_gf_messageuser (text lp_msg, int lp_p);
void lib1_gf_messageallusers (text lp_msg);
void lib1_gf_messageallusersdebounced (text lp_msg, string lp_debounceid, int lp_secondstodebounce);
void lib1_gf_modifyplayergroupintproperty (playergroup lp_pg, int lp_prop, int lp_modify, int lp_int);
void lib1_gf_pancameratopointforplayer (int lp_player, point lp_point);
void lib1_gf_playsoundatpoint (soundlink lp_s, point lp_p);
void lib1_gf_playsoundforallplayers (soundlink lp_s);
void lib1_gf_playsoundforplayer (soundlink lp_s, int lp_p);
void lib1_gf_printtriggeringabilitystage ();
void lib1_gf_removeallunitsoftypeinregion (string lp_ut, region lp_r, int lp_p);
void lib1_gf_removeNunitsoftypeinregion (int lp_n, string lp_ut, region lp_r, int lp_p, int lp_removetype);
void lib1_gf_removeunitoftypeatpoint (int lp_p, point lp_point, int lp_removetype, string lp_ut);
void lib1_gf_resetunitsingroupsofNforplayer (int lp_p);
void lib1_gf_selectanyunitatpoint (point lp_point);
void lib1_gf_selectanyunitnearpoint (point lp_point);
void lib1_gf_setcameratopointforplayer (int lp_player, point lp_point);
void lib1_gf_setrandomindices (int lp_size);

// Trigger Declarations
trigger lib1_gt_continueeverysecondtimer;
trigger lib1_gt_displaydebouncedmessagetoallusers;
trigger lib1_gt_trackpreviousselectedunit;
trigger lib1_gt_utilsinitmap;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: utils - personal
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i;
    int init_j;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    for (init_i = 0; init_i <= 100; init_i += 1) {
        lib1_gv_debouncedmessages[init_i].lv_id = "";
    }
    lib1_gv_colorcalamity = StringExternal("Param/Value/lib_1_4A35FBAD");
    lib1_gv_everysecond = TimerCreate();
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            lib1_gv_unitsingroupsofNperplayer[init_i][init_j] = UnitGroupEmpty();
        }
    }
}

// Presets
// Functions
bool lib1_gf_and2 (bool lp_left, bool lp_right) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_left && lp_right);
}

unit lib1_gf_anyunitatpoint (point lp_p, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroupSearch(null, lp_player, lp_p, 1.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

unit lib1_gf_anyunitnearpoint (point lp_point, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupClosestToPoint(UnitGroupSearch(null, lp_player, lp_point, 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_point);
}

bool lib1_gf_atleastNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(lp_u, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= lp_n);
}

bool lib1_gf_fewerthanNunitsinregionforplayer (int lp_n, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < lp_n);
}

bool lib1_gf_fewerthanNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(lp_u, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < lp_n);
}

bool lib1_gf_isemptystring (string lp_str) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_str == lib1_gv_emptystring);
}

bool lib1_gf_istrue (bool lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return lp_b;
}

bool lib1_gf_isfalse (bool lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return !(lp_b);
}

bool lib1_gf_isdebugginglocally () {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_istrue(lib1_gv_localdebug);
}

bool lib1_gf_istesting () {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_istrue(lib1_gv_test);
}

bool lib1_gf_isunitwithindistanceofpoint (unit lp_u, fixed lp_d, point lp_pt) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_UnitInRegion(lp_u, RegionCircle(lp_pt, lp_d));
}

bool lib1_gf_or2 (bool lp_bool1, bool lp_bool2) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_bool1 || lp_bool2);
}

bool lib1_gf_or3 (bool lp_bool1, bool lp_bool2, bool lp_bool3) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_bool1 || lp_bool2 || lp_bool3);
}

bool lib1_gf_playerisingroup (int lp_p, playergroup lp_pg) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupHasPlayer(lp_pg, lp_p);
}

bool lib1_gf_timerisactive (timer lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (TimerGetRemaining(lp_t) > 0.0);
}

bool lib1_gf_timerisnotactive (timer lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (TimerGetRemaining(lp_t) <= 0.0);
}

bool lib1_gf_triggeringplayerhasatleastNresources (int lp_mins, int lp_gas) {
    // Automatic Variable Declarations
    // Implementation
    return AIHasRes(EventPlayer(), lp_mins, lp_gas);
}

bool lib1_gf_triggeringunitbelongstoplayergroup (playergroup lp_pg) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupHasPlayer(lp_pg, UnitGetOwner(EventUnit()));
}

bool lib1_gf_triggeringunitbelongstoplayer (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetOwner(EventUnit()) == lp_p);
}

bool lib1_gf_triggeringunitisoftype (string lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetType(EventUnit()) == lp_t);
}

bool lib1_gf_unithasbuff (unit lp_u, string lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return UnitHasBehavior2(lp_u, lp_b);
}

bool lib1_gf_unitisalive (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitIsAlive(lp_u) == true);
}

bool lib1_gf_unitistype (unit lp_u, string lp_ut) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetType(lp_u) == lp_ut);
}

bool lib1_gf_convertbooltoenabledisableoption (bool lp_bool) {
    // Automatic Variable Declarations
    bool auto0E8CD9BC_val;

    // Implementation
    auto0E8CD9BC_val = lp_bool;
    if (auto0E8CD9BC_val == true) {
        return true;
    }
    else {
        return false;
    }
}

text lib1_gf_convertbooltoonoff (bool lp_bool) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lp_bool)) {
        return StringExternal("Param/Value/lib_1_EE7F86C0");
    }
    else {
        return StringExternal("Param/Value/lib_1_33A9FDCD");
    }
}

unit lib1_gf_findoneunitbytypeforplayer (string lp_unittype, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroup(lp_unittype, lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

int lib1_gf_foraregionsetunitsingroupsofNforplayerthenreturnthenumberofgroupsfound (region lp_r, int lp_p, int lp_n, string lp_unittype) {
    // Variable Declarations
    int lv__numunits;
    int lv__numgroups;
    int lv__group;
    int lv__i;
    unit lv__u;

    // Automatic Variable Declarations
    unitgroup auto3C360D04_g;
    int auto3C360D04_u;

    // Variable Initialization

    // Implementation
    lv__numunits = lib1_gf_numberofunitsoftypeinregion(lp_r, lp_p, lp_unittype);
    lv__numgroups = FloorI((lv__numunits / lp_n));
    if ((lv__numgroups >= 1)) {
        lib1_gf_resetunitsingroupsofNforplayer(lp_p);
        auto3C360D04_g = UnitGroup(lp_unittype, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3C360D04_u = UnitGroupCount(auto3C360D04_g, c_unitCountAll);
        for (;; auto3C360D04_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto3C360D04_g, auto3C360D04_u);
            if (lv__u == null) { break; }
            lv__group = FloorI((lv__i / lp_n));
            UnitGroupAdd(lib1_gv_unitsingroupsofNperplayer[lp_p][lv__group], lv__u);
            lv__i = (lv__i + 1);
        }
    }

    return lv__numgroups;
}

text lib1_gf_getabililtystageastext (int lp_stage) {
    // Automatic Variable Declarations
    int auto7C5C3079_val;

    // Implementation
    auto7C5C3079_val = lp_stage;
    if (auto7C5C3079_val == c_abilRallyStagePlace) {
        return StringExternal("Param/Value/lib_1_B1A9A0BE");
    }
    else if (auto7C5C3079_val == c_abilMorphStageMoverEnd) {
        return StringExternal("Param/Value/lib_1_C0E52566");
    }
    else if (auto7C5C3079_val == c_abilMorphStageMoverStart) {
        return StringExternal("Param/Value/lib_1_AE6CBCB1");
    }
    else if (auto7C5C3079_val == c_abilMorphStageAbilsEnd) {
        return StringExternal("Param/Value/lib_1_94141FDC");
    }
    else if (auto7C5C3079_val == c_abilMorphStageAbilsStart) {
        return StringExternal("Param/Value/lib_1_315E0491");
    }
    else if (auto7C5C3079_val == c_abilMorphStageUnitEnd) {
        return StringExternal("Param/Value/lib_1_875ED7AF");
    }
    else if (auto7C5C3079_val == c_abilMorphStageUnitStart) {
        return StringExternal("Param/Value/lib_1_76371732");
    }
    else if (auto7C5C3079_val == c_abilMorphStageFacingEnd) {
        return StringExternal("Param/Value/lib_1_8845F40E");
    }
    else if (auto7C5C3079_val == c_abilMorphStageFacingStart) {
        return StringExternal("Param/Value/lib_1_9BA4458C");
    }
    else if (auto7C5C3079_val == c_abilMorphStageCollideEnd) {
        return StringExternal("Param/Value/lib_1_E222F185");
    }
    else if (auto7C5C3079_val == c_abilMorphStageCollideStart) {
        return StringExternal("Param/Value/lib_1_96D523DB");
    }
    else if (auto7C5C3079_val == c_abilMorphStageStatsEnd) {
        return StringExternal("Param/Value/lib_1_9AF529AD");
    }
    else if (auto7C5C3079_val == c_abilMorphStageStatsStart) {
        return StringExternal("Param/Value/lib_1_693AB5CA");
    }
    else if (auto7C5C3079_val == c_abilMorphStageActorEnd) {
        return StringExternal("Param/Value/lib_1_B515E506");
    }
    else if (auto7C5C3079_val == c_abilMorphStageActorStart) {
        return StringExternal("Param/Value/lib_1_3022E928");
    }
    else if (auto7C5C3079_val == c_abilMorphStageWait) {
        return StringExternal("Param/Value/lib_1_92C481D4");
    }
    else if (auto7C5C3079_val == c_abilMorphStageApproach) {
        return StringExternal("Param/Value/lib_1_82D59DD9");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageDropOff) {
        return StringExternal("Param/Value/lib_1_48441561");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageApproachDropOff) {
        return StringExternal("Param/Value/lib_1_BF2D00E9");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitForDropOff) {
        return StringExternal("Param/Value/lib_1_411DDC33");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitToReturn) {
        return StringExternal("Param/Value/lib_1_FF091B5E");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageHarvest) {
        return StringExternal("Param/Value/lib_1_222792E0");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitAtResource) {
        return StringExternal("Param/Value/lib_1_89DBB633");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageApproachResource) {
        return StringExternal("Param/Value/lib_1_367C28A1");
    }
    else if (auto7C5C3079_val == c_unitAbilStageUnpause) {
        return StringExternal("Param/Value/lib_1_79353442");
    }
    else if (auto7C5C3079_val == c_unitAbilStagePause) {
        return StringExternal("Param/Value/lib_1_8FB28264");
    }
    else if (auto7C5C3079_val == c_unitAbilStageComplete) {
        return StringExternal("Param/Value/lib_1_0D4B38C5");
    }
    else if (auto7C5C3079_val == c_unitAbilStagePreempt) {
        return StringExternal("Param/Value/lib_1_ACFCE4F5");
    }
    else if (auto7C5C3079_val == c_unitAbilStageCancel) {
        return StringExternal("Param/Value/lib_1_D41AC1FC");
    }
    else if (auto7C5C3079_val == c_unitAbilStageExecute) {
        return StringExternal("Param/Value/lib_1_E19B5790");
    }
    else if (auto7C5C3079_val == c_unitAbilStageQueue) {
        return StringExternal("Param/Value/lib_1_5C203FFD");
    }
    else if (auto7C5C3079_val == c_unitAbilStageAll) {
        return StringExternal("Param/Value/lib_1_C0FADEC6");
    }
    else if (auto7C5C3079_val == c_abilEffectStageBail) {
        return StringExternal("Param/Value/lib_1_AC409659");
    }
    else if (auto7C5C3079_val == c_abilEffectStageFinish) {
        return StringExternal("Param/Value/lib_1_F8914108");
    }
    else if (auto7C5C3079_val == c_abilEffectStageChannel) {
        return StringExternal("Param/Value/lib_1_C807DFC8");
    }
    else if (auto7C5C3079_val == c_abilEffectStageCast) {
        return StringExternal("Param/Value/lib_1_2C79D0B3");
    }
    else if (auto7C5C3079_val == c_abilEffectStagePrep) {
        return StringExternal("Param/Value/lib_1_A3DCFA2F");
    }
    else if (auto7C5C3079_val == c_abilEffectStageApproach) {
        return StringExternal("Param/Value/lib_1_36F8FDEE");
    }
    else if (auto7C5C3079_val == c_abilBuildStageCollide) {
        return StringExternal("Param/Value/lib_1_1660F597");
    }
    else if (auto7C5C3079_val == c_abilBuildStageFinish) {
        return StringExternal("Param/Value/lib_1_2E58CBA2");
    }
    else if (auto7C5C3079_val == c_abilBuildStageResume) {
        return StringExternal("Param/Value/lib_1_F40CAC62");
    }
    else if (auto7C5C3079_val == c_abilBuildStageHalt) {
        return StringExternal("Param/Value/lib_1_CEBB5E3B");
    }
    else if (auto7C5C3079_val == c_abilBuildStageConstruct) {
        return StringExternal("Param/Value/lib_1_7923C72E");
    }
    else if (auto7C5C3079_val == c_abilBuildStageWait) {
        return StringExternal("Param/Value/lib_1_CA9D1B07");
    }
    else if (auto7C5C3079_val == c_abilBuildStageApproach) {
        return StringExternal("Param/Value/lib_1_4134203F");
    }
    else if (auto7C5C3079_val == c_abilBehaviorStageToggled) {
        return StringExternal("Param/Value/lib_1_6D6E5434");
    }
    else if (auto7C5C3079_val == c_abilBehaviorStageUntoggled) {
        return StringExternal("Param/Value/lib_1_78B24B45");
    }
    else if (auto7C5C3079_val == c_abilAttackStageLoiter) {
        return StringExternal("Param/Value/lib_1_DDF50FE4");
    }
    else if (auto7C5C3079_val == c_abilAttackStageAttack) {
        return StringExternal("Param/Value/lib_1_41418C08");
    }
    else if (auto7C5C3079_val == c_abilAttackStageApproach) {
        return StringExternal("Param/Value/lib_1_7E513C70");
    }
    else {
        return StringExternal("Param/Value/lib_1_0DDB8C11");
    }
}

int lib1_gf_getcurrenttimeint () {
    // Automatic Variable Declarations
    // Implementation
    return DateTimeToInt(CurrentDateTimeGet());
}

text lib1_gf_getplayerraceastext (int lp_p) {
    // Automatic Variable Declarations
    string autoDDE34797_val;

    // Implementation
    autoDDE34797_val = PlayerRace(lp_p);
    if (autoDDE34797_val == "Prot") {
        return StringExternal("Param/Value/lib_1_4B0781BB");
    }
    else if (autoDDE34797_val == "Terr") {
        return StringExternal("Param/Value/lib_1_96CA8A61");
    }
    else if (autoDDE34797_val == "Zerg") {
        return StringExternal("Param/Value/lib_1_45CC7D05");
    }
    else {
        return StringExternal("Param/Value/lib_1_28EC086C");
    }
}

int lib1_gf_getraceintegerfromplayer (int lp_p) {
    // Variable Declarations
    int lv__race;

    // Automatic Variable Declarations
    string autoC73756C2_val;

    // Variable Initialization

    // Implementation
    autoC73756C2_val = PlayerRace(lp_p);
    if (autoC73756C2_val == "Prot") {
        return lib1_ge_race_protoss;
    }
    else if (autoC73756C2_val == "Terr") {
        return lib1_ge_race_terran;
    }
    else if (autoC73756C2_val == "Zerg") {
        return lib1_ge_race_zerg;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_0137C127", "p", IntToText(lp_p));
        lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_0137C127"));
        return -1;
    }
}

int lib1_gf_numberofstructuresinregion (region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(null, lp_p, lp_r, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsinregion (region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsoftypeinregion (region lp_r, int lp_p, string lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(lp_t, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsoftypeforplayer (string lp_t, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return TechTreeUnitCount(lp_p, lp_t, c_techCountCompleteOnly);
}

int lib1_gf_numberofunitsoftwotypesforplayer (string lp_t1, string lp_t2, int lp_p) {
    // Variable Declarations
    int lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return (lib1_gf_numberofunitsoftypeforplayer(lp_t1, lp_p) + lib1_gf_numberofunitsoftypeforplayer(lp_t2, lp_p));
}

point lib1_gf_pointwithxyzoffset (point lp_p, fixed lp_x, fixed lp_y, fixed lp_z) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_PointWithZOffset(PointWithOffset(lp_p, lp_x, lp_y), lp_z);
}

unit lib1_gf_previousselectedunit (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gv_selectedunits[lp_p][1];
}

unit lib1_gf_unitatpoint (point lp_p, int lp_player, string lp_ut) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroupSearch(lp_ut, lp_player, lp_p, 1.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

void lib1_gf_alertplayernotenoughminerals (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforplayer(SoundLink("Alert_TerranNeedMoreMinerals", -1), lp_p);
    if (lib1_gf_isdebugginglocally()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaError, StringExternal("Param/Value/lib_1_6546880C"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaError, StringExternal("Param/Value/lib_1_4F06080C"));
    }
}

void lib1_gf_alertplayererror (int lp_p, text lp_err) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforplayer(SoundLink("UI_GenericError", -1), lp_p);
    if (lib1_gf_isdebugginglocally()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaError, lp_err);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaError, lp_err);
    }
}

void lib1_gf_createunitatpoint (string lp_ut, point lp_point, int lp_player, int lp_opts) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_ut, lp_opts, lp_player, lp_point, 270.0);
}

void lib1_gf_createNunitsatpoint (int lp_n, string lp_ut, point lp_point, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(lp_n, lp_ut, 0, lp_player, lp_point, 270.0);
}

void lib1_gf_debouncedmessageaddorset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage) {
    // Variable Declarations
    int lv__i;
    bool lv__found;

    // Automatic Variable Declarations
    const int autoE0F930F6_ae = 99;
    const int autoE0F930F6_ai = 1;
    string auto9E432B67_val;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (autoE0F930F6_ai >= 0 && lv__i <= autoE0F930F6_ae) || (autoE0F930F6_ai < 0 && lv__i >= autoE0F930F6_ae) ) ; lv__i += autoE0F930F6_ai ) {
        auto9E432B67_val = lib1_gv_debouncedmessages[lv__i].lv_id;
        if (auto9E432B67_val == lp_debouncedmessage.lv_id) {
            lv__found = true;
            break;
        }
        else if (auto9E432B67_val == lib1_gv_emptystring) {
            break;
        }
        else {
        }
    }
    lib1_gf_debouncedmessageset(lp_debouncedmessage, lv__i);
}

void lib1_gf_debouncedmessageremove (string lp_id) {
    // Variable Declarations
    int lv__i;
    int lv__j;
    bool lv__found;

    // Automatic Variable Declarations
    const int autoDB5A6855_ae = 99;
    const int autoDB5A6855_ai = 1;
    string auto5D39A06D_val;
    const int auto519E93D7_ae = 99;
    const int auto519E93D7_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (autoDB5A6855_ai >= 0 && lv__i <= autoDB5A6855_ae) || (autoDB5A6855_ai < 0 && lv__i >= autoDB5A6855_ae) ) ; lv__i += autoDB5A6855_ai ) {
        auto5D39A06D_val = lib1_gv_debouncedmessages[lv__i].lv_id;
        if (auto5D39A06D_val == lp_id) {
            lv__found = true;
            break;
        }
        else if (auto5D39A06D_val == lib1_gv_emptystring) {
            break;
        }
        else {
        }
    }
    if (lib1_gf_istrue(lv__found)) {
        lv__j = lv__i;
        for ( ; ( (auto519E93D7_ai >= 0 && lv__j <= auto519E93D7_ae) || (auto519E93D7_ai < 0 && lv__j >= auto519E93D7_ae) ) ; lv__j += auto519E93D7_ai ) {
            lib1_gf_debouncedmessageset(lib1_gv_debouncedmessages[(lv__j + 1)], lv__j);
            if (lib1_gf_isemptystring(lib1_gv_debouncedmessages[lv__j].lv_id)) {
                break;
            }

        }
    }

}

void lib1_gf_debouncedmessageset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage, int lp_i) {
    // Variable Declarations
    int lv__i;
    bool lv__found;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gv_debouncedmessages[lv__i].lv_id = lp_debouncedmessage.lv_id;
    lib1_gv_debouncedmessages[lv__i].lv_insertedattimeint = lp_debouncedmessage.lv_insertedattimeint;
    lib1_gv_debouncedmessages[lv__i].lv_message = lp_debouncedmessage.lv_message;
    lib1_gv_debouncedmessages[lv__i].lv_secondstodebounce = lp_debouncedmessage.lv_secondstodebounce;
}

void lib1_gf_displaydebugmessage (text lp_msg) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_isdebugginglocally()) {
        TriggerDebugOutput(1, lp_msg, true);
    }

}

void lib1_gf_initeverysecondtimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(lib1_gv_everysecond, 1.0, true, c_timeReal);
}

void lib1_gf_initlocaldebuggingstate () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_isdebugginglocally()) {
        GameSetSpeedValue(c_gameSpeedFaster);
        TriggerDebugSetTypeFile(1, "trigger-debug.txt");
    }

}

void lib1_gf_issueordertoallunitsinregion (order lp_o, region lp_r, int lp_p, int lp_orderqueue) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupIssueOrder(UnitGroup(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_o, lp_orderqueue);
}

void lib1_gf_issueordertounittypeinregion (order lp_o, string lp_u, region lp_r, int lp_p, int lp_orderqueue) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupIssueOrder(UnitGroup(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_o, lp_orderqueue);
}

void lib1_gf_messageuser (text lp_msg, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_isdebugginglocally()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaChat, lp_msg);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaChat, lp_msg);
    }
}

void lib1_gf_messageallusers (text lp_msg) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lp_msg);
}

void lib1_gf_messageallusersdebounced (text lp_msg, string lp_debounceid, int lp_secondstodebounce) {
    // Variable Declarations
    lib1_gs_debouncedmessage lv__debouncedmessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__debouncedmessage.lv_id = "";

    // Implementation
    lv__debouncedmessage.lv_id = lp_debounceid;
    lv__debouncedmessage.lv_insertedattimeint = lib1_gf_getcurrenttimeint();
    lv__debouncedmessage.lv_message = lp_msg;
    lv__debouncedmessage.lv_secondstodebounce = lp_secondstodebounce;
    lib1_gf_debouncedmessageaddorset(lv__debouncedmessage);
}

void lib1_gf_modifyplayergroupintproperty (playergroup lp_pg, int lp_prop, int lp_modify, int lp_int) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto7F55797E_g;

    // Variable Initialization

    // Implementation
    auto7F55797E_g = lp_pg;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto7F55797E_g, lv_p);
        if (lv_p < 0) { break; }
        PlayerModifyPropertyInt(lv_p, lp_prop, lp_modify, lp_int);
    }
}

void lib1_gf_pancameratopointforplayer (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    CameraPan(lp_player, lp_point, 1.0, -1, 10.0, false);
}

void lib1_gf_playsoundatpoint (soundlink lp_s, point lp_p) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayAtPointForPlayer(lp_s, c_maxPlayers, PlayerGroupAll(), lp_p, 0.0, 100.0, 0.0);
}

void lib1_gf_playsoundforallplayers (soundlink lp_s) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void lib1_gf_playsoundforplayer (soundlink lp_s, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_isdebugginglocally()) {
        SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupSingle(1), 100.0, 0.0);
    }
    else {
        SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupSingle(lp_p), 100.0, 0.0);
    }
}

void lib1_gf_printtriggeringabilitystage () {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1_307E16AC", "ability_stage", lib1_gf_getabililtystageastext(EventUnitAbilityStage()));
    lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_307E16AC"));
}

void lib1_gf_removeallunitsoftypeinregion (string lp_ut, region lp_r, int lp_p) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto0788FCB0_g;
    int auto0788FCB0_u;

    // Variable Initialization

    // Implementation
    auto0788FCB0_g = UnitGroup(lp_ut, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0788FCB0_u = UnitGroupCount(auto0788FCB0_g, c_unitCountAll);
    for (;; auto0788FCB0_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto0788FCB0_g, auto0788FCB0_u);
        if (lv_u == null) { break; }
        UnitRemove(lv_u);
    }
}

void lib1_gf_removeNunitsoftypeinregion (int lp_n, string lp_ut, region lp_r, int lp_p, int lp_removetype) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoF0454A8A_g;
    int autoF0454A8A_u;
    int auto279D445D_val;

    // Variable Initialization

    // Implementation
    autoF0454A8A_g = UnitGroup(lp_ut, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_n);
    autoF0454A8A_u = UnitGroupCount(autoF0454A8A_g, c_unitCountAll);
    for (;; autoF0454A8A_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoF0454A8A_g, autoF0454A8A_u);
        if (lv_u == null) { break; }
        auto279D445D_val = lp_removetype;
        if (auto279D445D_val == lib1_ge_removeunittype_remove) {
            UnitRemove(lv_u);
        }
        else if (auto279D445D_val == lib1_ge_removeunittype_kill) {
            UnitKill(lv_u);
        }
        else {
        }
    }
}

void lib1_gf_removeunitoftypeatpoint (int lp_p, point lp_point, int lp_removetype, string lp_ut) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    int auto1334996E_val;

    // Variable Initialization
    lv_u = lib1_gf_unitatpoint(lp_point, lp_p, lp_ut);

    // Implementation
    auto1334996E_val = lp_removetype;
    if (auto1334996E_val == lib1_ge_removeunittype_remove) {
        UnitRemove(lv_u);
    }
    else if (auto1334996E_val == lib1_ge_removeunittype_kill) {
        UnitKill(lv_u);
    }
    else {
    }
}

void lib1_gf_resetunitsingroupsofNforplayer (int lp_p) {
    // Variable Declarations
    int lv__i;

    // Automatic Variable Declarations
    const int auto5D73D905_ae = 15;
    const int auto5D73D905_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (auto5D73D905_ai >= 0 && lv__i <= auto5D73D905_ae) || (auto5D73D905_ai < 0 && lv__i >= auto5D73D905_ae) ) ; lv__i += auto5D73D905_ai ) {
        lib1_gv_unitsingroupsofNperplayer[lp_p][lv__i] = UnitGroupEmpty();
    }
}

void lib1_gf_selectanyunitatpoint (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    UnitSelect(lib1_gf_anyunitatpoint(lp_point, EventPlayer()), EventPlayer(), true);
}

void lib1_gf_selectanyunitnearpoint (point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    UnitSelect(lib1_gf_anyunitnearpoint(lp_point, EventPlayer()), EventPlayer(), true);
}

void lib1_gf_setcameratopointforplayer (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    CameraPan(lp_player, lp_point, 0.0, -1, 10.0, false);
}

void lib1_gf_setrandomindices (int lp_size) {
    // Variable Declarations
    int lv__i;
    int lv__j;
    int[17] lv__indicestochoosefrom;
    int lv__randomindex;
    int lv__lastindex;
    int lv__lastindextochoosefrom;

    // Automatic Variable Declarations
    const int auto077BBA79_ae = 16;
    const int auto077BBA79_ai = 1;
    int auto5333E637_ae;
    const int auto5333E637_ai = 1;
    int auto6EABDCC4_ae;
    const int auto6EABDCC4_ai = 1;
    int autoA445F2A2_ae;
    const int autoA445F2A2_ai = 1;

    // Variable Initialization
    lv__lastindex = (lp_size - 1);
    lv__lastindextochoosefrom = (lp_size - 1);

    // Implementation
    lv__i = 0;
    for ( ; ( (auto077BBA79_ai >= 0 && lv__i <= auto077BBA79_ae) || (auto077BBA79_ai < 0 && lv__i >= auto077BBA79_ae) ) ; lv__i += auto077BBA79_ai ) {
        lib1_gv_randomindices[lv__i] = -1;
    }
    auto5333E637_ae = lv__lastindex;
    lv__i = 0;
    for ( ; ( (auto5333E637_ai >= 0 && lv__i <= auto5333E637_ae) || (auto5333E637_ai < 0 && lv__i >= auto5333E637_ae) ) ; lv__i += auto5333E637_ai ) {
        lv__indicestochoosefrom[lv__i] = lv__i;
    }
    auto6EABDCC4_ae = lv__lastindex;
    lv__i = 0;
    for ( ; ( (auto6EABDCC4_ai >= 0 && lv__i <= auto6EABDCC4_ae) || (auto6EABDCC4_ai < 0 && lv__i >= auto6EABDCC4_ae) ) ; lv__i += auto6EABDCC4_ai ) {
        lv__randomindex = RandomInt(0, lv__lastindextochoosefrom);
        lib1_gv_randomindices[lv__i] = lv__indicestochoosefrom[lv__randomindex];
        autoA445F2A2_ae = lv__lastindextochoosefrom;
        lv__j = lv__randomindex;
        for ( ; ( (autoA445F2A2_ai >= 0 && lv__j <= autoA445F2A2_ae) || (autoA445F2A2_ai < 0 && lv__j >= autoA445F2A2_ae) ) ; lv__j += autoA445F2A2_ai ) {
            lv__indicestochoosefrom[lv__j] = lv__indicestochoosefrom[(lv__j + 1)];
        }
        lv__lastindextochoosefrom = (lv__lastindextochoosefrom - 1);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: continue every second timer
//--------------------------------------------------------------------------------------------------
bool lib1_gt_continueeverysecondtimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lib1_gv_everysecond, 1.0, true, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_continueeverysecondtimer_Init () {
    lib1_gt_continueeverysecondtimer = TriggerCreate("lib1_gt_continueeverysecondtimer_Func");
    TriggerAddEventTimer(lib1_gt_continueeverysecondtimer, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: display debounced message to all users
//--------------------------------------------------------------------------------------------------
bool lib1_gt_displaydebouncedmessagetoallusers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    string lv__id;
    int lv__currenttimeint;
    lib1_gs_debouncedmessage lv__debouncedmessage;

    // Automatic Variable Declarations
    const int auto7CB6079C_ae = 99;
    const int auto7CB6079C_ai = 1;

    // Variable Initialization
    lv__id = "";
    lv__currenttimeint = lib1_gf_getcurrenttimeint();
    lv__debouncedmessage.lv_id = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv__i = 0;
    for ( ; ( (auto7CB6079C_ai >= 0 && lv__i <= auto7CB6079C_ae) || (auto7CB6079C_ai < 0 && lv__i >= auto7CB6079C_ae) ) ; lv__i += auto7CB6079C_ai ) {
        lv__debouncedmessage.lv_id = lib1_gv_debouncedmessages[lv__i].lv_id;
        if (lib1_gf_isemptystring(lv__debouncedmessage.lv_id)) {
            break;
        }

        lv__debouncedmessage.lv_insertedattimeint = lib1_gv_debouncedmessages[lv__i].lv_insertedattimeint;
        lv__debouncedmessage.lv_secondstodebounce = lib1_gv_debouncedmessages[lv__i].lv_secondstodebounce;
        if (((lv__currenttimeint - lv__debouncedmessage.lv_secondstodebounce) >= lv__debouncedmessage.lv_insertedattimeint)) {
            lv__debouncedmessage.lv_message = lib1_gv_debouncedmessages[lv__i].lv_message;
            lib1_gf_messageallusers(lv__debouncedmessage.lv_message);
            lib1_gf_debouncedmessageremove(lv__debouncedmessage.lv_id);
            lv__i = lv__i - 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_displaydebouncedmessagetoallusers_Init () {
    lib1_gt_displaydebouncedmessagetoallusers = TriggerCreate("lib1_gt_displaydebouncedmessagetoallusers_Func");
    TriggerAddEventTimer(lib1_gt_displaydebouncedmessagetoallusers, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: *track previous selected unit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_trackpreviousselectedunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_selectedunits[EventPlayer()][1] = lib1_gv_selectedunits[EventPlayer()][0];
    lib1_gv_selectedunits[EventPlayer()][0] = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_trackpreviousselectedunit_Init () {
    lib1_gt_trackpreviousselectedunit = TriggerCreate("lib1_gt_trackpreviousselectedunit_Func");
    TriggerAddEventUnitSelected(lib1_gt_trackpreviousselectedunit, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: utils - init map
//--------------------------------------------------------------------------------------------------
bool lib1_gt_utilsinitmap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_initeverysecondtimer();
    lib1_gf_initlocaldebuggingstate();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_utilsinitmap_Init () {
    lib1_gt_utilsinitmap = TriggerCreate("lib1_gt_utilsinitmap_Func");
    TriggerAddEventMapInit(lib1_gt_utilsinitmap);
}

void lib1_InitTriggers () {
    lib1_gt_continueeverysecondtimer_Init();
    lib1_gt_displaydebouncedmessagetoallusers_Init();
    lib1_gt_trackpreviousselectedunit_Init();
    lib1_gt_utilsinitmap_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    lib1_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_numrounds = 25;
const int gv_allycompplayer = 9;
const int gv_enemyplayer = 10;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_pathtestsegmentinfo {
    bool lv_isactive;
    point lv_start;
    point lv_destination;
    unit lv_unit;
    point lv_oppositesideofmap;
};

struct gs_playerbankinfo {
    bool lv_hasplayed;
};

struct gs_unitandcurrentdestinationpoint {
    point lv_destinationpoint;
    unit lv_u;
};

//--------------------------------------------------------------------------------------------------
// Global Preset Declarations
//--------------------------------------------------------------------------------------------------
const int ge_choicetype_unit = 0;
const int ge_choicetype_minerals = 1;
const int ge_clockwiselocation_top = 0;
const int ge_clockwiselocation_topright = 1;
const int ge_clockwiselocation_right = 2;
const int ge_clockwiselocation_botright = 3;
const int ge_clockwiselocation_bot = 4;
const int ge_clockwiselocation_botleft = 5;
const int ge_clockwiselocation_left = 6;
const int ge_clockwiselocation_topleft = 7;
const int ge_clockwiseenemypathlocation_enemypathtop = 0;
const int ge_clockwiseenemypathlocation_enemypathtoprighttop = 1;
const int ge_clockwiseenemypathlocation_enemypathtoprightright = 2;
const int ge_clockwiseenemypathlocation_enemypathright = 3;
const int ge_clockwiseenemypathlocation_enemypathbotrightright = 4;
const int ge_clockwiseenemypathlocation_enemypathbotrightbot = 5;
const int ge_clockwiseenemypathlocation_enemypathbot = 6;
const int ge_clockwiseenemypathlocation_enemypathbotleftleft = 7;
const int ge_clockwiseenemypathlocation_enemypathbotleftbot = 8;
const int ge_clockwiseenemypathlocation_enemypathleft = 9;
const int ge_clockwiseenemypathlocation_enemypathtoplefttop = 10;
const int ge_clockwiseenemypathlocation_enemypathtopleftleft = 11;
const int ge_enemyspawnpathsegments_spawntopsegment1 = 0;
const int ge_enemyspawnpathsegments_spawntoprighttop = 1;
const int ge_enemyspawnpathsegments_spawntoprightright = 2;
const int ge_enemyspawnpathsegments_spawnrightsegment1 = 3;
const int ge_enemyspawnpathsegments_spawnbotrightright = 4;
const int ge_enemyspawnpathsegments_spawnbotrightbot = 5;
const int ge_enemyspawnpathsegments_spawnbotsegment1 = 6;
const int ge_enemyspawnpathsegments_spawnbotleftbot = 7;
const int ge_enemyspawnpathsegments_spawnbotleftleft = 8;
const int ge_enemyspawnpathsegments_spawnleftsegment1 = 9;
const int ge_enemyspawnpathsegments_spawntopleftleft = 10;
const int ge_enemyspawnpathsegments_spawntoplefttop = 11;
const int ge_enemyspawnpathsegments_spawntopsegment2 = 12;
const int ge_enemyspawnpathsegments_spawnrightsegment2 = 13;
const int ge_enemyspawnpathsegments_spawnbotsegment2 = 14;
const int ge_enemyspawnpathsegments_spawnleftsegment2 = 15;
const int ge_gameattributeaddmodstoallrounds_yes = 0;
const int ge_gameattributeaddmodstoallrounds_no = 1;
const int ge_gameattributedifficulty_L1Beginner = 0;
const int ge_gameattributedifficulty_L2 = 1;
const int ge_gameattributedifficulty_L3 = 2;
const int ge_gameattributedifficulty_L4Standard = 3;
const int ge_gameattributedifficulty_L5Hard = 4;
const int ge_gameattributeroundtimer_none = 0;
const int ge_gameattributeroundtimer_default = 1;
const int ge_gameattributeroundtimer_quick = 2;
const int ge_gameattributeroundtimer_nonstop = 3;
const int ge_modtypes_none = 0;
const int ge_modtypes_increaseenemycount = 1;
const int ge_modtypes_increasespeed = 2;
const int ge_modtypes_addarmor = 3;
const int ge_modtypes_addshields = 4;
const int ge_modtypes_perfectspecimen = 5;
const int ge_pathtestsegments_verticalleft = 0;
const int ge_pathtestsegments_verticaltop = 1;
const int ge_pathtestsegments_verticalright = 2;
const int ge_pathtestsegments_verticalbot = 3;
const int ge_pathtestsegments_horizontaltop = 4;
const int ge_pathtestsegments_horizontalleft = 5;
const int ge_pathtestsegments_horizontalright = 6;
const int ge_pathtestsegments_horizontalbot = 7;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
bool gv_testpathlock;
bool[10] gv_autoupgradelockperplayer;
bool gv_lockkeepspawnclearofunits;
bool gv_unitchooserlock;
bool[10] gv_unitchooserlockbyplayer;
int gv_currentextralife;
int gv_currentround;
int gv_enemieskilled;
int gv_enemieskilledperchooserforsingleplayer;
int gv_enemiesperround;
fixed gv_initialsecondsbetweenenemies;
bool gv_isspawningenemies;
bool gv_lockclearenemies;
bool gv_lockenemieskilled;
bool gv_lockroundfinished;
int gv_maxextralives;
bool gv_roundfinished;
timer gv_roundtimer;
int gv_secondsbeforefirstround;
int gv_secondsbetweenghostspawn;
int gv_secondsbetweenrounds;
bool[9] gv_activedefenderlocations;
playergroup gv_activedefenders;
playergroup gv_activedefendersplusallycomp;
bool gv_allplayershavechosenlocation;
bool[10] gv_autoskipbyplayer;
fixed gv_chooserradius;
fixed gv_chooserradiusbig;
actor gv_currentenemyindicator;
unit[9] gv_defendlocationbeaconperlocation;
point[9] gv_defendlocationtochooserspawnpoint;
region[9] gv_defendlocationtoislandsregion;
int[9][3] gv_defendlocationtopathtestsegments;
point[9] gv_defendpointperlocation;
playergroup gv_enemy;
region[13] gv_enemyclearregionperlocation;
timer[9] gv_enemyghostspawntimer;
unitgroup gv_enemyghostsonmap;
string[4] gv_enemygroupsimple;
string[51] gv_enemyids;
point[26] gv_enemymodpoints;
int[26][4] gv_enemymods;
int[13] gv_enemypathlocationopposites;
string[26] gv_enemyperround;
point[9][3] gv_enemyrallypointsperlocation;
point[9] gv_enemyrallypointspertelespawn;
point[26] gv_enemyshowcasepoints;
point[9][3] gv_enemyspawnpointsperlocation;
region[9] gv_enemyteleregions;
point[9] gv_enemytelespawns;
point[26] gv_extralifepoints;
int gv_gameattributeaddmodstoallrounds;
int gv_gameattributedifficulty;
int gv_gameattributeroundtimer;
int[10] gv_kickplayerlistdicancel;
int[10][10] gv_kickplayerlistdiplayer;
int[10] gv_kickplayerlistdialog;
int gv_kickplayervotedialog;
int gv_kickplayervotedimeh;
int gv_kickplayervotedino;
int gv_kickplayervotediyes;
int gv_kickplayervoteinprogressdialog;
bool gv_kickplayervoteinprogress;
int gv_kickplayervoteresultsdialog;
int gv_kickplayervoteresultsdiclose;
timer gv_kickplayervotetimer;
timer[10] gv_kickplayervotespamtimer;
int gv_kickplayervotevalue;
bool[10] gv_kickplayervotewascast;
unit[10] gv_invisiblewaypointchooserperplayer;
int[9][3] gv_locationandsublocationtoenemypathlocation;
int[9] gv_locationtoplayer;
int[16] gv_modtypedice;
int gv_modtypedicelastindex;
string[6] gv_modtypetomodunittype;
string[6] gv_modtypetobuff;
int gv_numenemieswhoreachedtheend;
gs_pathtestsegmentinfo[9] gv_pathtestsegments;
unit[9][3] gv_pathtestsegmenttopathtesters;
bool[9] gv_pathtestsegmenttoactivepath;
gs_playerbankinfo[9] gv_playerbankvars;
bank[9] gv_playerbanks;
int gv_playerbeingvotedontokick;
int[10] gv_playertodefenderlocation;
bool[10] gv_playertoghostsenabled;
int[10] gv_playertonumchoosersspent;
bool[10] gv_playertoskipclicked;
int gv_playerwhoinitiatedvote;
int[26] gv_possibleenemyunitsperroundnumber;
string[26][5] gv_possibleenemyunitsperroundunits;
int gv_rounddialog;
int gv_rounddialogitemlabel;
int gv_rounddialogitemtimervalue;
int gv_rounddialogitemskip;
bool gv_roundtimerexists;
bool gv_roundtimerisnonstop;
bool[26] gv_roundstopickrandommod;
string[13] gv_spawnbehaviors;
point[10] gv_spawnpointperplayer;
int gv_startvotetokickplayerdialog;
int gv_startvotetokickplayerdibutton;
int[9] gv_telelocationtoenemyspawnpathsegments;
int[9] gv_telelocationtospawnclockwiselocation;
int gv_testoverridegameattributedifficulty;
bool gv_testingmultiplayerlocally;
string[9] gv_unitbeaconperlocation;
point[9][9] gv_unitbeaconpoints;
int[10] gv_unitchooserpathdisplayperplayer;
bool[10] gv_unitchooserpathexistsperplayer;
string[9][4] gv_unitperlocationandrace;
point[9][9] gv_unitpoints;
unitgroup gv_unitswithfullrefundavailable;

void InitGlobals () {
    int init_i;
    int init_j;

    gv_enemieskilledperchooserforsingleplayer = 4;
    gv_enemiesperround = 10;
    gv_initialsecondsbetweenenemies = 0.8;
    gv_maxextralives = 25;
    gv_roundtimer = TimerCreate();
    gv_secondsbeforefirstround = 120;
    gv_secondsbetweenghostspawn = 10;
    gv_secondsbetweenrounds = 40;
    gv_activedefenders = PlayerGroupEmpty();
    gv_activedefendersplusallycomp = PlayerGroupEmpty();
    gv_chooserradius = 2.0;
    gv_chooserradiusbig = 3.0;
    gv_enemy = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 8; init_i += 1) {
        gv_enemyghostspawntimer[init_i] = TimerCreate();
    }
    gv_enemyghostsonmap = UnitGroupEmpty();
    for (init_i = 0; init_i <= 50; init_i += 1) {
        gv_enemyids[init_i] = "";
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_kickplayerlistdicancel[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        for (init_j = 0; init_j <= 9; init_j += 1) {
            gv_kickplayerlistdiplayer[init_i][init_j] = c_invalidDialogControlId;
        }
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_kickplayerlistdialog[init_i] = c_invalidDialogId;
    }
    gv_kickplayervotedialog = c_invalidDialogId;
    gv_kickplayervotedimeh = c_invalidDialogControlId;
    gv_kickplayervotedino = c_invalidDialogControlId;
    gv_kickplayervotediyes = c_invalidDialogControlId;
    gv_kickplayervoteinprogressdialog = c_invalidDialogId;
    gv_kickplayervoteresultsdialog = c_invalidDialogId;
    gv_kickplayervoteresultsdiclose = c_invalidDialogControlId;
    gv_kickplayervotetimer = TimerCreate();
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_kickplayervotespamtimer[init_i] = TimerCreate();
    }
    gv_modtypedicelastindex = 14;
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_playertodefenderlocation[init_i] = -1;
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_playertoghostsenabled[init_i] = true;
    }
    gv_rounddialog = c_invalidDialogId;
    gv_rounddialogitemlabel = c_invalidDialogControlId;
    gv_rounddialogitemtimervalue = c_invalidDialogControlId;
    gv_rounddialogitemskip = c_invalidDialogControlId;
    gv_roundtimerexists = true;
    gv_startvotetokickplayerdialog = c_invalidDialogId;
    gv_startvotetokickplayerdibutton = c_invalidDialogControlId;
    gv_testoverridegameattributedifficulty = -1;
    gv_unitswithfullrefundavailable = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_initunitpointstop ();
void gf_initunitpointstopright ();
void gf_initunitpointsright ();
void gf_initunitpointsbotright ();
void gf_initunitpointsbot ();
void gf_initunitpointsbotleft ();
void gf_initunitpointsleft ();
void gf_initunitpointstopleft ();
void gf_initunitperlocationprotoss ();
void gf_initunitperlocationterran ();
void gf_initunitperlocationzerg ();
void gf_initunitpoints ();
void gf_initunitperlocation ();
void gf_initunitbeaconpointstop ();
void gf_initunitbeaconpointstopright ();
void gf_initunitbeaconpointsright ();
void gf_initunitbeaconpointsbotright ();
void gf_initunitbeaconpointsbot ();
void gf_initunitbeaconpointsbotleft ();
void gf_initunitbeaconpointsleft ();
void gf_initunitbeaconpointstopleft ();
void gf_initunitbeaconpoints ();
void gf_initunitbeaconpointsperlocation ();
void gf_initalliance ();
void gf_initattributebuffamounts ();
void gf_initbanks ();
void gf_initchooserspawnpoints ();
void gf_initdefendlocationbeaconperlocation ();
void gf_initdefendlocationtoislandregion ();
void gf_initdefendlocationtopathtestsegments ();
void gf_initdefendpointperlocation ();
void gf_initenemyclearregionperpathlocation ();
void gf_initenemygroups ();
void gf_initenemyids ();
void gf_initenemymaxhealthandshield ();
void gf_initenemymodpoints ();
void gf_initenemymods ();
void gf_initenemypathlocationopposites ();
void gf_initenemyperround25 ();
void gf_initenemyperroundrest ();
void gf_initenemyrallypointsperlocation ();
void gf_initenemyrallypointspertelespawn ();
void gf_initenemyshowcase ();
void gf_initenemyshowcasepoints ();
void gf_initenemyspawnpointsperlocation ();
void gf_initenemyteleregions ();
void gf_initenemytelespawns ();
void gf_initextralifepoints ();
void gf_initextralives ();
void gf_initgameattributevars ();
void gf_initlocationandsublocationtospawnclockwiselocation ();
void gf_initlocationchoosers ();
void gf_initmisc ();
void gf_initmodtypedice ();
void gf_initmodtypetobuff ();
void gf_initmodtypetomodunit ();
void gf_initpathtesters ();
void gf_initplayergroups ();
void gf_initpossibleenemyunitsperround ();
void gf_initresources ();
void gf_initroundtimer ();
void gf_initrounddialog ();
void gf_initspawnbehaviors ();
void gf_initspawnpointperplayer ();
void gf_inittelelocationtospawnclockwiselocation ();
void gf_inittelelocationtoenemyspawnpathsegments ();
void gf_initvotetokickplayerdialogs ();
void gf_initspawnpoint (int lp_p, point lp_defendpoint);
void gf_choosespawnlocation (int lp_defenderlocation, int lp_p, unit lp_chooser);
void gf_clearspawnlocationwhenempty ();
void gf_createworkeratlocation (point lp_spawnpoint, int lp_p);
void gf_initunitsforlocation (int lp_defenderlocation, int lp_player);
void gf_initunit (int lp_defenderlocation, int lp_unitlocation, int lp_race);
void gf_initunitbotright (int lp_defenderlocation, int lp_race);
void gf_initunitbotleft (int lp_defenderlocation, int lp_race);
void gf_initunitbot (int lp_defenderlocation, int lp_race);
void gf_initunitleft (int lp_defenderlocation, int lp_p, int lp_race);
void gf_initunitarea (int lp_defenderlocation, int lp_p);
bool gf_allactivepathsareclear ();
bool gf_buildingiswall (unit lp_building);
bool gf_buildingisattackingstructure (unit lp_building);
void gf_refundplayer (int lp_p, unit lp_building);
void gf_castkickvote (int lp_playerwhovoted, int lp_vote);
void gf_reenablestartvotebutton (int lp_p);
void gf_resetvotestate ();
void gf_handleplayerleavingwhowasbeingvotedon ();
void gf_setkickvoteplayerlist ();
void gf_startkickvoteforplayer (int lp_initiatedbyplayer, int lp_kickplayer);
void gf_showvoteresults ();
int gf_getvotevaluethreshold ();
bool gf_unitisbuilder (unit lp_u);
int gf_rollmodtypedice ();
void gf_applymodtounit (unit lp_u, int lp_modtype);
void gf_createmoddedunitatpoint (string lp_ut, int lp_p, point lp_point, int lp_opts, int lp_modtype);
void gf_createplayerunitatpoint (int lp_location, int lp_race, int lp_player, point lp_point, string lp_utoverride, int lp_opts);
void gf_removefullrefund ();
void gf_removeghost (unit lp_u);
void gf_removeplayer (int lp_p);
void gf_startallenemyghostspawnlocations ();
void gf_startenemyghostspawnatlocation (int lp_location);
void gf_stopandclearenemyghostspawn ();
void gf_updateactivepathtests ();
void gf_upgradebuilding (string lp_buildingtypetocreate);
void gf_skipforplayeriftimerisactive (int lp_p);
void gf_spawnunit (int lp_unitlocation, int lp_p);
void gf_chooseunit (int lp_numchoosers, int lp_location, int lp_p, region lp_region, int lp_choicetype);
bool gf_isboss ();
bool gf_isenemyghost (unit lp_u);
bool gf_shouldpingchooser (int lp_p);
int gf_getcurrentmodtype ();
string gf_getcurrentenemyunittypetospawn ();
void gf_endgame (int lp_gameovertype);
void gf_enemyreachedend ();
void gf_incrementenemieskilled ();
void gf_removeenemy (unit lp_u);
void gf_resetskipclicked ();
void gf_runround ();
void gf_skipifallclicked ();
void gf_spawnenemies ();
void gf_spawnenemyghostsatlocation (int lp_location);
void gf_spawnsingleenemy (fixed lp_afterNseconds, int lp_currentmodtype, point lp_enemyrallypoint, point lp_enemyspawnpoint, string lp_enemyunittype, string lp_spawnbehavior, bool lp_isghost);
void gf_startroundtimer (int lp_numseconds);
void gf_updatedialogtimervalue ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_initmap;
trigger gt_choosespawnlocationtop;
trigger gt_choosespawnlocationtopright;
trigger gt_choosespawnlocationright;
trigger gt_choosespawnlocationbotright;
trigger gt_choosespawnlocationbot;
trigger gt_choosespawnlocationbotleft;
trigger gt_choosespawnlocationleft;
trigger gt_choosespawnlocationtopleft;
trigger gt_testpaths;
trigger gt_showkickplayerlist;
trigger gt_kickplayerlistcancel;
trigger gt_kickplayerlistchooseplayer;
trigger gt_castkickvote;
trigger gt_closevoteresults;
trigger gt_spamtimerexpires;
trigger gt_votetimerexpires;
trigger gt_upgradespinecrawlerdamage;
trigger gt_upgradebunkerturretdamage;
trigger gt_upgradephotoncannondamage;
trigger gt_upgradezergunitdamage;
trigger gt_upgradeterranunitdamage;
trigger gt_upgradeprotossunitdamage;
trigger gt_idleenemyworkers;
trigger gt_keepspawnclearofunits;
trigger gt_fullrefundavailableatstartandbetweenrounds;
trigger gt_handleplayerdrop;
trigger gt_bunkerattackenemyandredirectattack;
trigger gt_fullrefund;
trigger gt_movespawnflag;
trigger gt_upgradebuildingprotossattackdronehub;
trigger gt_upgradebuildingprotossbigboycannon;
trigger gt_upgradebuildingprotossholepuncher;
trigger gt_upgradebuildingprotossphotoncannon;
trigger gt_upgradebuildingterranbunker;
trigger gt_upgradebuildingzergbilelauncher;
trigger gt_upgradebuildingzergspinecrawler;
trigger gt_upgradebuildingzergsunkencolony;
trigger gt_upgradebuildingzergwasplingburrow;
trigger gt_clearrallyunitchooser;
trigger gt_rallyunitchooser;
trigger gt_changerace;
trigger gt_kick;
trigger gt_testcastkickvote;
trigger gt_autoskip;
trigger gt_commands;
trigger gt_toggleghosts;
trigger gt_choosetop;
trigger gt_choosetopright;
trigger gt_chooseright;
trigger gt_choosebotright;
trigger gt_choosebot;
trigger gt_choosebotleft;
trigger gt_chooseleft;
trigger gt_choosetopleft;
trigger gt_allenemiesgone;
trigger gt_clearenemies;
trigger gt_everysecondupdatedialogtimervalue;
trigger gt_gainchoosers;
trigger gt_runround;
trigger gt_pingchooserstonewusers;
trigger gt_skiproundtimer;
trigger gt_spawnenemyghosts;
trigger gt_teleenemies;

//--------------------------------------------------------------------------------------------------
// Global Presets
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_initunitpointstop () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitpoints[ge_clockwiselocation_top][ge_clockwiselocation_top] = PointFromId(376396905);
    gv_unitpoints[ge_clockwiselocation_top][ge_clockwiselocation_topright] = PointFromId(1758466144);
    gv_unitpoints[ge_clockwiselocation_top][ge_clockwiselocation_right] = PointFromId(1177448052);
    gv_unitpoints[ge_clockwiselocation_top][ge_clockwiselocation_botright] = PointFromId(422207204);
    gv_unitpoints[ge_clockwiselocation_top][ge_clockwiselocation_bot] = PointFromId(779640431);
    gv_unitpoints[ge_clockwiselocation_top][ge_clockwiselocation_botleft] = PointFromId(945050972);
    gv_unitpoints[ge_clockwiselocation_top][ge_clockwiselocation_left] = PointFromId(653242522);
    gv_unitpoints[ge_clockwiselocation_top][ge_clockwiselocation_topleft] = PointFromId(987381297);
}

void gf_initunitpointstopright () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitpoints[ge_clockwiselocation_topright][ge_clockwiselocation_top] = PointFromId(1404681884);
    gv_unitpoints[ge_clockwiselocation_topright][ge_clockwiselocation_topright] = PointFromId(659023028);
    gv_unitpoints[ge_clockwiselocation_topright][ge_clockwiselocation_right] = PointFromId(794956139);
    gv_unitpoints[ge_clockwiselocation_topright][ge_clockwiselocation_botright] = PointFromId(617484639);
    gv_unitpoints[ge_clockwiselocation_topright][ge_clockwiselocation_bot] = PointFromId(1939579920);
    gv_unitpoints[ge_clockwiselocation_topright][ge_clockwiselocation_botleft] = PointFromId(1309141538);
    gv_unitpoints[ge_clockwiselocation_topright][ge_clockwiselocation_left] = PointFromId(472756372);
    gv_unitpoints[ge_clockwiselocation_topright][ge_clockwiselocation_topleft] = PointFromId(437634046);
}

void gf_initunitpointsright () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitpoints[ge_clockwiselocation_right][ge_clockwiselocation_top] = PointFromId(1097815533);
    gv_unitpoints[ge_clockwiselocation_right][ge_clockwiselocation_topright] = PointFromId(98756316);
    gv_unitpoints[ge_clockwiselocation_right][ge_clockwiselocation_right] = PointFromId(1387029668);
    gv_unitpoints[ge_clockwiselocation_right][ge_clockwiselocation_botright] = PointFromId(1536260855);
    gv_unitpoints[ge_clockwiselocation_right][ge_clockwiselocation_bot] = PointFromId(767370489);
    gv_unitpoints[ge_clockwiselocation_right][ge_clockwiselocation_botleft] = PointFromId(578198274);
    gv_unitpoints[ge_clockwiselocation_right][ge_clockwiselocation_left] = PointFromId(1614463141);
    gv_unitpoints[ge_clockwiselocation_right][ge_clockwiselocation_topleft] = PointFromId(1682812790);
}

void gf_initunitpointsbotright () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitpoints[ge_clockwiselocation_botright][ge_clockwiselocation_top] = PointFromId(701278092);
    gv_unitpoints[ge_clockwiselocation_botright][ge_clockwiselocation_topright] = PointFromId(1244855179);
    gv_unitpoints[ge_clockwiselocation_botright][ge_clockwiselocation_right] = PointFromId(1260458794);
    gv_unitpoints[ge_clockwiselocation_botright][ge_clockwiselocation_botright] = PointFromId(198101556);
    gv_unitpoints[ge_clockwiselocation_botright][ge_clockwiselocation_bot] = PointFromId(1294072365);
    gv_unitpoints[ge_clockwiselocation_botright][ge_clockwiselocation_botleft] = PointFromId(1116069586);
    gv_unitpoints[ge_clockwiselocation_botright][ge_clockwiselocation_left] = PointFromId(714740905);
    gv_unitpoints[ge_clockwiselocation_botright][ge_clockwiselocation_topleft] = PointFromId(615964535);
}

void gf_initunitpointsbot () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitpoints[ge_clockwiselocation_bot][ge_clockwiselocation_top] = PointFromId(1894531084);
    gv_unitpoints[ge_clockwiselocation_bot][ge_clockwiselocation_topright] = PointFromId(628955827);
    gv_unitpoints[ge_clockwiselocation_bot][ge_clockwiselocation_right] = PointFromId(1036612316);
    gv_unitpoints[ge_clockwiselocation_bot][ge_clockwiselocation_botright] = PointFromId(1788391928);
    gv_unitpoints[ge_clockwiselocation_bot][ge_clockwiselocation_bot] = PointFromId(788559252);
    gv_unitpoints[ge_clockwiselocation_bot][ge_clockwiselocation_botleft] = PointFromId(55034273);
    gv_unitpoints[ge_clockwiselocation_bot][ge_clockwiselocation_left] = PointFromId(560919080);
    gv_unitpoints[ge_clockwiselocation_bot][ge_clockwiselocation_topleft] = PointFromId(1062813203);
}

void gf_initunitpointsbotleft () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_top] = PointFromId(777797571);
    gv_unitpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_topright] = PointFromId(1774992185);
    gv_unitpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_right] = PointFromId(1226552727);
    gv_unitpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_botright] = PointFromId(94172866);
    gv_unitpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_bot] = PointFromId(1868421660);
    gv_unitpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_botleft] = PointFromId(274238423);
    gv_unitpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_left] = PointFromId(607903274);
    gv_unitpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_topleft] = PointFromId(1525815052);
}

void gf_initunitpointsleft () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitpoints[ge_clockwiselocation_left][ge_clockwiselocation_top] = PointFromId(107806898);
    gv_unitpoints[ge_clockwiselocation_left][ge_clockwiselocation_topright] = PointFromId(2107120323);
    gv_unitpoints[ge_clockwiselocation_left][ge_clockwiselocation_right] = PointFromId(63749661);
    gv_unitpoints[ge_clockwiselocation_left][ge_clockwiselocation_botright] = PointFromId(333386379);
    gv_unitpoints[ge_clockwiselocation_left][ge_clockwiselocation_bot] = PointFromId(1022084214);
    gv_unitpoints[ge_clockwiselocation_left][ge_clockwiselocation_botleft] = PointFromId(1417306797);
    gv_unitpoints[ge_clockwiselocation_left][ge_clockwiselocation_left] = PointFromId(56910441);
    gv_unitpoints[ge_clockwiselocation_left][ge_clockwiselocation_topleft] = PointFromId(1212478299);
}

void gf_initunitpointstopleft () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_top] = PointFromId(519794972);
    gv_unitpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_topright] = PointFromId(878532559);
    gv_unitpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_right] = PointFromId(1576426122);
    gv_unitpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_botright] = PointFromId(118426019);
    gv_unitpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_bot] = PointFromId(457179216);
    gv_unitpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_botleft] = PointFromId(2098394809);
    gv_unitpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_left] = PointFromId(530488048);
    gv_unitpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_topleft] = PointFromId(1861422191);
}

void gf_initunitperlocationprotoss () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitperlocationandrace[ge_clockwiselocation_top][lib1_ge_race_protoss] = "StalkerHd";
    gv_unitperlocationandrace[ge_clockwiselocation_topright][lib1_ge_race_protoss] = "ArchonHd";
    gv_unitperlocationandrace[ge_clockwiselocation_right][lib1_ge_race_protoss] = "ImmortalHd";
    gv_unitperlocationandrace[ge_clockwiselocation_botright][lib1_ge_race_protoss] = "ReaverHd";
    gv_unitperlocationandrace[ge_clockwiselocation_bot][lib1_ge_race_protoss] = "ColossusHd";
    gv_unitperlocationandrace[ge_clockwiselocation_botleft][lib1_ge_race_protoss] = "TempestHd";
    gv_unitperlocationandrace[ge_clockwiselocation_left][lib1_ge_race_protoss] = "ResearchCenterProtossHd";
    gv_unitperlocationandrace[ge_clockwiselocation_topleft][lib1_ge_race_protoss] = "AdeptHd";
}

void gf_initunitperlocationterran () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitperlocationandrace[ge_clockwiselocation_top][lib1_ge_race_terran] = "MarauderHd";
    gv_unitperlocationandrace[ge_clockwiselocation_topright][lib1_ge_race_terran] = "FirebatHd";
    gv_unitperlocationandrace[ge_clockwiselocation_right][lib1_ge_race_terran] = "GhostHd";
    gv_unitperlocationandrace[ge_clockwiselocation_botright][lib1_ge_race_terran] = "SiegeTankHd";
    gv_unitperlocationandrace[ge_clockwiselocation_bot][lib1_ge_race_terran] = "ThorHd";
    gv_unitperlocationandrace[ge_clockwiselocation_botleft][lib1_ge_race_terran] = "LiberatorHd";
    gv_unitperlocationandrace[ge_clockwiselocation_left][lib1_ge_race_terran] = "ResearchCenterTerranHd";
    gv_unitperlocationandrace[ge_clockwiselocation_topleft][lib1_ge_race_terran] = "MarineHd";
}

void gf_initunitperlocationzerg () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitperlocationandrace[ge_clockwiselocation_top][lib1_ge_race_zerg] = "RoachHd";
    gv_unitperlocationandrace[ge_clockwiselocation_topright][lib1_ge_race_zerg] = "LurkerHd";
    gv_unitperlocationandrace[ge_clockwiselocation_right][lib1_ge_race_zerg] = "HydraliskHd";
    gv_unitperlocationandrace[ge_clockwiselocation_botright][lib1_ge_race_zerg] = "MutaliskHd";
    gv_unitperlocationandrace[ge_clockwiselocation_bot][lib1_ge_race_zerg] = "InfestedSiegeTankUprootedHd";
    gv_unitperlocationandrace[ge_clockwiselocation_botleft][lib1_ge_race_zerg] = "GuardianHd";
    gv_unitperlocationandrace[ge_clockwiselocation_left][lib1_ge_race_zerg] = "ResearchCenterZergHd";
    gv_unitperlocationandrace[ge_clockwiselocation_topleft][lib1_ge_race_zerg] = "InfestedTerranHd";
}

void gf_initunitpoints () {
    // Automatic Variable Declarations
    // Implementation
    gf_initunitpointstop();
    gf_initunitpointstopright();
    gf_initunitpointsright();
    gf_initunitpointsbotright();
    gf_initunitpointsbot();
    gf_initunitpointsbotleft();
    gf_initunitpointsleft();
    gf_initunitpointstopleft();
}

void gf_initunitperlocation () {
    // Automatic Variable Declarations
    // Implementation
    gf_initunitperlocationprotoss();
    gf_initunitperlocationterran();
    gf_initunitperlocationzerg();
}

void gf_initunitbeaconpointstop () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconpoints[ge_clockwiselocation_top][ge_clockwiselocation_top] = PointFromId(78753967);
    gv_unitbeaconpoints[ge_clockwiselocation_top][ge_clockwiselocation_topright] = PointFromId(1456086433);
    gv_unitbeaconpoints[ge_clockwiselocation_top][ge_clockwiselocation_right] = PointFromId(628985728);
    gv_unitbeaconpoints[ge_clockwiselocation_top][ge_clockwiselocation_botright] = PointFromId(852033013);
    gv_unitbeaconpoints[ge_clockwiselocation_top][ge_clockwiselocation_bot] = PointFromId(1025773052);
    gv_unitbeaconpoints[ge_clockwiselocation_top][ge_clockwiselocation_botleft] = PointFromId(970550996);
    gv_unitbeaconpoints[ge_clockwiselocation_top][ge_clockwiselocation_left] = PointFromId(1016863586);
    gv_unitbeaconpoints[ge_clockwiselocation_top][ge_clockwiselocation_topleft] = PointFromId(1061491136);
}

void gf_initunitbeaconpointstopright () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconpoints[ge_clockwiselocation_topright][ge_clockwiselocation_top] = PointFromId(533997263);
    gv_unitbeaconpoints[ge_clockwiselocation_topright][ge_clockwiselocation_topright] = PointFromId(837803804);
    gv_unitbeaconpoints[ge_clockwiselocation_topright][ge_clockwiselocation_right] = PointFromId(691494978);
    gv_unitbeaconpoints[ge_clockwiselocation_topright][ge_clockwiselocation_botright] = PointFromId(551137157);
    gv_unitbeaconpoints[ge_clockwiselocation_topright][ge_clockwiselocation_bot] = PointFromId(846440);
    gv_unitbeaconpoints[ge_clockwiselocation_topright][ge_clockwiselocation_botleft] = PointFromId(1764278175);
    gv_unitbeaconpoints[ge_clockwiselocation_topright][ge_clockwiselocation_left] = PointFromId(1154409010);
    gv_unitbeaconpoints[ge_clockwiselocation_topright][ge_clockwiselocation_topleft] = PointFromId(1939567621);
}

void gf_initunitbeaconpointsright () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconpoints[ge_clockwiselocation_right][ge_clockwiselocation_top] = PointFromId(2057706776);
    gv_unitbeaconpoints[ge_clockwiselocation_right][ge_clockwiselocation_topright] = PointFromId(1251994820);
    gv_unitbeaconpoints[ge_clockwiselocation_right][ge_clockwiselocation_right] = PointFromId(193140767);
    gv_unitbeaconpoints[ge_clockwiselocation_right][ge_clockwiselocation_botright] = PointFromId(928879015);
    gv_unitbeaconpoints[ge_clockwiselocation_right][ge_clockwiselocation_bot] = PointFromId(52267179);
    gv_unitbeaconpoints[ge_clockwiselocation_right][ge_clockwiselocation_botleft] = PointFromId(151315752);
    gv_unitbeaconpoints[ge_clockwiselocation_right][ge_clockwiselocation_left] = PointFromId(4326746);
    gv_unitbeaconpoints[ge_clockwiselocation_right][ge_clockwiselocation_topleft] = PointFromId(1552399524);
}

void gf_initunitbeaconpointsbotright () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconpoints[ge_clockwiselocation_botright][ge_clockwiselocation_top] = PointFromId(69372940);
    gv_unitbeaconpoints[ge_clockwiselocation_botright][ge_clockwiselocation_topright] = PointFromId(625743367);
    gv_unitbeaconpoints[ge_clockwiselocation_botright][ge_clockwiselocation_right] = PointFromId(1300210222);
    gv_unitbeaconpoints[ge_clockwiselocation_botright][ge_clockwiselocation_botright] = PointFromId(1171033856);
    gv_unitbeaconpoints[ge_clockwiselocation_botright][ge_clockwiselocation_bot] = PointFromId(1954757564);
    gv_unitbeaconpoints[ge_clockwiselocation_botright][ge_clockwiselocation_botleft] = PointFromId(1345536700);
    gv_unitbeaconpoints[ge_clockwiselocation_botright][ge_clockwiselocation_left] = PointFromId(1547170258);
    gv_unitbeaconpoints[ge_clockwiselocation_botright][ge_clockwiselocation_topleft] = PointFromId(1084233623);
}

void gf_initunitbeaconpointsbot () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconpoints[ge_clockwiselocation_bot][ge_clockwiselocation_top] = PointFromId(557071858);
    gv_unitbeaconpoints[ge_clockwiselocation_bot][ge_clockwiselocation_topright] = PointFromId(890760943);
    gv_unitbeaconpoints[ge_clockwiselocation_bot][ge_clockwiselocation_right] = PointFromId(1795181988);
    gv_unitbeaconpoints[ge_clockwiselocation_bot][ge_clockwiselocation_botright] = PointFromId(1196786689);
    gv_unitbeaconpoints[ge_clockwiselocation_bot][ge_clockwiselocation_bot] = PointFromId(2067720479);
    gv_unitbeaconpoints[ge_clockwiselocation_bot][ge_clockwiselocation_botleft] = PointFromId(1208114324);
    gv_unitbeaconpoints[ge_clockwiselocation_bot][ge_clockwiselocation_left] = PointFromId(1981237702);
    gv_unitbeaconpoints[ge_clockwiselocation_bot][ge_clockwiselocation_topleft] = PointFromId(1599385838);
}

void gf_initunitbeaconpointsbotleft () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_top] = PointFromId(704189669);
    gv_unitbeaconpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_topright] = PointFromId(1158879975);
    gv_unitbeaconpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_right] = PointFromId(978262974);
    gv_unitbeaconpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_botright] = PointFromId(194816851);
    gv_unitbeaconpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_bot] = PointFromId(910872851);
    gv_unitbeaconpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_botleft] = PointFromId(2090537115);
    gv_unitbeaconpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_left] = PointFromId(1750397661);
    gv_unitbeaconpoints[ge_clockwiselocation_botleft][ge_clockwiselocation_topleft] = PointFromId(69581309);
}

void gf_initunitbeaconpointsleft () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconpoints[ge_clockwiselocation_left][ge_clockwiselocation_top] = PointFromId(1591476509);
    gv_unitbeaconpoints[ge_clockwiselocation_left][ge_clockwiselocation_topright] = PointFromId(651751040);
    gv_unitbeaconpoints[ge_clockwiselocation_left][ge_clockwiselocation_right] = PointFromId(1428756895);
    gv_unitbeaconpoints[ge_clockwiselocation_left][ge_clockwiselocation_botright] = PointFromId(1776792780);
    gv_unitbeaconpoints[ge_clockwiselocation_left][ge_clockwiselocation_bot] = PointFromId(1981765748);
    gv_unitbeaconpoints[ge_clockwiselocation_left][ge_clockwiselocation_botleft] = PointFromId(488609416);
    gv_unitbeaconpoints[ge_clockwiselocation_left][ge_clockwiselocation_left] = PointFromId(1429236056);
    gv_unitbeaconpoints[ge_clockwiselocation_left][ge_clockwiselocation_topleft] = PointFromId(659731607);
}

void gf_initunitbeaconpointstopleft () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_top] = PointFromId(123965885);
    gv_unitbeaconpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_topright] = PointFromId(2116441393);
    gv_unitbeaconpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_right] = PointFromId(1639441590);
    gv_unitbeaconpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_botright] = PointFromId(571005906);
    gv_unitbeaconpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_bot] = PointFromId(1621754594);
    gv_unitbeaconpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_botleft] = PointFromId(67347418);
    gv_unitbeaconpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_left] = PointFromId(244062886);
    gv_unitbeaconpoints[ge_clockwiselocation_topleft][ge_clockwiselocation_topleft] = PointFromId(196851831);
}

void gf_initunitbeaconpoints () {
    // Automatic Variable Declarations
    // Implementation
    gf_initunitbeaconpointstop();
    gf_initunitbeaconpointstopright();
    gf_initunitbeaconpointsright();
    gf_initunitbeaconpointsbotright();
    gf_initunitbeaconpointsbot();
    gf_initunitbeaconpointsbotleft();
    gf_initunitbeaconpointsleft();
    gf_initunitbeaconpointstopleft();
}

void gf_initunitbeaconpointsperlocation () {
    // Automatic Variable Declarations
    // Implementation
    gv_unitbeaconperlocation[ge_clockwiselocation_top] = "2ChooserBeaconHd";
    gv_unitbeaconperlocation[ge_clockwiselocation_topright] = "2ChooserBeaconHd";
    gv_unitbeaconperlocation[ge_clockwiselocation_right] = "3ChooserBeaconHd";
    gv_unitbeaconperlocation[ge_clockwiselocation_botright] = "4ChooserBeaconHd";
    gv_unitbeaconperlocation[ge_clockwiselocation_bot] = "5ChooserBeaconHd";
    gv_unitbeaconperlocation[ge_clockwiselocation_botleft] = "6ChooserBeaconHd";
    gv_unitbeaconperlocation[ge_clockwiselocation_left] = "1ChooserBeaconHd";
    gv_unitbeaconperlocation[ge_clockwiselocation_topleft] = "1ChooserBeaconHd";
}

void gf_initalliance () {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetState(9, c_playerStateShowWorldTip, false);
    libNtve_gf_SetPlayerGroupAlliance(gv_activedefendersplusallycomp, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_activedefenders, gv_enemy, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(gv_enemy, gv_activedefenders, libNtve_ge_AllianceSetting_EnemyWithSharedVision);
    libNtve_gf_SetAllianceBetweenTwoPlayerGroups(PlayerGroupSingle(gv_allycompplayer), gv_enemy, libNtve_ge_AllianceSetting_Ally);
    if (lib1_gf_istrue(gv_testingmultiplayerlocally)) {
        libNtve_gf_SetPlayerGroupAlliance(gv_activedefendersplusallycomp, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    }

}

void gf_initattributebuffamounts () {
    int init_i;

    // Variable Declarations
    string[7] lv__catalogfieldpathstomodify;
    string lv__enemyid;
    string lv__fieldpath;
    int lv__i;
    int lv__j;
    int lv__k;
    int lv__p;
    int[3] lv__playerstomodify;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv__catalogfieldpathstomodify[init_i] = "";
    }
    lv__enemyid = "";
    lv__fieldpath = "";

    // Implementation
    if ((gv_gameattributedifficulty == ge_gameattributedifficulty_L5Hard)) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "IncreaseVsArmoredAttributeDamageHd", "Modification.DamageDealtAttributeMultiplier[" + IntToString(c_unitAttributeArmored) + "]", gv_allycompplayer, "0.3", c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, "IncreaseVsBiologicalAttributeDamageHd", "Modification.DamageDealtAttributeMultiplier[" + IntToString(c_unitAttributeBiological) + "]", gv_allycompplayer, "0.3", c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, "IncreaseVsBossAttributeDamageHd", "Modification.DamageDealtAttributeMultiplier[" + IntToString(c_unitAttributeHeroic) + "]", gv_allycompplayer, "0.3", c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, "IncreaseVsLightAttributeDamageHd", "Modification.DamageDealtAttributeMultiplier[" + IntToString(c_unitAttributeLight) + "]", gv_allycompplayer, "0.3", c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, "IncreaseVsMechanicalAttributeDamageHd", "Modification.DamageDealtAttributeMultiplier[" + IntToString(c_unitAttributeMechanical) + "]", gv_allycompplayer, "0.3", c_upgradeOperationSet);
    }

}

void gf_initbanks () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto912567DF_g;
    playergroup auto56E8F75F_g;
    playergroup auto18A2A761_g;

    // Variable Initialization

    // Implementation
    auto912567DF_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto912567DF_g, lv__p);
        if (lv__p < 0) { break; }
        gv_playerbankvars[lv__p].lv_hasplayed = BankExists("hashtagdefense", lv__p);
    }
    auto56E8F75F_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto56E8F75F_g, lv__p);
        if (lv__p < 0) { break; }
        BankLoad("hashtagdefense", lv__p);
        gv_playerbanks[lv__p] = BankLastCreated();
    }
    if (lib1_gf_playerisingroup(1, gv_activedefenders)) {
    }

    if (lib1_gf_playerisingroup(2, gv_activedefenders)) {
    }

    if (lib1_gf_playerisingroup(3, gv_activedefenders)) {
    }

    if (lib1_gf_playerisingroup(4, gv_activedefenders)) {
    }

    if (lib1_gf_playerisingroup(5, gv_activedefenders)) {
    }

    if (lib1_gf_playerisingroup(6, gv_activedefenders)) {
    }

    if (lib1_gf_playerisingroup(7, gv_activedefenders)) {
    }

    if (lib1_gf_playerisingroup(8, gv_activedefenders)) {
    }

    auto18A2A761_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto18A2A761_g, lv__p);
        if (lv__p < 0) { break; }
        if (lib1_gf_isfalse(gv_playerbankvars[lv__p].lv_hasplayed)) {
            BankSave(gv_playerbanks[lv__p]);
        }

    }
}

void gf_initchooserspawnpoints () {
    // Automatic Variable Declarations
    // Implementation
    gv_defendlocationtochooserspawnpoint[ge_clockwiselocation_top] = PointFromId(1249720996);
    gv_defendlocationtochooserspawnpoint[ge_clockwiselocation_topright] = PointFromId(1983099440);
    gv_defendlocationtochooserspawnpoint[ge_clockwiselocation_right] = PointFromId(1971071716);
    gv_defendlocationtochooserspawnpoint[ge_clockwiselocation_botright] = PointFromId(745720542);
    gv_defendlocationtochooserspawnpoint[ge_clockwiselocation_bot] = PointFromId(409578078);
    gv_defendlocationtochooserspawnpoint[ge_clockwiselocation_botleft] = PointFromId(3552434);
    gv_defendlocationtochooserspawnpoint[ge_clockwiselocation_left] = PointFromId(2101619351);
    gv_defendlocationtochooserspawnpoint[ge_clockwiselocation_topleft] = PointFromId(493029576);
}

void gf_initdefendlocationbeaconperlocation () {
    // Automatic Variable Declarations
    // Implementation
    gv_defendlocationbeaconperlocation[ge_clockwiselocation_top] = UnitFromId(209261321);
    gv_defendlocationbeaconperlocation[ge_clockwiselocation_topright] = UnitFromId(169646577);
    gv_defendlocationbeaconperlocation[ge_clockwiselocation_right] = UnitFromId(1976925429);
    gv_defendlocationbeaconperlocation[ge_clockwiselocation_botright] = UnitFromId(376238765);
    gv_defendlocationbeaconperlocation[ge_clockwiselocation_bot] = UnitFromId(220038668);
    gv_defendlocationbeaconperlocation[ge_clockwiselocation_botleft] = UnitFromId(469124253);
    gv_defendlocationbeaconperlocation[ge_clockwiselocation_left] = UnitFromId(302000048);
    gv_defendlocationbeaconperlocation[ge_clockwiselocation_topleft] = UnitFromId(1243337835);
}

void gf_initdefendlocationtoislandregion () {
    // Automatic Variable Declarations
    // Implementation
    gv_defendlocationtoislandsregion[ge_clockwiselocation_top] = RegionFromId(44);
    gv_defendlocationtoislandsregion[ge_clockwiselocation_topright] = RegionFromId(43);
    gv_defendlocationtoislandsregion[ge_clockwiselocation_right] = RegionFromId(42);
    gv_defendlocationtoislandsregion[ge_clockwiselocation_botright] = RegionFromId(41);
    gv_defendlocationtoislandsregion[ge_clockwiselocation_bot] = RegionFromId(40);
    gv_defendlocationtoislandsregion[ge_clockwiselocation_botleft] = RegionFromId(39);
    gv_defendlocationtoislandsregion[ge_clockwiselocation_left] = RegionFromId(38);
    gv_defendlocationtoislandsregion[ge_clockwiselocation_topleft] = RegionFromId(45);
}

void gf_initdefendlocationtopathtestsegments () {
    // Automatic Variable Declarations
    // Implementation
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_top][0] = ge_pathtestsegments_verticaltop;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_top][1] = ge_pathtestsegments_verticalbot;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_topright][0] = ge_pathtestsegments_verticalright;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_topright][1] = ge_pathtestsegments_horizontaltop;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_right][0] = ge_pathtestsegments_horizontalright;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_right][1] = ge_pathtestsegments_horizontalleft;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_botright][0] = ge_pathtestsegments_verticalright;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_botright][1] = ge_pathtestsegments_horizontalbot;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_bot][0] = ge_pathtestsegments_verticalbot;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_bot][1] = ge_pathtestsegments_verticaltop;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_botleft][0] = ge_pathtestsegments_verticalleft;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_botleft][1] = ge_pathtestsegments_horizontalbot;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_left][0] = ge_pathtestsegments_horizontalleft;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_left][1] = ge_pathtestsegments_horizontalright;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_topleft][0] = ge_pathtestsegments_verticalleft;
    gv_defendlocationtopathtestsegments[ge_clockwiselocation_topleft][1] = ge_pathtestsegments_horizontaltop;
}

void gf_initdefendpointperlocation () {
    // Automatic Variable Declarations
    // Implementation
    gv_defendpointperlocation[ge_clockwiselocation_top] = PointFromId(1182702197);
    gv_defendpointperlocation[ge_clockwiselocation_topright] = PointFromId(258428790);
    gv_defendpointperlocation[ge_clockwiselocation_right] = PointFromId(122615890);
    gv_defendpointperlocation[ge_clockwiselocation_botright] = PointFromId(328039401);
    gv_defendpointperlocation[ge_clockwiselocation_bot] = PointFromId(192448764);
    gv_defendpointperlocation[ge_clockwiselocation_botleft] = PointFromId(1792849818);
    gv_defendpointperlocation[ge_clockwiselocation_left] = PointFromId(1155927436);
    gv_defendpointperlocation[ge_clockwiselocation_topleft] = PointFromId(830891366);
}

void gf_initenemyclearregionperpathlocation () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathtop] = RegionFromId(9);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathtoprighttop] = RegionFromId(10);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathtoprightright] = RegionFromId(11);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathright] = RegionFromId(12);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathbotrightright] = RegionFromId(13);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathbotrightbot] = RegionFromId(14);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathbot] = RegionFromId(15);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathbotleftbot] = RegionFromId(16);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathbotleftleft] = RegionFromId(17);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathleft] = RegionFromId(18);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathtopleftleft] = RegionFromId(19);
    gv_enemyclearregionperlocation[ge_clockwiseenemypathlocation_enemypathtoplefttop] = RegionFromId(20);
}

void gf_initenemygroups () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemygroupsimple[0] = "SimpleQuickMarineEnemyHd";
    gv_enemygroupsimple[1] = "SimpleBeefyRoachEnemyHd";
    gv_enemygroupsimple[2] = "SimpleArmoredZealotHd";
}

void gf_initenemyids () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemyids[0] = "ArmoredCutieEnemyHd";
    gv_enemyids[1] = "ArmoredCycloneEnemyHd";
    gv_enemyids[2] = "ArmoredDragoonEnemyHd";
    gv_enemyids[3] = "ArmoredHellbatEnemyHd";
    gv_enemyids[4] = "ArmoredHercEnemyHd";
    gv_enemyids[5] = "ArmoredImmortalEnemyHd";
    gv_enemyids[6] = "ArmoredMarauderEnemyHd";
    gv_enemyids[7] = "ArmoredPygaliskEnemyHd";
    gv_enemyids[8] = "ArmoredQueenEnemyHd";
    gv_enemyids[9] = "ArmoredQuillyEnemyHd";
    gv_enemyids[10] = "ArmoredStalkerEnemyHd";
    gv_enemyids[11] = "ArmoredZealotEnemyHd";
    gv_enemyids[12] = "BiologicalAberrationEnemyHd";
    gv_enemyids[13] = "BiologicalHydraliskEnemyHd";
    gv_enemyids[14] = "BiologicalKerriganEnemyHd";
    gv_enemyids[15] = "BiologicalRavagerEnemyHd";
    gv_enemyids[16] = "BiologicalRavasaurEnemyHd";
    gv_enemyids[17] = "BiologicalUltraliskEnemyHd";
    gv_enemyids[18] = "BiologicalUrsadonEnemyHd";
    gv_enemyids[19] = "BossAlarakEnemyHd";
    gv_enemyids[20] = "BossDehakaEnemyHd";
    gv_enemyids[21] = "BossEradicatorEnemyHd";
    gv_enemyids[22] = "BossGiantRorySwannEnemyHd";
    gv_enemyids[23] = "BossHybridDominatorEnemyHd";
    gv_enemyids[24] = "BossKerriganEnemyHd";
    gv_enemyids[25] = "BossStoneZealotEnemyHd";
    gv_enemyids[26] = "BossYagdraEnemyHd";
    gv_enemyids[27] = "LightAdeptEnemyHd";
    gv_enemyids[28] = "LightBroodlingEnemyHd";
    gv_enemyids[29] = "LightDroneEnemyHd";
    gv_enemyids[30] = "LightGhostEnemyHd";
    gv_enemyids[31] = "LightHighTemplarEnemyHd";
    gv_enemyids[32] = "LightInfestedTerranEnemyHd";
    gv_enemyids[33] = "LightLocustEnemyHd";
    gv_enemyids[34] = "LightPrisonerEnemyHd";
    gv_enemyids[35] = "LightProbeEnemyHd";
    gv_enemyids[36] = "LightReaperEnemyHd";
    gv_enemyids[37] = "LightSCVEnemyHd";
    gv_enemyids[38] = "LightWarPigEnemyHd";
    gv_enemyids[39] = "MechanicalGoliathEnemyHd";
    gv_enemyids[40] = "MechanicalMilitarizedTransportEnemyHd";
    gv_enemyids[41] = "MechanicalShikotoCoupeEnemyHd";
    gv_enemyids[42] = "MechanicalSiegeTankTankModeEnemyHd";
    gv_enemyids[43] = "MechanicalVikingAssaultModeEnemyHd";
    gv_enemyids[44] = "MechanicalWarHoundEnemyHd";
    gv_enemyids[45] = "SimpleArmoredZealotHd";
    gv_enemyids[46] = "SimpleBeefyRoachEnemyHd";
    gv_enemyids[47] = "SimpleBossArchonEnemyHd";
    gv_enemyids[48] = "SimpleQuickMarineEnemyHd";
    gv_enemyids[49] = "WeaklingEnemyHd";
}

void gf_initenemymaxhealthandshield () {
    int init_i;

    // Variable Declarations
    string[7] lv__catalogfieldpathstomodify;
    string lv__enemyid;
    string lv__fieldpath;
    int lv__i;
    int lv__j;
    int lv__k;
    int lv__p;
    int[3] lv__playerstomodify;

    // Automatic Variable Declarations
    const int auto391B7EFA_ae = 1;
    const int auto391B7EFA_ai = 1;
    const int auto5B122A43_ae = 3;
    const int auto5B122A43_ai = 1;
    const int autoD274128F_ae = 49;
    const int autoD274128F_ai = 1;
    const int autoB7F53D77_ae = 5;
    const int autoB7F53D77_ai = 1;
    const int auto0C94AF72_ae = 49;
    const int auto0C94AF72_ai = 1;
    const int autoF85FF534_ae = 1;
    const int autoF85FF534_ai = 1;
    const int autoE6487912_ae = 5;
    const int autoE6487912_ai = 1;
    const int auto07F86153_ae = 49;
    const int auto07F86153_ai = 1;
    const int auto1441E49B_ae = 1;
    const int auto1441E49B_ai = 1;
    const int auto00B0BD6B_ae = 5;
    const int auto00B0BD6B_ai = 1;
    const int autoA4E6ADC5_ae = 49;
    const int autoA4E6ADC5_ai = 1;
    const int autoCDE96088_ae = 1;
    const int autoCDE96088_ai = 1;
    const int auto2EE68CDD_ae = 3;
    const int auto2EE68CDD_ai = 1;
    const int auto261FFFE3_ae = 49;
    const int auto261FFFE3_ai = 1;

    // Variable Initialization
    for (init_i = 0; init_i <= 6; init_i += 1) {
        lv__catalogfieldpathstomodify[init_i] = "";
    }
    lv__enemyid = "";
    lv__fieldpath = "";

    // Implementation
    lv__catalogfieldpathstomodify[0] = "LifeMax";
    lv__catalogfieldpathstomodify[1] = "LifeStart";
    lv__catalogfieldpathstomodify[2] = "ShieldsMax";
    lv__catalogfieldpathstomodify[3] = "ShieldsStart";
    lv__catalogfieldpathstomodify[4] = "LifeArmor";
    lv__catalogfieldpathstomodify[5] = "ShieldArmor";
    lv__playerstomodify[0] = gv_allycompplayer;
    lv__playerstomodify[1] = gv_enemyplayer;
    if ((gv_gameattributedifficulty == ge_gameattributedifficulty_L1Beginner)) {
        lv__i = 0;
        for ( ; ( (auto391B7EFA_ai >= 0 && lv__i <= auto391B7EFA_ae) || (auto391B7EFA_ai < 0 && lv__i >= auto391B7EFA_ae) ) ; lv__i += auto391B7EFA_ai ) {
            lv__p = lv__playerstomodify[lv__i];
            lv__j = 0;
            for ( ; ( (auto5B122A43_ai >= 0 && lv__j <= auto5B122A43_ae) || (auto5B122A43_ai < 0 && lv__j >= auto5B122A43_ae) ) ; lv__j += auto5B122A43_ai ) {
                lv__k = 0;
                for ( ; ( (autoD274128F_ai >= 0 && lv__k <= autoD274128F_ae) || (autoD274128F_ai < 0 && lv__k >= autoD274128F_ae) ) ; lv__k += autoD274128F_ai ) {
                    lv__enemyid = gv_enemyids[lv__k];
                    lv__fieldpath = lv__catalogfieldpathstomodify[lv__j];
                    CatalogFieldValueModify(c_gameCatalogUnit, (lv__enemyid), (lv__fieldpath), lv__p, "0.7", c_upgradeOperationMultiply);
                }
            }
            lv__j = 4;
            for ( ; ( (autoB7F53D77_ai >= 0 && lv__j <= autoB7F53D77_ae) || (autoB7F53D77_ai < 0 && lv__j >= autoB7F53D77_ae) ) ; lv__j += autoB7F53D77_ai ) {
                lv__k = 0;
                for ( ; ( (auto0C94AF72_ai >= 0 && lv__k <= auto0C94AF72_ae) || (auto0C94AF72_ai < 0 && lv__k >= auto0C94AF72_ae) ) ; lv__k += auto0C94AF72_ai ) {
                    lv__enemyid = gv_enemyids[lv__k];
                    lv__fieldpath = lv__catalogfieldpathstomodify[lv__j];
                    CatalogFieldValueModify(c_gameCatalogUnit, (lv__enemyid), (lv__fieldpath), lv__p, "0.5", c_upgradeOperationMultiply);
                }
            }
        }
    }
    else if ((gv_gameattributedifficulty == ge_gameattributedifficulty_L2)) {
        lv__i = 0;
        for ( ; ( (autoF85FF534_ai >= 0 && lv__i <= autoF85FF534_ae) || (autoF85FF534_ai < 0 && lv__i >= autoF85FF534_ae) ) ; lv__i += autoF85FF534_ai ) {
            lv__p = lv__playerstomodify[lv__i];
            lv__j = 4;
            for ( ; ( (autoE6487912_ai >= 0 && lv__j <= autoE6487912_ae) || (autoE6487912_ai < 0 && lv__j >= autoE6487912_ae) ) ; lv__j += autoE6487912_ai ) {
                lv__k = 0;
                for ( ; ( (auto07F86153_ai >= 0 && lv__k <= auto07F86153_ae) || (auto07F86153_ai < 0 && lv__k >= auto07F86153_ae) ) ; lv__k += auto07F86153_ai ) {
                    lv__enemyid = gv_enemyids[lv__k];
                    lv__fieldpath = lv__catalogfieldpathstomodify[lv__j];
                    CatalogFieldValueModify(c_gameCatalogUnit, (lv__enemyid), (lv__fieldpath), lv__p, "0.5", c_upgradeOperationMultiply);
                }
            }
        }
    }
    else if ((gv_gameattributedifficulty == ge_gameattributedifficulty_L3)) {
        lv__i = 0;
        for ( ; ( (auto1441E49B_ai >= 0 && lv__i <= auto1441E49B_ae) || (auto1441E49B_ai < 0 && lv__i >= auto1441E49B_ae) ) ; lv__i += auto1441E49B_ai ) {
            lv__p = lv__playerstomodify[lv__i];
            lv__j = 4;
            for ( ; ( (auto00B0BD6B_ai >= 0 && lv__j <= auto00B0BD6B_ae) || (auto00B0BD6B_ai < 0 && lv__j >= auto00B0BD6B_ae) ) ; lv__j += auto00B0BD6B_ai ) {
                lv__k = 0;
                for ( ; ( (autoA4E6ADC5_ai >= 0 && lv__k <= autoA4E6ADC5_ae) || (autoA4E6ADC5_ai < 0 && lv__k >= autoA4E6ADC5_ae) ) ; lv__k += autoA4E6ADC5_ai ) {
                    lv__enemyid = gv_enemyids[lv__k];
                    lv__fieldpath = lv__catalogfieldpathstomodify[lv__j];
                    CatalogFieldValueModify(c_gameCatalogUnit, (lv__enemyid), (lv__fieldpath), lv__p, "0.75", c_upgradeOperationMultiply);
                }
            }
        }
    }
    else if ((gv_gameattributedifficulty == ge_gameattributedifficulty_L5Hard)) {
        lv__i = 0;
        for ( ; ( (autoCDE96088_ai >= 0 && lv__i <= autoCDE96088_ae) || (autoCDE96088_ai < 0 && lv__i >= autoCDE96088_ae) ) ; lv__i += autoCDE96088_ai ) {
            lv__p = lv__playerstomodify[lv__i];
            lv__j = 0;
            for ( ; ( (auto2EE68CDD_ai >= 0 && lv__j <= auto2EE68CDD_ae) || (auto2EE68CDD_ai < 0 && lv__j >= auto2EE68CDD_ae) ) ; lv__j += auto2EE68CDD_ai ) {
                lv__k = 0;
                for ( ; ( (auto261FFFE3_ai >= 0 && lv__k <= auto261FFFE3_ae) || (auto261FFFE3_ai < 0 && lv__k >= auto261FFFE3_ae) ) ; lv__k += auto261FFFE3_ai ) {
                    lv__enemyid = gv_enemyids[lv__k];
                    lv__fieldpath = lv__catalogfieldpathstomodify[lv__j];
                    CatalogFieldValueModify(c_gameCatalogUnit, (lv__enemyid), (lv__fieldpath), lv__p, "1.1", c_upgradeOperationMultiply);
                }
            }
        }
    }
}

void gf_initenemymodpoints () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemymodpoints[0] = PointFromId(1980337140);
    gv_enemymodpoints[1] = PointFromId(2050116918);
    gv_enemymodpoints[2] = PointFromId(74825652);
    gv_enemymodpoints[3] = PointFromId(793152166);
    gv_enemymodpoints[4] = PointFromId(1763479768);
    gv_enemymodpoints[5] = PointFromId(102755595);
    gv_enemymodpoints[6] = PointFromId(1578482275);
    gv_enemymodpoints[7] = PointFromId(1950869005);
    gv_enemymodpoints[8] = PointFromId(1499815599);
    gv_enemymodpoints[9] = PointFromId(1963387459);
    gv_enemymodpoints[10] = PointFromId(1065999850);
    gv_enemymodpoints[11] = PointFromId(211316770);
    gv_enemymodpoints[12] = PointFromId(1009361086);
    gv_enemymodpoints[13] = PointFromId(1007667371);
    gv_enemymodpoints[14] = PointFromId(708940160);
    gv_enemymodpoints[15] = PointFromId(1854003578);
    gv_enemymodpoints[16] = PointFromId(478318677);
    gv_enemymodpoints[17] = PointFromId(2132272403);
    gv_enemymodpoints[18] = PointFromId(2016825575);
    gv_enemymodpoints[19] = PointFromId(696014296);
    gv_enemymodpoints[20] = PointFromId(1227103801);
    gv_enemymodpoints[21] = PointFromId(1710644402);
    gv_enemymodpoints[22] = PointFromId(1890298303);
    gv_enemymodpoints[23] = PointFromId(440567055);
    gv_enemymodpoints[24] = PointFromId(1482196987);
}

void gf_initenemymods () {
    // Variable Declarations
    int lv__modtype;
    int lv__round;

    // Automatic Variable Declarations
    const int autoAAA51887_ae = 24;
    const int autoAAA51887_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateActorAtPoint("UIScreenPlusHd", PointWithOffset(gv_enemymodpoints[2], -0.6, 0.0));
    libNtve_gf_CreateActorAtPoint("UIScreenNumber6Hd", PointWithOffset(gv_enemymodpoints[2], 0.1, 0.0));
    gv_enemymods[2][0] = ge_modtypes_increaseenemycount;
    gv_enemymods[2][1] = 3;
    libNtve_gf_CreateActorAtPoint("UIScreenPlusHd", PointWithOffset(gv_enemymodpoints[3], -0.6, 0.0));
    libNtve_gf_CreateActorAtPoint("UIScreenNumber1Hd", PointWithOffset(gv_enemymodpoints[3], -0.1, 0.0));
    libNtve_gf_CreateActorAtPoint("UIScreenNumber2Hd", PointWithOffset(gv_enemymodpoints[3], 0.5, 0.0));
    gv_enemymods[3][0] = ge_modtypes_increaseenemycount;
    gv_enemymods[3][1] = 6;
    lv__round = 4;
    for ( ; ( (autoAAA51887_ai >= 0 && lv__round <= autoAAA51887_ae) || (autoAAA51887_ai < 0 && lv__round >= autoAAA51887_ae) ) ; lv__round += autoAAA51887_ai ) {
        lv__modtype = gf_rollmodtypedice();
        if ((lv__modtype != ge_modtypes_none)) {
            gv_enemymods[lv__round][0] = lv__modtype;
            lib1_gf_createunitatpoint(gv_modtypetomodunittype[lv__modtype], gv_enemymodpoints[lv__round], gv_allycompplayer, 0);
        }

    }
}

void gf_initenemypathlocationopposites () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathtop] = ge_clockwiseenemypathlocation_enemypathbot;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathtoprighttop] = ge_clockwiseenemypathlocation_enemypathbotrightbot;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathtoprightright] = ge_clockwiseenemypathlocation_enemypathtopleftleft;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathright] = ge_clockwiseenemypathlocation_enemypathleft;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathbotrightright] = ge_clockwiseenemypathlocation_enemypathbotleftleft;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathbotrightbot] = ge_clockwiseenemypathlocation_enemypathtoprighttop;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathbot] = ge_clockwiseenemypathlocation_enemypathtop;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathbotleftbot] = ge_clockwiseenemypathlocation_enemypathtoplefttop;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathbotleftleft] = ge_clockwiseenemypathlocation_enemypathbotrightright;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathleft] = ge_clockwiseenemypathlocation_enemypathright;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathtopleftleft] = ge_clockwiseenemypathlocation_enemypathtoprightright;
    gv_enemypathlocationopposites[ge_clockwiseenemypathlocation_enemypathtoplefttop] = ge_clockwiseenemypathlocation_enemypathbotleftbot;
}

void gf_initenemyperround25 () {
    // Variable Declarations
    int lv__round;

    // Automatic Variable Declarations
    const int auto22792698_ae = 3;
    const int auto22792698_ai = 1;

    // Variable Initialization

    // Implementation
    gv_enemyperround[0] = "WeaklingEnemyHd";
    gv_enemyperround[4] = "SimpleBossArchonEnemyHd";
    lib1_gf_setrandomindices(3);
    lv__round = 1;
    for ( ; ( (auto22792698_ai >= 0 && lv__round <= auto22792698_ae) || (auto22792698_ai < 0 && lv__round >= auto22792698_ae) ) ; lv__round += auto22792698_ai ) {
        gv_enemyperround[lv__round] = gv_enemygroupsimple[lib1_gv_randomindices[(lv__round - 1)]];
    }
}

void gf_initenemyperroundrest () {
    // Variable Declarations
    int lv__round;
    int lv__numpossibleunits;
    int lv__randomunitindex;

    // Automatic Variable Declarations
    int auto68A6382C_ae;
    const int auto68A6382C_ai = 1;

    // Variable Initialization

    // Implementation
    auto68A6382C_ae = (gv_numrounds - 1);
    lv__round = 5;
    for ( ; ( (auto68A6382C_ai >= 0 && lv__round <= auto68A6382C_ae) || (auto68A6382C_ai < 0 && lv__round >= auto68A6382C_ae) ) ; lv__round += auto68A6382C_ai ) {
        lv__numpossibleunits = gv_possibleenemyunitsperroundnumber[lv__round];
        lv__randomunitindex = RandomInt(0, (lv__numpossibleunits - 1));
        gv_enemyperround[lv__round] = gv_possibleenemyunitsperroundunits[lv__round][lv__randomunitindex];
    }
}

void gf_initenemyrallypointsperlocation () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemyrallypointsperlocation[ge_clockwiselocation_top][0] = PointFromId(2019735321);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_top][1] = PointFromId(132146153);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_topright][0] = PointFromId(6064204);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_topright][1] = PointFromId(331529152);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_right][0] = PointFromId(454562883);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_right][1] = PointFromId(1138646104);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_botright][0] = PointFromId(1755457878);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_botright][1] = PointFromId(1277692723);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_bot][0] = PointFromId(63201720);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_bot][1] = PointFromId(1436792943);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_botleft][0] = PointFromId(1943289383);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_botleft][1] = PointFromId(312025157);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_left][0] = PointFromId(97662259);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_left][1] = PointFromId(1326281752);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_topleft][0] = PointFromId(2104189875);
    gv_enemyrallypointsperlocation[ge_clockwiselocation_topleft][1] = PointFromId(1705605065);
}

void gf_initenemyrallypointspertelespawn () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemyrallypointspertelespawn[0] = PointFromId(2068411702);
    gv_enemyrallypointspertelespawn[1] = PointFromId(1661550969);
    gv_enemyrallypointspertelespawn[2] = PointFromId(282270595);
    gv_enemyrallypointspertelespawn[3] = PointFromId(1415428594);
    gv_enemyrallypointspertelespawn[4] = PointFromId(1399802117);
    gv_enemyrallypointspertelespawn[5] = PointFromId(1965461556);
    gv_enemyrallypointspertelespawn[6] = PointFromId(1035597697);
    gv_enemyrallypointspertelespawn[7] = PointFromId(94086420);
}

void gf_initenemyshowcase () {
    // Variable Declarations
    int lv__round;
    int lv__currentmodtype;

    // Automatic Variable Declarations
    int auto5A968708_ae;
    const int auto5A968708_ai = 1;

    // Variable Initialization

    // Implementation
    libNtve_gf_CreateModelAtPoint("CurrentEnemyIndicatorHd", gv_enemyshowcasepoints[0]);
    gv_currentenemyindicator = libNtve_gf_ActorLastCreated();
    auto5A968708_ae = (gv_numrounds - 1);
    lv__round = 0;
    for ( ; ( (auto5A968708_ai >= 0 && lv__round <= auto5A968708_ae) || (auto5A968708_ai < 0 && lv__round >= auto5A968708_ae) ) ; lv__round += auto5A968708_ai ) {
        lv__currentmodtype = gv_enemymods[lv__round][0];
        gf_createmoddedunitatpoint(gv_enemyperround[lv__round], gv_allycompplayer, gv_enemyshowcasepoints[lv__round], 0, lv__currentmodtype);
    }
}

void gf_initenemyshowcasepoints () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemyshowcasepoints[0] = PointFromId(1159692749);
    gv_enemyshowcasepoints[1] = PointFromId(326660069);
    gv_enemyshowcasepoints[2] = PointFromId(1957282182);
    gv_enemyshowcasepoints[3] = PointFromId(255162384);
    gv_enemyshowcasepoints[4] = PointFromId(2106538829);
    gv_enemyshowcasepoints[5] = PointFromId(1494526224);
    gv_enemyshowcasepoints[6] = PointFromId(1112023811);
    gv_enemyshowcasepoints[7] = PointFromId(376748213);
    gv_enemyshowcasepoints[8] = PointFromId(931327287);
    gv_enemyshowcasepoints[9] = PointFromId(1110478098);
    gv_enemyshowcasepoints[10] = PointFromId(1162214087);
    gv_enemyshowcasepoints[11] = PointFromId(878650329);
    gv_enemyshowcasepoints[12] = PointFromId(910641272);
    gv_enemyshowcasepoints[13] = PointFromId(447192689);
    gv_enemyshowcasepoints[14] = PointFromId(685785975);
    gv_enemyshowcasepoints[15] = PointFromId(1881461128);
    gv_enemyshowcasepoints[16] = PointFromId(992499488);
    gv_enemyshowcasepoints[17] = PointFromId(1437345411);
    gv_enemyshowcasepoints[18] = PointFromId(481871533);
    gv_enemyshowcasepoints[19] = PointFromId(1564379658);
    gv_enemyshowcasepoints[20] = PointFromId(791315511);
    gv_enemyshowcasepoints[21] = PointFromId(954993193);
    gv_enemyshowcasepoints[22] = PointFromId(692006793);
    gv_enemyshowcasepoints[23] = PointFromId(725873656);
    gv_enemyshowcasepoints[24] = PointFromId(627035749);
}

void gf_initenemyspawnpointsperlocation () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_top][0] = PointFromId(1965461556);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_top][1] = PointFromId(1399802117);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_topright][0] = PointFromId(1277692723);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_topright][1] = PointFromId(1705605065);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_right][0] = PointFromId(94086420);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_right][1] = PointFromId(1035597697);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_botright][0] = PointFromId(1943289383);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_botright][1] = PointFromId(6064204);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_bot][0] = PointFromId(2068411702);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_bot][1] = PointFromId(1661550969);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_botleft][0] = PointFromId(1755457878);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_botleft][1] = PointFromId(2104189875);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_left][0] = PointFromId(282270595);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_left][1] = PointFromId(1415428594);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_topleft][0] = PointFromId(312025157);
    gv_enemyspawnpointsperlocation[ge_clockwiselocation_topleft][1] = PointFromId(331529152);
}

void gf_initenemyteleregions () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemyteleregions[0] = RegionFromId(6);
    gv_enemyteleregions[1] = RegionFromId(5);
    gv_enemyteleregions[2] = RegionFromId(4);
    gv_enemyteleregions[3] = RegionFromId(3);
    gv_enemyteleregions[4] = RegionFromId(8);
    gv_enemyteleregions[5] = RegionFromId(7);
    gv_enemyteleregions[6] = RegionFromId(2);
    gv_enemyteleregions[7] = RegionFromId(1);
}

void gf_initenemytelespawns () {
    // Automatic Variable Declarations
    // Implementation
    gv_enemytelespawns[0] = PointFromId(2131765764);
    gv_enemytelespawns[1] = PointFromId(1928273146);
    gv_enemytelespawns[2] = PointFromId(1372148664);
    gv_enemytelespawns[3] = PointFromId(1046620012);
    gv_enemytelespawns[4] = PointFromId(1975593203);
    gv_enemytelespawns[5] = PointFromId(1253100643);
    gv_enemytelespawns[6] = PointFromId(1855421778);
    gv_enemytelespawns[7] = PointFromId(629813046);
}

void gf_initextralifepoints () {
    // Automatic Variable Declarations
    // Implementation
    gv_extralifepoints[0] = PointFromId(1686196947);
    gv_extralifepoints[1] = PointFromId(1274440154);
    gv_extralifepoints[2] = PointFromId(402597549);
    gv_extralifepoints[3] = PointFromId(160563527);
    gv_extralifepoints[4] = PointFromId(1341808720);
    gv_extralifepoints[5] = PointFromId(703327367);
    gv_extralifepoints[6] = PointFromId(901900746);
    gv_extralifepoints[7] = PointFromId(473520878);
    gv_extralifepoints[8] = PointFromId(1716956187);
    gv_extralifepoints[9] = PointFromId(936536584);
    gv_extralifepoints[10] = PointFromId(1400000593);
    gv_extralifepoints[11] = PointFromId(1047972182);
    gv_extralifepoints[12] = PointFromId(465736553);
    gv_extralifepoints[13] = PointFromId(802838184);
    gv_extralifepoints[14] = PointFromId(1432147502);
    gv_extralifepoints[15] = PointFromId(1440360483);
    gv_extralifepoints[16] = PointFromId(940904467);
    gv_extralifepoints[17] = PointFromId(1823593300);
    gv_extralifepoints[18] = PointFromId(1861549316);
    gv_extralifepoints[19] = PointFromId(1712027486);
    gv_extralifepoints[20] = PointFromId(714222838);
    gv_extralifepoints[21] = PointFromId(75980186);
    gv_extralifepoints[22] = PointFromId(84821275);
    gv_extralifepoints[23] = PointFromId(1358293436);
    gv_extralifepoints[24] = PointFromId(723559936);
}

void gf_initextralives () {
    // Variable Declarations
    int lv__round;

    // Automatic Variable Declarations
    const int autoAD84B445_ae = 24;
    const int autoAD84B445_ai = 1;

    // Variable Initialization

    // Implementation
    lv__round = 0;
    for ( ; ( (autoAD84B445_ai >= 0 && lv__round <= autoAD84B445_ae) || (autoAD84B445_ai < 0 && lv__round >= autoAD84B445_ae) ) ; lv__round += autoAD84B445_ai ) {
        lib1_gf_createunitatpoint("ExtraLifeHd", gv_extralifepoints[lv__round], gv_allycompplayer, 0);
    }
}

void gf_initgameattributevars () {
    // Automatic Variable Declarations
    string auto63B48E0E_val;
    string auto5C84F2C5_val;
    string auto2DB5EFBA_val;

    // Implementation
    if ((gv_testoverridegameattributedifficulty > -1)) {
        gv_gameattributedifficulty = gv_testoverridegameattributedifficulty;
    }
    else {
        auto63B48E0E_val = GameAttributeGameValue("2");
        if (auto63B48E0E_val == "0002") {
            gv_gameattributedifficulty = ge_gameattributedifficulty_L1Beginner;
        }
        else if (auto63B48E0E_val == "0004") {
            gv_gameattributedifficulty = ge_gameattributedifficulty_L2;
        }
        else if (auto63B48E0E_val == "0005") {
            gv_gameattributedifficulty = ge_gameattributedifficulty_L3;
        }
        else if (auto63B48E0E_val == "0001") {
            gv_gameattributedifficulty = ge_gameattributedifficulty_L4Standard;
        }
        else if (auto63B48E0E_val == "0003") {
            gv_gameattributedifficulty = ge_gameattributedifficulty_L5Hard;
        }
        else {
        }
    }
    auto5C84F2C5_val = GameAttributeGameValue("1");
    if (auto5C84F2C5_val == "0001") {
        gv_gameattributeroundtimer = ge_gameattributeroundtimer_none;
    }
    else if (auto5C84F2C5_val == "0002") {
        gv_gameattributeroundtimer = ge_gameattributeroundtimer_default;
    }
    else if (auto5C84F2C5_val == "0003") {
        gv_gameattributeroundtimer = ge_gameattributeroundtimer_quick;
    }
    else if (auto5C84F2C5_val == "0004") {
        gv_gameattributeroundtimer = ge_gameattributeroundtimer_nonstop;
    }
    else {
    }
    auto2DB5EFBA_val = GameAttributeGameValue("3");
    if (auto2DB5EFBA_val == "0002") {
        gv_gameattributeaddmodstoallrounds = ge_gameattributeaddmodstoallrounds_yes;
    }
    else if (auto2DB5EFBA_val == "0001") {
        gv_gameattributeaddmodstoallrounds = ge_gameattributeaddmodstoallrounds_no;
    }
    else {
    }
}

void gf_initlocationandsublocationtospawnclockwiselocation () {
    // Automatic Variable Declarations
    // Implementation
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_top][0] = ge_clockwiseenemypathlocation_enemypathtop;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_top][1] = ge_clockwiseenemypathlocation_enemypathtop;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_topright][0] = ge_clockwiseenemypathlocation_enemypathtoprighttop;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_topright][1] = ge_clockwiseenemypathlocation_enemypathtoprightright;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_right][0] = ge_clockwiseenemypathlocation_enemypathright;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_right][1] = ge_clockwiseenemypathlocation_enemypathright;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_botright][0] = ge_clockwiseenemypathlocation_enemypathbotrightright;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_botright][1] = ge_clockwiseenemypathlocation_enemypathbotrightbot;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_bot][0] = ge_clockwiseenemypathlocation_enemypathbot;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_bot][1] = ge_clockwiseenemypathlocation_enemypathbot;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_botleft][0] = ge_clockwiseenemypathlocation_enemypathbotleftleft;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_botleft][1] = ge_clockwiseenemypathlocation_enemypathbotleftbot;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_left][0] = ge_clockwiseenemypathlocation_enemypathleft;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_left][1] = ge_clockwiseenemypathlocation_enemypathleft;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_topleft][0] = ge_clockwiseenemypathlocation_enemypathtoplefttop;
    gv_locationandsublocationtoenemypathlocation[ge_clockwiselocation_topleft][1] = ge_clockwiseenemypathlocation_enemypathtopleftleft;
}

void gf_initlocationchoosers () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto656C407E_g;

    // Variable Initialization

    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/C3978B7F"));
    auto656C407E_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto656C407E_g, lv__p);
        if (lv__p < 0) { break; }
        lib1_gf_createunitatpoint("ChooserHd", PointFromId(373153880), lv__p, 0);
    }
}

void gf_initmisc () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
}

void gf_initmodtypedice () {
    // Automatic Variable Declarations
    // Implementation
    gv_modtypedice[0] = ge_modtypes_increasespeed;
    gv_modtypedice[1] = ge_modtypes_increasespeed;
    gv_modtypedice[2] = ge_modtypes_increasespeed;
    gv_modtypedice[3] = ge_modtypes_addarmor;
    gv_modtypedice[4] = ge_modtypes_addarmor;
    gv_modtypedice[5] = ge_modtypes_addarmor;
    gv_modtypedice[6] = ge_modtypes_addshields;
    gv_modtypedice[7] = ge_modtypes_addshields;
    gv_modtypedice[8] = ge_modtypes_addshields;
    gv_modtypedice[9] = ge_modtypes_perfectspecimen;
    if ((gv_gameattributeaddmodstoallrounds == ge_gameattributeaddmodstoallrounds_no)) {
        gv_modtypedice[10] = ge_modtypes_none;
        gv_modtypedice[11] = ge_modtypes_none;
        gv_modtypedice[12] = ge_modtypes_none;
        gv_modtypedice[13] = ge_modtypes_none;
        gv_modtypedice[14] = ge_modtypes_none;
    }
    else {
        gv_modtypedicelastindex = 9;
    }
}

void gf_initmodtypetobuff () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_and2((gv_gameattributedifficulty >= ge_gameattributedifficulty_L1Beginner), (gv_gameattributedifficulty <= ge_gameattributedifficulty_L4Standard))) {
        gv_modtypetobuff[ge_modtypes_addshields] = "AddedShieldsStandardModHd";
        gv_modtypetobuff[ge_modtypes_addarmor] = "AddedArmorStandardModHd";
        gv_modtypetobuff[ge_modtypes_increasespeed] = "IncreaseSpeedStandardModHd";
    }
    else {
        gv_modtypetobuff[ge_modtypes_addshields] = "AddedShieldsHardModHd";
        gv_modtypetobuff[ge_modtypes_addarmor] = "AddedArmorHardModHd";
        gv_modtypetobuff[ge_modtypes_increasespeed] = "IncreaseSpeedStandardHardModHd";
    }
}

void gf_initmodtypetomodunit () {
    // Automatic Variable Declarations
    // Implementation
    gv_modtypetomodunittype[ge_modtypes_addshields] = "UnitHasShieldsModHd";
    gv_modtypetomodunittype[ge_modtypes_increasespeed] = "IncreasedSpeedModHd";
    gv_modtypetomodunittype[ge_modtypes_addarmor] = "AddedArmorModHd";
    gv_modtypetomodunittype[ge_modtypes_perfectspecimen] = "PerfectSpecimenModHd";
}

void gf_initpathtesters () {
    // Variable Declarations
    int lv__pathtestsegmentidx;

    // Automatic Variable Declarations
    const int autoC1A79ACB_ae = 7;
    const int autoC1A79ACB_ai = 1;

    // Variable Initialization

    // Implementation
    gv_pathtestsegments[ge_pathtestsegments_verticalleft].lv_start = PointFromId(312025157);
    gv_pathtestsegments[ge_pathtestsegments_verticalleft].lv_destination = PointFromId(2104189875);
    gv_pathtestsegments[ge_pathtestsegments_verticalleft].lv_oppositesideofmap = PointFromId(1943289383);
    gv_pathtestsegments[ge_pathtestsegments_verticaltop].lv_start = PointFromId(1965461556);
    gv_pathtestsegments[ge_pathtestsegments_verticaltop].lv_destination = PointFromId(2019735321);
    gv_pathtestsegments[ge_pathtestsegments_verticaltop].lv_oppositesideofmap = PointFromId(2068411702);
    gv_pathtestsegments[ge_pathtestsegments_verticalbot].lv_start = PointFromId(2068411702);
    gv_pathtestsegments[ge_pathtestsegments_verticalbot].lv_destination = PointFromId(63201720);
    gv_pathtestsegments[ge_pathtestsegments_verticalbot].lv_oppositesideofmap = PointFromId(1965461556);
    gv_pathtestsegments[ge_pathtestsegments_verticalright].lv_start = PointFromId(1277692723);
    gv_pathtestsegments[ge_pathtestsegments_verticalright].lv_destination = PointFromId(6064204);
    gv_pathtestsegments[ge_pathtestsegments_verticalright].lv_oppositesideofmap = PointFromId(1755457878);
    gv_pathtestsegments[ge_pathtestsegments_horizontaltop].lv_start = PointFromId(331529152);
    gv_pathtestsegments[ge_pathtestsegments_horizontaltop].lv_destination = PointFromId(1705605065);
    gv_pathtestsegments[ge_pathtestsegments_horizontaltop].lv_oppositesideofmap = PointFromId(6064204);
    gv_pathtestsegments[ge_pathtestsegments_horizontalleft].lv_start = PointFromId(282270595);
    gv_pathtestsegments[ge_pathtestsegments_horizontalleft].lv_destination = PointFromId(97662259);
    gv_pathtestsegments[ge_pathtestsegments_horizontalleft].lv_oppositesideofmap = PointFromId(94086420);
    gv_pathtestsegments[ge_pathtestsegments_horizontalright].lv_start = PointFromId(94086420);
    gv_pathtestsegments[ge_pathtestsegments_horizontalright].lv_destination = PointFromId(454562883);
    gv_pathtestsegments[ge_pathtestsegments_horizontalright].lv_oppositesideofmap = PointFromId(282270595);
    gv_pathtestsegments[ge_pathtestsegments_horizontalbot].lv_start = PointFromId(1755457878);
    gv_pathtestsegments[ge_pathtestsegments_horizontalbot].lv_destination = PointFromId(1943289383);
    gv_pathtestsegments[ge_pathtestsegments_horizontalbot].lv_oppositesideofmap = PointFromId(1277692723);
    lv__pathtestsegmentidx = 0;
    for ( ; ( (autoC1A79ACB_ai >= 0 && lv__pathtestsegmentidx <= autoC1A79ACB_ae) || (autoC1A79ACB_ai < 0 && lv__pathtestsegmentidx >= autoC1A79ACB_ae) ) ; lv__pathtestsegmentidx += autoC1A79ACB_ai ) {
        lib1_gf_createunitatpoint("PathTesterRadius05Hd", gv_pathtestsegments[lv__pathtestsegmentidx].lv_start, gv_allycompplayer, 0);
        gv_pathtestsegments[lv__pathtestsegmentidx].lv_unit = UnitLastCreated();
    }
}

void gf_initplayergroups () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    const int auto9267B76D_ae = 8;
    const int auto9267B76D_ai = 1;

    // Variable Initialization

    // Implementation
    PlayerGroupAdd(gv_activedefendersplusallycomp, 9);
    PlayerGroupAdd(gv_enemy, 10);
    lv__p = 1;
    for ( ; ( (auto9267B76D_ai >= 0 && lv__p <= auto9267B76D_ae) || (auto9267B76D_ai < 0 && lv__p >= auto9267B76D_ae) ) ; lv__p += auto9267B76D_ai ) {
        if (lib1_gf_istrue(PlayerGroupHasPlayer(PlayerGroupActive(), lv__p))) {
            PlayerGroupAdd(gv_activedefenders, lv__p);
        }

    }
    if (lib1_gf_istrue(gv_testingmultiplayerlocally)) {
        PlayerGroupAdd(gv_activedefenders, 2);
        PlayerSetRace(2, "Terr");
        PlayerGroupAdd(gv_activedefenders, 3);
        PlayerSetRace(3, "Prot");
        PlayerGroupAdd(gv_activedefenders, 4);
        PlayerSetRace(4, "Zerg");
        TriggerDebugOutput(1, StringExternal("Param/Value/E444493B"), true);
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_activedefenders, gv_activedefendersplusallycomp);
}

void gf_initpossibleenemyunitsperround () {
    // Variable Declarations
    int lv__round;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__round = 5;

    // Implementation
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightDroneEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredStalkerEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightSCVEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredCutieEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightProbeEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredMarauderEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightBroodlingEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredZealotEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "BossDehakaEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "BossAlarakEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightPrisonerEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredQueenEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightAdeptEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredHellbatEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 3;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightReaperEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredDragoonEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][2] = "BiologicalHydraliskEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 3;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightInfestedTerranEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredQuillyEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][2] = "MechanicalGoliathEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "BossEradicatorEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "BossHybridDominatorEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "BiologicalRavagerEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "MechanicalVikingAssaultModeEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightGhostEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredCycloneEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "BiologicalRavasaurEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "MechanicalShikotoCoupeEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 3;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightLocustEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredImmortalEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][2] = "BiologicalUrsadonEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "BossKerriganEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "BossGiantRorySwannEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "BiologicalKerriganEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "MechanicalSiegeTankTankModeEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightHighTemplarEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredPygaliskEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "BiologicalUltraliskEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "MechanicalWarHoundEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 3;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "LightWarPigEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "ArmoredHercEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][2] = "MechanicalMilitarizedTransportEnemyHd";
    lv__round = lv__round + 1;
    gv_possibleenemyunitsperroundnumber[lv__round] = 2;
    gv_possibleenemyunitsperroundunits[lv__round][0] = "BossYagdraEnemyHd";
    gv_possibleenemyunitsperroundunits[lv__round][1] = "BossStoneZealotEnemyHd";
}

void gf_initresources () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto0757C7E9_g;

    // Variable Initialization

    // Implementation
    auto0757C7E9_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto0757C7E9_g, lv__p);
        if (lv__p < 0) { break; }
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSetTo, 30);
    }
}

void gf_initroundtimer () {
    // Automatic Variable Declarations
    int autoDB7F612B_val;

    // Implementation
    autoDB7F612B_val = gv_gameattributeroundtimer;
    if (autoDB7F612B_val == ge_gameattributeroundtimer_quick) {
        gv_secondsbeforefirstround = 60;
        gv_secondsbetweenrounds = 20;
    }
    else if (autoDB7F612B_val == ge_gameattributeroundtimer_nonstop) {
        gv_secondsbeforefirstround = 40;
        gv_roundtimerisnonstop = true;
    }
    else if (autoDB7F612B_val == ge_gameattributeroundtimer_none) {
        gv_roundtimerexists = false;
    }
    else {
    }
}

void gf_initrounddialog () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(gv_roundtimerexists)) {
        DialogCreate(600, 117, c_anchorTop, 0, 0, true);
        gv_rounddialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_rounddialog, 300, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/85DFF2CE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_rounddialogitemlabel = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_rounddialog, 50, 50, c_anchorTopRight, 200, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_rounddialogitemtimervalue = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 100, 50, c_anchorTopRight, 50, 36, StringToText(""), StringExternal("Param/Value/E58B56EB"), "");
        gv_rounddialogitemskip = DialogControlLastCreated();
    }
    else {
        DialogCreate(660, 117, c_anchorTop, 0, 0, true);
        gv_rounddialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemLabel(gv_rounddialog, 450, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/6B70F853"), ColorWithAlpha(0,0,0,0), false, 2.0);
        gv_rounddialogitemlabel = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 110, 50, c_anchorTopRight, 50, 36, StringToText(""), StringExternal("Param/Value/ED031DF0"), "");
        gv_rounddialogitemskip = DialogControlLastCreated();
    }
    DialogSetVisible(gv_rounddialog, PlayerGroupAll(), false);
}

void gf_initspawnbehaviors () {
    // Automatic Variable Declarations
    // Implementation
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathtop] = "SpawnTopHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathtoprighttop] = "SpawnTopRightTopHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathtoprightright] = "SpawnTopRightRightHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathright] = "SpawnRightHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathbotrightright] = "SpawnBotRightRightHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathbotrightbot] = "SpawnBotRightBotHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathbot] = "SpawnBotHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathbotleftleft] = "SpawnBotLeftLeftHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathbotleftbot] = "SpawnBotLeftBotHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathleft] = "SpawnLeftHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathtoplefttop] = "SpawnTopLefToptHd";
    gv_spawnbehaviors[ge_clockwiseenemypathlocation_enemypathtopleftleft] = "SpawnTopLefLeftHd";
}

void gf_initspawnpointperplayer () {
    // Automatic Variable Declarations
    // Implementation
    gv_spawnpointperplayer[1] = PointFromId(1163241296);
    gv_spawnpointperplayer[2] = PointFromId(1467090862);
    gv_spawnpointperplayer[3] = PointFromId(1821003453);
    gv_spawnpointperplayer[4] = PointFromId(1068911899);
    gv_spawnpointperplayer[5] = PointFromId(1518508160);
    gv_spawnpointperplayer[6] = PointFromId(162877926);
    gv_spawnpointperplayer[7] = PointFromId(686929610);
    gv_spawnpointperplayer[8] = PointFromId(227691283);
}

void gf_inittelelocationtospawnclockwiselocation () {
    // Automatic Variable Declarations
    // Implementation
    gv_telelocationtospawnclockwiselocation[0] = ge_clockwiseenemypathlocation_enemypathtop;
    gv_telelocationtospawnclockwiselocation[1] = ge_clockwiseenemypathlocation_enemypathtop;
    gv_telelocationtospawnclockwiselocation[2] = ge_clockwiseenemypathlocation_enemypathright;
    gv_telelocationtospawnclockwiselocation[3] = ge_clockwiseenemypathlocation_enemypathright;
    gv_telelocationtospawnclockwiselocation[4] = ge_clockwiseenemypathlocation_enemypathbot;
    gv_telelocationtospawnclockwiselocation[5] = ge_clockwiseenemypathlocation_enemypathbot;
    gv_telelocationtospawnclockwiselocation[6] = ge_clockwiseenemypathlocation_enemypathleft;
    gv_telelocationtospawnclockwiselocation[7] = ge_clockwiseenemypathlocation_enemypathleft;
}

void gf_inittelelocationtoenemyspawnpathsegments () {
    // Automatic Variable Declarations
    // Implementation
    gv_telelocationtoenemyspawnpathsegments[0] = ge_enemyspawnpathsegments_spawntopsegment2;
    gv_telelocationtoenemyspawnpathsegments[1] = ge_enemyspawnpathsegments_spawntopsegment2;
    gv_telelocationtoenemyspawnpathsegments[2] = ge_enemyspawnpathsegments_spawnrightsegment2;
    gv_telelocationtoenemyspawnpathsegments[3] = ge_enemyspawnpathsegments_spawnrightsegment2;
    gv_telelocationtoenemyspawnpathsegments[4] = ge_enemyspawnpathsegments_spawnbotsegment2;
    gv_telelocationtoenemyspawnpathsegments[5] = ge_enemyspawnpathsegments_spawnbotsegment2;
    gv_telelocationtoenemyspawnpathsegments[6] = ge_enemyspawnpathsegments_spawnleftsegment2;
    gv_telelocationtoenemyspawnpathsegments[7] = ge_enemyspawnpathsegments_spawnleftsegment2;
}

void gf_initvotetokickplayerdialogs () {
    // Variable Declarations
    int lv__kickplayer;
    int lv__p;
    text lv__kickplayername;
    int lv__i;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((PlayerGroupCount(gv_activedefenders) > 2)) {
        DialogCreate(400, 117, c_anchorTopRight, 20, 30, true);
        gv_startvotetokickplayerdialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 400, 50, c_anchorCenter, 0, 0, StringToText(""), StringExternal("Param/Value/01C984EA"), "");
        gv_startvotetokickplayerdibutton = DialogControlLastCreated();
        DialogSetImageVisible(DialogLastCreated(), false);
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), true);
        gf_setkickvoteplayerlist();
        DialogCreate(600, 140, c_anchorTopRight, 20, 50, true);
        gv_kickplayervoteinprogressdialog = DialogLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogCreate(550, 160, c_anchorTopRight, 20, 50, true);
        gv_kickplayervotedialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomLeft, 32, 25, StringToText(""), StringExternal("Param/Value/503B0A62"), "");
        gv_kickplayervotediyes = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottom, 0, 25, StringToText(""), StringExternal("Param/Value/F7CAD5E6"), "");
        gv_kickplayervotedimeh = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottomRight, 32, 25, StringToText(""), StringExternal("Param/Value/4B1CE14A"), "");
        gv_kickplayervotedino = DialogControlLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
        DialogCreate(550, 160, c_anchorTopRight, 20, 50, true);
        gv_kickplayervoteresultsdialog = DialogLastCreated();
        libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 150, 50, c_anchorBottom, 0, 30, StringToText(""), StringExternal("Param/Value/3C656979"), "");
        gv_kickplayervoteresultsdiclose = DialogControlLastCreated();
        DialogSetVisible(DialogLastCreated(), PlayerGroupAll(), false);
    }

}

void gf_initspawnpoint (int lp_p, point lp_defendpoint) {
    // Variable Declarations
    point lv__initialspawnpoint;
    point lv__playerspawnpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__initialspawnpoint = PointWithOffset(lp_defendpoint, 2.0, 0.0);
    lv__playerspawnpoint = gv_spawnpointperplayer[lp_p];
    PointSet(lv__playerspawnpoint, lv__initialspawnpoint);
    lib1_gf_createunitatpoint("SpawnFlagHd", lv__playerspawnpoint, lp_p, 0);
}

void gf_choosespawnlocation (int lp_defenderlocation, int lp_p, unit lp_chooser) {
    // Variable Declarations
    point lv__defendpoint;
    int lv__i;
    int lv__pathtestsegmentidx;

    // Automatic Variable Declarations
    const int auto146512B9_ae = 1;
    const int auto146512B9_ai = 1;

    // Variable Initialization

    // Implementation
    lv__defendpoint = gv_defendpointperlocation[lp_defenderlocation];
    gv_playertodefenderlocation[lp_p] = lp_defenderlocation;
    gv_locationtoplayer[lp_defenderlocation] = lp_p;
    gv_activedefenderlocations[lp_defenderlocation] = true;
    UIClearMessages(PlayerGroupSingle(lp_p), c_messageAreaAll);
    UnitRemove(gv_defendlocationbeaconperlocation[lp_defenderlocation]);
    UnitRemove(lp_chooser);
    gf_initunitarea(lp_defenderlocation, lp_p);
    gf_clearspawnlocationwhenempty();
    gf_initspawnpoint(lp_p, lv__defendpoint);
    lv__i = 0;
    for ( ; ( (auto146512B9_ai >= 0 && lv__i <= auto146512B9_ae) || (auto146512B9_ai < 0 && lv__i >= auto146512B9_ae) ) ; lv__i += auto146512B9_ai ) {
        lv__pathtestsegmentidx = gv_defendlocationtopathtestsegments[lp_defenderlocation][lv__i];
        gv_pathtestsegments[lv__pathtestsegmentidx].lv_isactive = true;
    }
    if (lib1_gf_istrue(gv_playerbankvars[lp_p].lv_hasplayed)) {
        lib1_gf_pancameratopointforplayer(lp_p, lv__defendpoint);
        gf_createworkeratlocation(lv__defendpoint, lp_p);
        gf_startenemyghostspawnatlocation(lp_defenderlocation);
    }
    else {
        lib1_gf_pancameratopointforplayer(lp_p, gv_defendlocationtochooserspawnpoint[lp_defenderlocation]);
        lib1_gf_messageuser(StringExternal("Param/Value/D6EDA166"), lp_p);
        Wait(15.0, c_timeReal);
        if (lib1_gf_playerisingroup(lp_p, gv_activedefenders)) {
            lib1_gf_pancameratopointforplayer(lp_p, lv__defendpoint);
            gf_createworkeratlocation(lv__defendpoint, lp_p);
            lib1_gf_messageuser(StringExternal("Param/Value/D022AFAA"), lp_p);
            gf_startenemyghostspawnatlocation(lp_defenderlocation);
        }

    }
}

void gf_clearspawnlocationwhenempty () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_fewerthanNunitsoftypeinregionforplayer(1, "ChooserHd", RegionFromId(21), lib1_gv_anyplayer)) {
        UnitRemove(UnitFromId(220038668));
        UnitRemove(UnitFromId(469124253));
        UnitRemove(UnitFromId(376238765));
        UnitRemove(UnitFromId(302000048));
        UnitRemove(UnitFromId(1976925429));
        UnitRemove(UnitFromId(209261321));
        UnitRemove(UnitFromId(1243337835));
        UnitRemove(UnitFromId(169646577));
        gf_startroundtimer(gv_secondsbeforefirstround);
        gv_allplayershavechosenlocation = true;
    }

}

void gf_createworkeratlocation (point lp_spawnpoint, int lp_p) {
    // Automatic Variable Declarations
    string auto38B9D4FE_val;

    // Implementation
    auto38B9D4FE_val = PlayerRace(lp_p);
    if (auto38B9D4FE_val == "Zerg") {
        lib1_gf_createunitatpoint("DroneHd", lp_spawnpoint, lp_p, 0);
    }
    else if (auto38B9D4FE_val == "Terr") {
        lib1_gf_createunitatpoint("SCVHd", lp_spawnpoint, lp_p, 0);
    }
    else if (auto38B9D4FE_val == "Prot") {
        lib1_gf_createunitatpoint("ProbeHd", lp_spawnpoint, lp_p, 0);
    }
    else {
    }
    UnitControlGroupAddUnit(lp_p, 1, UnitLastCreated());
}

void gf_initunitsforlocation (int lp_defenderlocation, int lp_player) {
    // Variable Declarations
    int lv__race;
    int lv__unitlocation;

    // Automatic Variable Declarations
    const int auto2DC0790A_ae = 7;
    const int auto2DC0790A_ai = 1;
    int auto8234B7E9_val;

    // Variable Initialization

    // Implementation
    lv__race = lib1_gf_getraceintegerfromplayer(lp_player);
    lv__unitlocation = 0;
    for ( ; ( (auto2DC0790A_ai >= 0 && lv__unitlocation <= auto2DC0790A_ae) || (auto2DC0790A_ai < 0 && lv__unitlocation >= auto2DC0790A_ae) ) ; lv__unitlocation += auto2DC0790A_ai ) {
        auto8234B7E9_val = lv__unitlocation;
        if (auto8234B7E9_val == ge_clockwiselocation_botright) {
            gf_initunitbotright(lp_defenderlocation, lv__race);
        }
        else if (auto8234B7E9_val == ge_clockwiselocation_bot) {
            gf_initunitbot(lp_defenderlocation, lv__race);
        }
        else if (auto8234B7E9_val == ge_clockwiselocation_botleft) {
            gf_initunitbotleft(lp_defenderlocation, lv__race);
        }
        else if (auto8234B7E9_val == ge_clockwiselocation_left) {
            gf_initunitleft(lp_defenderlocation, lp_player, lv__race);
        }
        else {
            gf_initunit(lp_defenderlocation, lv__unitlocation, lv__race);
        }
    }
}

void gf_initunit (int lp_defenderlocation, int lp_unitlocation, int lp_race) {
    // Variable Declarations
    point lv__unitpoint;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__unitpoint = gv_unitpoints[lp_defenderlocation][lp_unitlocation];
    gf_createplayerunitatpoint(lp_unitlocation, lp_race, gv_allycompplayer, lv__unitpoint, lib1_gv_nogamelinkunittype, 0);
}

void gf_initunitbotright (int lp_defenderlocation, int lp_race) {
    // Variable Declarations
    int lv__location;
    point lv__point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_botright;
    lv__point = gv_unitpoints[lp_defenderlocation][lv__location];

    // Implementation
    if ((lp_race == lib1_ge_race_terran)) {
        gf_createplayerunitatpoint(lv__location, lp_race, gv_allycompplayer, PointWithOffset(lv__point, 1.0, 1.0), "SiegeTankSiegedHd", 0);
        gf_createplayerunitatpoint(lv__location, lp_race, gv_allycompplayer, PointWithOffset(lv__point, -1.0, -1.0), "SiegeTankHd", 0);
    }
    else {
        gf_initunit(lp_defenderlocation, lv__location, lp_race);
    }
}

void gf_initunitbotleft (int lp_defenderlocation, int lp_race) {
    // Variable Declarations
    int lv__location;
    point lv__point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_botleft;

    // Implementation
    lv__point = gv_unitpoints[lp_defenderlocation][lv__location];
    if ((lp_race == lib1_ge_race_terran)) {
        gf_createplayerunitatpoint(lv__location, lp_race, gv_allycompplayer, lv__point, "LiberatorAGHd", 0);
    }
    else {
        gf_initunit(lp_defenderlocation, lv__location, lp_race);
    }
}

void gf_initunitbot (int lp_defenderlocation, int lp_race) {
    // Variable Declarations
    int lv__location;
    string lv__unit;
    point lv__point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_bot;

    // Implementation
    lv__point = gv_unitpoints[lp_defenderlocation][lv__location];
    if ((lp_race == lib1_ge_race_zerg)) {
        gf_createplayerunitatpoint(lv__location, lp_race, gv_allycompplayer, lv__point, "InfestedSiegeTankHd", 0);
    }
    else {
        gf_initunit(lp_defenderlocation, lv__location, lp_race);
    }
}

void gf_initunitleft (int lp_defenderlocation, int lp_p, int lp_race) {
    // Variable Declarations
    int lv__location;
    string lv__unit;
    point lv__point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_left;

    // Implementation
    lv__unit = gv_unitperlocationandrace[lv__location][lp_race];
    lv__point = gv_unitpoints[lp_defenderlocation][lv__location];
    lib1_gf_createunitatpoint("2MineralsHd", PointWithOffset(lv__point, 0.0, -0.5), 0, c_unitCreateIgnorePlacement);
    lib1_gf_createunitatpoint(lv__unit, PointWithOffset(lv__point, 0.0, 2.0), lp_p, c_unitCreateIgnorePlacement);
    UnitControlGroupAddUnit(lp_p, 2, UnitLastCreated());
}

void gf_initunitarea (int lp_defenderlocation, int lp_p) {
    // Variable Declarations
    point lv__chooserspawnpoint;
    int lv__beaconlocation;

    // Automatic Variable Declarations
    const int auto307CE687_ae = 7;
    const int auto307CE687_ai = 1;

    // Variable Initialization
    lv__chooserspawnpoint = gv_defendlocationtochooserspawnpoint[lp_defenderlocation];

    // Implementation
    gf_initunitsforlocation(lp_defenderlocation, lp_p);
    lib1_gf_createunitatpoint("InvisibleWaypointChooserHd", lv__chooserspawnpoint, lp_p, 0);
    gv_invisiblewaypointchooserperplayer[lp_p] = UnitLastCreated();
    lib1_gf_createNunitsatpoint(5, "ChooserHd", lv__chooserspawnpoint, lp_p);
    lv__beaconlocation = 0;
    for ( ; ( (auto307CE687_ai >= 0 && lv__beaconlocation <= auto307CE687_ae) || (auto307CE687_ai < 0 && lv__beaconlocation >= auto307CE687_ae) ) ; lv__beaconlocation += auto307CE687_ai ) {
        lib1_gf_createunitatpoint(gv_unitbeaconperlocation[lv__beaconlocation], gv_unitbeaconpoints[lp_defenderlocation][lv__beaconlocation], lp_p, 0);
    }
}

bool gf_allactivepathsareclear () {
    // Variable Declarations
    int lv__pathtestsegmentidx;
    int lv__distancetooppositesideofmap;
    unit lv__pathtestunit;
    point lv__destination;

    // Automatic Variable Declarations
    const int auto38FEEDC0_ae = 7;
    const int auto38FEEDC0_ai = 1;

    // Variable Initialization

    // Implementation
    lv__pathtestsegmentidx = 0;
    for ( ; ( (auto38FEEDC0_ai >= 0 && lv__pathtestsegmentidx <= auto38FEEDC0_ae) || (auto38FEEDC0_ai < 0 && lv__pathtestsegmentidx >= auto38FEEDC0_ae) ) ; lv__pathtestsegmentidx += auto38FEEDC0_ai ) {
        if (lib1_gf_istrue(gv_pathtestsegments[lv__pathtestsegmentidx].lv_isactive)) {
            lv__pathtestunit = gv_pathtestsegments[lv__pathtestsegmentidx].lv_unit;
            lv__destination = gv_pathtestsegments[lv__pathtestsegmentidx].lv_destination;
            lv__distancetooppositesideofmap = AIPathingCostUnit(lv__pathtestunit, gv_pathtestsegments[lv__pathtestsegmentidx].lv_oppositesideofmap, c_includeAllBuildings);
            if (lib1_gf_isfalse(UnitPathableToPoint(lv__pathtestunit, lv__destination, 0.0, lv__distancetooppositesideofmap))) {
                return false;
            }

        }

    }
    return true;
}

bool gf_buildingiswall (unit lp_building) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_or3(lib1_gf_unitistype(lp_building, "WallProtossHd"), lib1_gf_unitistype(lp_building, "WallTerranHd"), lib1_gf_unitistype(lp_building, "WallZergHd"));
}

bool gf_buildingisattackingstructure (unit lp_building) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_or3(lib1_gf_unitistype(lp_building, "PhotonCannonHd"), lib1_gf_unitistype(lp_building, "BunkerHd"), lib1_gf_unitistype(lp_building, "SpineCrawlerHd"));
}

void gf_refundplayer (int lp_p, unit lp_building) {
    // Automatic Variable Declarations
    // Implementation
    UnitKill(lp_building);
    if (lib1_gf_or3(lib1_gf_unitistype(lp_building, "WallProtossHd"), lib1_gf_unitistype(lp_building, "WallTerranHd"), lib1_gf_unitistype(lp_building, "WallZergHd"))) {
        PlayerModifyPropertyInt(lp_p, c_playerPropMinerals, c_playerPropOperAdd, 1);
    }
    else {
        PlayerModifyPropertyInt(lp_p, c_playerPropMinerals, c_playerPropOperAdd, 2);
    }
}

void gf_castkickvote (int lp_playerwhovoted, int lp_vote) {
    // Variable Declarations
    bool lv__allvotescast;
    int lv__p;
    playergroup lv__pgwhovoted;

    // Automatic Variable Declarations
    playergroup auto69B67329_g;

    // Variable Initialization
    lv__allvotescast = true;
    lv__pgwhovoted = PlayerGroupSingle(lp_playerwhovoted);

    // Implementation
    DialogSetVisible(gv_kickplayervotedialog, lv__pgwhovoted, false);
    DialogSetVisible(gv_kickplayervoteinprogressdialog, lv__pgwhovoted, true);
    gv_kickplayervotewascast[lp_playerwhovoted] = true;
    gv_kickplayervotevalue = (gv_kickplayervotevalue + lp_vote);
    auto69B67329_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto69B67329_g, lv__p);
        if (lv__p < 0) { break; }
        if (lib1_gf_isfalse(gv_kickplayervotewascast[lv__p])) {
            lv__allvotescast = false;
        }

    }
    if (lib1_gf_istrue(lv__allvotescast)) {
        gf_showvoteresults();
    }

}

void gf_reenablestartvotebutton (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemTooltip(gv_startvotetokickplayerdibutton, StringToText(""), PlayerGroupSingle(lp_p));
    DialogControlSetEnabled(gv_startvotetokickplayerdibutton, PlayerGroupSingle(lp_p), true);
}

void gf_resetvotestate () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto93892E18_g;

    // Variable Initialization

    // Implementation
    DialogSetVisible(gv_kickplayervotedialog, PlayerGroupAll(), false);
    DialogSetVisible(gv_kickplayervoteinprogressdialog, PlayerGroupAll(), false);
    libNtve_gf_StopTimer(gv_kickplayervotetimer);
    auto93892E18_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto93892E18_g, lv__p);
        if (lv__p < 0) { break; }
        gv_kickplayervotewascast[lv__p] = false;
    }
    gv_kickplayervotevalue = 0;
}

void gf_handleplayerleavingwhowasbeingvotedon () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_resetvotestate();
    gv_kickplayervoteinprogress = false;
    if ((PlayerGroupCount(gv_activedefenders) > 2)) {
        DialogSetVisible(gv_startvotetokickplayerdialog, PlayerGroupAll(), true);
    }

}

void gf_setkickvoteplayerlist () {
    // Variable Declarations
    int lv__kickplayer;
    int lv__p;
    text lv__kickplayername;
    int lv__i;
    bool lv__dialogwasvisible;

    // Automatic Variable Declarations
    playergroup auto937E3BF3_g;
    playergroup auto3330C1F6_g;

    // Variable Initialization

    // Implementation
    if ((PlayerGroupCount(gv_activedefenders) > 2)) {
        auto937E3BF3_g = gv_activedefenders;
        lv__p = -1;
        while (true) {
            lv__p = PlayerGroupNextPlayer(auto937E3BF3_g, lv__p);
            if (lv__p < 0) { break; }
            lv__dialogwasvisible = ((gv_kickplayerlistdialog[lv__p] != c_invalidDialogId) && DialogIsVisible(gv_kickplayerlistdialog[lv__p], lv__p));
            if (lib1_gf_istrue(lv__dialogwasvisible)) {
                DialogSetVisible(gv_kickplayerlistdialog[lv__p], PlayerGroupSingle(lv__p), false);
            }

            lv__i = 0;
            DialogCreate(400, 750, c_anchorTopRight, 20, 50, true);
            gv_kickplayerlistdialog[lv__p] = DialogLastCreated();
            auto3330C1F6_g = gv_activedefenders;
            lv__kickplayer = -1;
            while (true) {
                lv__kickplayer = PlayerGroupNextPlayer(auto3330C1F6_g, lv__kickplayer);
                if (lv__kickplayer < 0) { break; }
                if ((lv__kickplayer != lv__p)) {
                    lv__kickplayername = PlayerName(lv__kickplayer);
                    if (lib1_gf_istrue(gv_testingmultiplayerlocally)) {
                        TextExpressionSetToken("Param/Expression/1E71C629", "kick_player", IntToText(lv__kickplayer));
                        lv__kickplayername = TextExpressionAssemble("Param/Expression/1E71C629");
                    }

                    libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 350, 50, c_anchorTop, 0, (25 + (lv__i * 60)), StringToText(""), lv__kickplayername, "");
                    gv_kickplayerlistdiplayer[lv__p][lv__kickplayer] = DialogControlLastCreated();
                    lv__i = lv__i + 1;
                }

            }
            DialogSetSize(gv_kickplayerlistdialog[lv__p], 400, (25 + (lv__i * 60) + 75));
            libNtve_gf_CreateDialogItemButton(DialogLastCreated(), 350, 50, c_anchorBottom, 0, 25, StringToText(""), StringExternal("Param/Value/EFD827C1"), "");
            gv_kickplayerlistdicancel[lv__p] = DialogControlLastCreated();
            if (lib1_gf_istrue(lv__dialogwasvisible)) {
                DialogSetVisible(gv_kickplayerlistdialog[lv__p], PlayerGroupSingle(lv__p), true);
            }

        }
    }

}

void gf_startkickvoteforplayer (int lp_initiatedbyplayer, int lp_kickplayer) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto8EDB22B6_g;
    playergroup autoF0099513_g;

    // Variable Initialization

    // Implementation
    gv_kickplayervoteinprogress = true;
    gv_kickplayervotewascast[lp_initiatedbyplayer] = true;
    gv_kickplayervotewascast[lp_kickplayer] = true;
    auto8EDB22B6_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto8EDB22B6_g, lv__p);
        if (lv__p < 0) { break; }
        DialogSetVisible(gv_kickplayerlistdialog[lv__p], PlayerGroupAll(), false);
    }
    DialogSetVisible(gv_startvotetokickplayerdialog, PlayerGroupAll(), false);
    TextExpressionSetToken("Param/Expression/27B4B0E7", "kick_player_name", PlayerName(lp_kickplayer));
    DialogSetTitle(gv_kickplayervotedialog, TextExpressionAssemble("Param/Expression/27B4B0E7"));
    TextExpressionSetToken("Param/Expression/B019B228", "kick_player_name", PlayerName(lp_kickplayer));
    DialogSetTitle(gv_kickplayervoteinprogressdialog, TextExpressionAssemble("Param/Expression/B019B228"));
    if (lib1_gf_istrue(gv_testingmultiplayerlocally)) {
        TextExpressionSetToken("Param/Expression/32293807", "kick_player", IntToText(lp_kickplayer));
        DialogSetTitle(gv_kickplayervoteinprogressdialog, TextExpressionAssemble("Param/Expression/32293807"));
        TextExpressionSetToken("Param/Expression/AA03E1AD", "kick_player", IntToText(lp_kickplayer));
        DialogSetTitle(gv_kickplayervotedialog, TextExpressionAssemble("Param/Expression/AA03E1AD"));
    }

    DialogSetVisible(gv_kickplayervoteinprogressdialog, PlayerGroupSingle(lp_initiatedbyplayer), true);
    DialogSetVisible(gv_kickplayervoteinprogressdialog, PlayerGroupSingle(lp_kickplayer), true);
    autoF0099513_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoF0099513_g, lv__p);
        if (lv__p < 0) { break; }
        if ((lv__p != lp_initiatedbyplayer) && (lv__p != lp_kickplayer)) {
            DialogSetVisible(gv_kickplayervotedialog, PlayerGroupSingle(lv__p), true);
        }

    }
    if (lib1_gf_istrue(gv_testingmultiplayerlocally)) {
        TimerStart(gv_kickplayervotetimer, 10.0, false, c_timeReal);
    }
    else {
        TimerStart(gv_kickplayervotetimer, 60.0, false, c_timeReal);
    }
}

void gf_showvoteresults () {
    // Variable Declarations
    int lv__p;
    int lv__votevaluethreshold;
    text lv__voteresulttext;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__votevaluethreshold = gf_getvotevaluethreshold();

    // Implementation
    gv_kickplayervoteinprogress = false;
    if ((gv_kickplayervotevalue >= lv__votevaluethreshold)) {
        lv__voteresulttext = StringExternal("Param/Value/F4D146E3");
        GameOver(gv_playerbeingvotedontokick, c_gameOverDefeat, true, true);
        gf_removeplayer(gv_playerbeingvotedontokick);
    }
    else {
        if (lib1_gf_istrue(gv_testingmultiplayerlocally)) {
            TimerStart(gv_kickplayervotespamtimer[gv_playerwhoinitiatedvote], 10.0, false, c_timeReal);
        }
        else {
            TimerStart(gv_kickplayervotespamtimer[gv_playerwhoinitiatedvote], 300.0, false, c_timeReal);
        }
        libNtve_gf_SetDialogItemTooltip(gv_startvotetokickplayerdibutton, StringExternal("Param/Value/60E74339"), PlayerGroupSingle(gv_playerwhoinitiatedvote));
        DialogControlSetEnabled(gv_startvotetokickplayerdibutton, PlayerGroupSingle(gv_playerwhoinitiatedvote), false);
        lv__voteresulttext = StringExternal("Param/Value/51E8C133");
    }
    TextExpressionSetToken("Param/Expression/E7D75A99", "result", lv__voteresulttext);
    TextExpressionSetToken("Param/Expression/E7D75A99", "value", IntToText(gv_kickplayervotevalue));
    TextExpressionSetToken("Param/Expression/E7D75A99", "threshold", IntToText(lv__votevaluethreshold));
    DialogSetTitle(gv_kickplayervoteresultsdialog, TextExpressionAssemble("Param/Expression/E7D75A99"));
    DialogSetVisible(gv_kickplayervoteresultsdialog, PlayerGroupAll(), true);
    gf_resetvotestate();
}

int gf_getvotevaluethreshold () {
    // Automatic Variable Declarations
    int autoE5A7EBD6_val;

    // Implementation
    autoE5A7EBD6_val = PlayerGroupCount(gv_activedefenders);
    if (autoE5A7EBD6_val == 3) {
        return 1;
    }
    else if (autoE5A7EBD6_val == 4) {
        return 2;
    }
    else if (autoE5A7EBD6_val == 5) {
        return 2;
    }
    else if (autoE5A7EBD6_val == 6) {
        return 2;
    }
    else if (autoE5A7EBD6_val == 7) {
        return 3;
    }
    else if (autoE5A7EBD6_val == 8) {
        return 3;
    }
    else {
        return -1;
    }
}

bool gf_unitisbuilder (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_or3(lib1_gf_unitistype(lp_u, "SCVHd"), lib1_gf_unitistype(lp_u, "DroneHd"), lib1_gf_unitistype(lp_u, "ProbeHd"));
}

int gf_rollmodtypedice () {
    // Automatic Variable Declarations
    // Implementation
    return gv_modtypedice[RandomInt(0, gv_modtypedicelastindex)];
}

void gf_applymodtounit (unit lp_u, int lp_modtype) {
    // Automatic Variable Declarations
    int auto1BF00943_val;

    // Implementation
    auto1BF00943_val = lp_modtype;
    if (auto1BF00943_val == ge_modtypes_increasespeed) {
        UnitBehaviorAdd(lp_u, gv_modtypetobuff[lp_modtype], lp_u, 1);
        UnitBehaviorAdd(lp_u, "RemoveShieldsHd", lp_u, 1);
    }
    else if (auto1BF00943_val == ge_modtypes_addarmor) {
        UnitBehaviorAdd(lp_u, gv_modtypetobuff[lp_modtype], lp_u, 1);
        UnitBehaviorAdd(lp_u, "RemoveShieldsHd", lp_u, 1);
    }
    else if (auto1BF00943_val == ge_modtypes_addshields) {
        UnitBehaviorAdd(lp_u, gv_modtypetobuff[lp_modtype], lp_u, 1);
    }
    else if (auto1BF00943_val == ge_modtypes_perfectspecimen) {
        UnitBehaviorAdd(lp_u, gv_modtypetobuff[ge_modtypes_addshields], lp_u, 1);
        UnitBehaviorAdd(lp_u, gv_modtypetobuff[ge_modtypes_increasespeed], lp_u, 1);
        UnitBehaviorAdd(lp_u, gv_modtypetobuff[ge_modtypes_addarmor], lp_u, 1);
    }
    else {
        UnitBehaviorAdd(lp_u, "RemoveShieldsHd", lp_u, 1);
    }
}

void gf_createmoddedunitatpoint (string lp_ut, int lp_p, point lp_point, int lp_opts, int lp_modtype) {
    // Variable Declarations
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gf_createunitatpoint(lp_ut, lp_point, lp_p, lp_opts);
    lv__u = UnitLastCreated();
    gf_applymodtounit(lv__u, lp_modtype);
}

void gf_createplayerunitatpoint (int lp_location, int lp_race, int lp_player, point lp_point, string lp_utoverride, int lp_opts) {
    // Variable Declarations
    unit lv__u;
    string lv__ut;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__ut = gv_unitperlocationandrace[lp_location][lp_race];

    // Implementation
    if ((lp_utoverride != null)) {
        lv__ut = lp_utoverride;
    }

    lib1_gf_createunitatpoint(lv__ut, lp_point, lp_player, lp_opts);
}

void gf_removefullrefund () {
    // Variable Declarations
    unit lv__u;

    // Automatic Variable Declarations
    unitgroup auto62D363EA_g;
    int auto62D363EA_u;

    // Variable Initialization

    // Implementation
    auto62D363EA_g = gv_unitswithfullrefundavailable;
    auto62D363EA_u = UnitGroupCount(auto62D363EA_g, c_unitCountAll);
    for (;; auto62D363EA_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto62D363EA_g, auto62D363EA_u);
        if (lv__u == null) { break; }
        UnitBehaviorRemove(lv__u, "FullRefundAvailableSalvageHd", 1);
    }
    UnitGroupClear(gv_unitswithfullrefundavailable);
}

void gf_removeghost (unit lp_u) {
    // Variable Declarations
    point lv__pos;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__pos = UnitGetPosition(lp_u);

    // Implementation
    libNtve_gf_CreateActorAtPoint("HallucinationDeathHd", lv__pos);
    SoundPlayAtPointForPlayer(SoundLink("Sentry_HallucinationDeathMedium", -1), c_maxPlayers, PlayerGroupAll(), lv__pos, 0.0, 100.0, 0.0);
    UnitRemove(lp_u);
}

void gf_removeplayer (int lp_p) {
    // Variable Declarations
    unit lv__u;
    int lv__defenderlocation;

    // Automatic Variable Declarations
    unitgroup autoF833A607_g;
    int autoF833A607_u;
    unitgroup auto4BA32B1F_g;
    int auto4BA32B1F_u;

    // Variable Initialization

    // Implementation
    gv_numenemieswhoreachedtheend = 0;
    lv__defenderlocation = gv_playertodefenderlocation[lp_p];
    if ((lv__defenderlocation > -1)) {
        gv_activedefenderlocations[lv__defenderlocation] = false;
        libNtve_gf_StopTimer(gv_enemyghostspawntimer[lv__defenderlocation]);
        autoF833A607_g = UnitGroup(null, gv_allycompplayer, gv_defendlocationtoislandsregion[lv__defenderlocation], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoF833A607_u = UnitGroupCount(autoF833A607_g, c_unitCountAll);
        for (;; autoF833A607_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoF833A607_g, autoF833A607_u);
            if (lv__u == null) { break; }
            UnitKill(lv__u);
        }
    }

    PlayerModifyPropertyInt(lp_p, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerGroupRemove(gv_activedefenders, lp_p);
    PlayerGroupRemove(gv_activedefendersplusallycomp, lp_p);
    auto4BA32B1F_g = UnitGroup(null, lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4BA32B1F_u = UnitGroupCount(auto4BA32B1F_g, c_unitCountAll);
    for (;; auto4BA32B1F_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto4BA32B1F_g, auto4BA32B1F_u);
        if (lv__u == null) { break; }
        UnitKill(lv__u);
    }
    gf_skipforplayeriftimerisactive(lp_p);
    gf_updateactivepathtests();
    if (lib1_gf_istrue(gv_kickplayervoteinprogress)) {
        if ((gv_playerbeingvotedontokick == lp_p)) {
            gf_handleplayerleavingwhowasbeingvotedon();
        }
        else {
            gf_castkickvote(lp_p, 0);
        }
    }

    gf_setkickvoteplayerlist();
}

void gf_startallenemyghostspawnlocations () {
    // Variable Declarations
    int lv__location;

    // Automatic Variable Declarations
    const int auto7C4E6946_ae = 7;
    const int auto7C4E6946_ai = 1;

    // Variable Initialization

    // Implementation
    lv__location = 0;
    for ( ; ( (auto7C4E6946_ai >= 0 && lv__location <= auto7C4E6946_ae) || (auto7C4E6946_ai < 0 && lv__location >= auto7C4E6946_ae) ) ; lv__location += auto7C4E6946_ai ) {
        if (lib1_gf_istrue(gv_activedefenderlocations[lv__location])) {
            gf_startenemyghostspawnatlocation(lv__location);
        }

    }
}

void gf_startenemyghostspawnatlocation (int lp_location) {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(gv_enemyghostspawntimer[lp_location], 1.0, false, c_timeReal);
}

void gf_stopandclearenemyghostspawn () {
    // Variable Declarations
    int lv__location;
    unit lv__u;

    // Automatic Variable Declarations
    unitgroup auto8A8D303B_g;
    int auto8A8D303B_u;
    const int autoDB047048_ae = 7;
    const int autoDB047048_ai = 1;

    // Variable Initialization

    // Implementation
    auto8A8D303B_g = gv_enemyghostsonmap;
    auto8A8D303B_u = UnitGroupCount(auto8A8D303B_g, c_unitCountAll);
    for (;; auto8A8D303B_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto8A8D303B_g, auto8A8D303B_u);
        if (lv__u == null) { break; }
        gf_removeghost(lv__u);
    }
    UnitGroupClear(gv_enemyghostsonmap);
    lv__location = 0;
    for ( ; ( (autoDB047048_ai >= 0 && lv__location <= autoDB047048_ae) || (autoDB047048_ai < 0 && lv__location >= autoDB047048_ae) ) ; lv__location += autoDB047048_ai ) {
        libNtve_gf_StopTimer(gv_enemyghostspawntimer[lv__location]);
    }
}

void gf_updateactivepathtests () {
    // Variable Declarations
    int lv__defenderlocation;
    int lv__pathtestsegmentidx;
    int lv__p;
    int lv__i;

    // Automatic Variable Declarations
    const int autoEDF624E9_ae = 7;
    const int autoEDF624E9_ai = 1;
    playergroup auto0F872C9C_g;
    const int auto6C90D5C5_ae = 1;
    const int auto6C90D5C5_ai = 1;

    // Variable Initialization

    // Implementation
    lv__pathtestsegmentidx = 0;
    for ( ; ( (autoEDF624E9_ai >= 0 && lv__pathtestsegmentidx <= autoEDF624E9_ae) || (autoEDF624E9_ai < 0 && lv__pathtestsegmentidx >= autoEDF624E9_ae) ) ; lv__pathtestsegmentidx += autoEDF624E9_ai ) {
        gv_pathtestsegments[lv__pathtestsegmentidx].lv_isactive = false;
    }
    auto0F872C9C_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto0F872C9C_g, lv__p);
        if (lv__p < 0) { break; }
        lv__defenderlocation = gv_playertodefenderlocation[lv__p];
        if ((lv__defenderlocation > -1)) {
            lv__i = 0;
            for ( ; ( (auto6C90D5C5_ai >= 0 && lv__i <= auto6C90D5C5_ae) || (auto6C90D5C5_ai < 0 && lv__i >= auto6C90D5C5_ae) ) ; lv__i += auto6C90D5C5_ai ) {
                lv__pathtestsegmentidx = gv_defendlocationtopathtestsegments[lv__defenderlocation][lv__i];
                gv_pathtestsegments[lv__pathtestsegmentidx].lv_isactive = true;
            }
        }

    }
}

void gf_upgradebuilding (string lp_buildingtypetocreate) {
    // Variable Declarations
    int lv__p;
    unit lv__u;
    point lv__point;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();
    lv__point = UnitGetPosition(EventUnit());

    // Implementation
    lib1_gf_createunitatpoint(lp_buildingtypetocreate, lv__point, lv__p, c_unitCreateIgnorePlacement);
    UnitSelect(UnitLastCreated(), lv__p, true);
    if (lib1_gf_unithasbuff(lv__u, "FullRefundAvailableSalvageHd")) {
        UnitBehaviorAdd(UnitLastCreated(), "FullRefundAvailableSalvageHd", lv__u, 1);
        UnitGroupAdd(gv_unitswithfullrefundavailable, UnitLastCreated());
    }

    UnitKill(lv__u);
    UnitGroupRemove(gv_unitswithfullrefundavailable, lv__u);
}

void gf_skipforplayeriftimerisactive (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_timerisactive(gv_roundtimer) && lib1_gf_isfalse(gv_playertoskipclicked[lp_p])) {
        gv_playertoskipclicked[lp_p] = true;
        DialogControlSetEnabled(gv_rounddialogitemskip, PlayerGroupSingle(lp_p), false);
        gf_skipifallclicked();
    }

}

void gf_spawnunit (int lp_unitlocation, int lp_p) {
    // Variable Declarations
    point lv__spawnpoint;
    int lv__race;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__spawnpoint = gv_spawnpointperplayer[lp_p];
    lv__race = lib1_gf_getraceintegerfromplayer(lp_p);

    // Implementation
    gf_createplayerunitatpoint(lp_unitlocation, lv__race, lp_p, lv__spawnpoint, lib1_gv_nogamelinkunittype, 0);
}

void gf_chooseunit (int lp_numchoosers, int lp_location, int lp_p, region lp_region, int lp_choicetype) {
    // Variable Declarations
    int lv__numunitgroups;
    int lv__curunitgroup;
    unit lv__u;

    // Automatic Variable Declarations
    int auto929B0F97_ae;
    const int auto929B0F97_ai = 1;
    int autoA23AE6A0_val;
    unitgroup auto6873F0E9_g;
    int auto6873F0E9_u;

    // Variable Initialization

    // Implementation
    while (gv_unitchooserlockbyplayer[lp_p]) {
        Wait(1.0, c_timeGame);
    }
    gv_unitchooserlockbyplayer[lp_p] = true;
    lv__numunitgroups = lib1_gf_foraregionsetunitsingroupsofNforplayerthenreturnthenumberofgroupsfound(lp_region, lp_p, lp_numchoosers, "ChooserHd");
    if ((lv__numunitgroups > 0)) {
        auto929B0F97_ae = (lv__numunitgroups - 1);
        lv__curunitgroup = 0;
        for ( ; ( (auto929B0F97_ai >= 0 && lv__curunitgroup <= auto929B0F97_ae) || (auto929B0F97_ai < 0 && lv__curunitgroup >= auto929B0F97_ae) ) ; lv__curunitgroup += auto929B0F97_ai ) {
            autoA23AE6A0_val = lp_choicetype;
            if (autoA23AE6A0_val == ge_choicetype_minerals) {
                PlayerModifyPropertyInt(lp_p, c_playerPropMinerals, c_playerPropOperAdd, 2);
            }
            else if (autoA23AE6A0_val == ge_choicetype_unit) {
                gf_spawnunit(lp_location, lp_p);
            }
            else {
            }
            auto6873F0E9_g = lib1_gv_unitsingroupsofNperplayer[lp_p][lv__curunitgroup];
            auto6873F0E9_u = UnitGroupCount(auto6873F0E9_g, c_unitCountAll);
            for (;; auto6873F0E9_u -= 1) {
                lv__u = UnitGroupUnitFromEnd(auto6873F0E9_g, auto6873F0E9_u);
                if (lv__u == null) { break; }
                gv_playertonumchoosersspent[lp_p] = (gv_playertonumchoosersspent[lp_p] + 1);
                UnitKill(lv__u);
            }
        }
    }

    gv_unitchooserlockbyplayer[lp_p] = false;
}

bool gf_isboss () {
    // Automatic Variable Declarations
    // Implementation
    return (ModI((gv_currentround + 1), 5) == 0);
}

bool gf_isenemyghost (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    return UnitHasBehavior2(lp_u, "EnemyGhostHd");
}

bool gf_shouldpingchooser (int lp_p) {
    // Variable Declarations
    int lv__numchoosersspenttilwefiguretheplayergetsit;
    int lv__defenderlocation;
    point lv__chooserspawnpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__numchoosersspenttilwefiguretheplayergetsit = 20;

    // Implementation
    lv__defenderlocation = gv_playertodefenderlocation[lp_p];
    if ((lv__defenderlocation == -1)) {
        return false;
    }
    else {
        lv__chooserspawnpoint = gv_defendlocationtochooserspawnpoint[lv__defenderlocation];
        return (lib1_gf_isfalse(gv_playerbankvars[lp_p].lv_hasplayed) && (gv_playertonumchoosersspent[lp_p] < lv__numchoosersspenttilwefiguretheplayergetsit) && (lib1_gf_numberofunitsoftypeinregion(RegionCircle(lv__chooserspawnpoint, 10.0), lp_p, "ChooserHd") > 6));
    }
}

int gf_getcurrentmodtype () {
    // Automatic Variable Declarations
    // Implementation
    return gv_enemymods[gv_currentround][0];
}

string gf_getcurrentenemyunittypetospawn () {
    // Automatic Variable Declarations
    // Implementation
    return gv_enemyperround[gv_currentround];
}

void gf_endgame (int lp_gameovertype) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup autoA9135E83_g;

    // Variable Initialization

    // Implementation
    autoA9135E83_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoA9135E83_g, lv__p);
        if (lv__p < 0) { break; }
        GameOver(lv__p, lp_gameovertype, true, true);
    }
}

void gf_enemyreachedend () {
    // Variable Declarations
    int lv__numenemiesperlife;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__numenemiesperlife = ((PlayerGroupCount(gv_activedefenders) + 1) / 2);

    // Implementation
    gv_numenemieswhoreachedtheend = gv_numenemieswhoreachedtheend + 1;
    if ((ModI(gv_numenemieswhoreachedtheend, lv__numenemiesperlife) == 0)) {
        if ((gv_currentextralife < gv_maxextralives)) {
            lib1_gf_removeunitoftypeatpoint(gv_allycompplayer, gv_extralifepoints[gv_currentextralife], lib1_ge_removeunittype_kill, "ExtraLifeHd");
            gv_currentextralife = gv_currentextralife + 1;
            lib1_gf_playsoundforallplayers(SoundLink("Probe_Explode", -1));
            TextExpressionSetToken("Param/Expression/EE5F32E3", "color_calamity", lib1_gv_colorcalamity);
            TextExpressionSetToken("Param/Expression/EE5F32E3", "extra_lives_left", IntToText((gv_maxextralives - gv_currentextralife)));
            lib1_gf_messageallusersdebounced(TextExpressionAssemble("Param/Expression/EE5F32E3"), "extra lives remaining", 3);
        }
        else {
            gf_endgame(c_gameOverDefeat);
        }
    }

}

void gf_incrementenemieskilled () {
    // Variable Declarations
    int lv__enemiesperincomegained;
    point lv__chooserspawnpoint;
    unit lv__chooser;
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto1F3675BB_g;

    // Variable Initialization
    lv__enemiesperincomegained = (gv_enemieskilledperchooserforsingleplayer * PlayerGroupCount(gv_activedefenders));

    // Implementation
    gv_enemieskilled = gv_enemieskilled + 1;
    if ((ModI(gv_enemieskilled, lv__enemiesperincomegained) == 0)) {
        auto1F3675BB_g = gv_activedefenders;
        lv__p = -1;
        while (true) {
            lv__p = PlayerGroupNextPlayer(auto1F3675BB_g, lv__p);
            if (lv__p < 0) { break; }
            lv__chooserspawnpoint = gv_defendlocationtochooserspawnpoint[gv_playertodefenderlocation[lv__p]];
            lib1_gf_createunitatpoint("ChooserHd", lv__chooserspawnpoint, lv__p, 0);
            if (lib1_gf_istrue(gv_unitchooserpathexistsperplayer[lv__p])) {
                lv__chooser = UnitLastCreated();
                UnitIssueOrder(lv__chooser, OrderTargetingPoint(AbilityCommand("move", 0), PathGetDestinationPoint(gv_unitchooserpathdisplayperplayer[lv__p])), c_orderQueueReplace);
            }

        }
    }

}

void gf_removeenemy (unit lp_u) {
    // Variable Declarations
    point lv__pos;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__pos = UnitGetPosition(lp_u);

    // Implementation
    UnitCreateEffectPoint(lp_u, "ExitEffectHd", lv__pos);
    SoundPlayAtPointForPlayer(SoundLink("Ultralisk_Death_Fall_Impact", -1), c_maxPlayers, PlayerGroupAll(), lv__pos, 0.0, 100.0, 0.0);
    UnitRemove(lp_u);
}

void gf_resetskipclicked () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto1F2F82A0_g;

    // Variable Initialization

    // Implementation
    DialogControlSetEnabled(gv_rounddialogitemskip, PlayerGroupAll(), true);
    auto1F2F82A0_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto1F2F82A0_g, lv__p);
        if (lv__p < 0) { break; }
        gv_playertoskipclicked[lv__p] = false;
    }
}

void gf_runround () {
    // Automatic Variable Declarations
    // Implementation
    gf_stopandclearenemyghostspawn();
    DialogSetVisible(gv_rounddialog, PlayerGroupAll(), false);
    gf_resetskipclicked();
    gf_removefullrefund();
    gv_roundfinished = false;
    gf_spawnenemies();
}

void gf_skipifallclicked () {
    // Variable Declarations
    int lv__p;
    bool lv__allclicked;

    // Automatic Variable Declarations
    playergroup auto8F188BCF_g;

    // Variable Initialization
    lv__allclicked = true;

    // Implementation
    auto8F188BCF_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto8F188BCF_g, lv__p);
        if (lv__p < 0) { break; }
        if (lib1_gf_isfalse(gv_playertoskipclicked[lv__p])) {
            lv__allclicked = false;
            break;
        }

    }
    if (lib1_gf_istrue(lv__allclicked)) {
        libNtve_gf_StopTimer(gv_roundtimer);
        gf_runround();
    }

}

trigger auto_gf_spawnenemies_Trigger = null;

void gf_spawnenemies () {
    if (auto_gf_spawnenemies_Trigger == null) {
        auto_gf_spawnenemies_Trigger = TriggerCreate("auto_gf_spawnenemies_TriggerFunc");
    }

    TriggerExecute(auto_gf_spawnenemies_Trigger, false, false);
}

bool auto_gf_spawnenemies_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__enemiesperround;
    point lv__enemyrallypoint;
    point lv__enemyspawnpoint;
    int lv__i;
    int lv__location;
    fixed lv__secondsbetweenenemies;
    string lv__spawnbehavior;
    int lv__spawnbehaviorlocation;
    unit lv__spawnedunit;
    gs_unitandcurrentdestinationpoint lv__spawnedunitanddestination;
    int lv__sublocation;

    // Automatic Variable Declarations
    int auto45217C05_ae;
    const int auto45217C05_ai = 1;
    const int auto15E4BA18_ae = 7;
    const int auto15E4BA18_ai = 1;
    const int autoA599EEF7_ae = 1;
    const int autoA599EEF7_ai = 1;

    // Variable Initialization
    lv__enemiesperround = gv_enemiesperround;
    lv__secondsbetweenenemies = gv_initialsecondsbetweenenemies;

    // Implementation
    gv_isspawningenemies = true;
    if (gf_isboss()) {
        lv__enemiesperround = (lv__enemiesperround / 2);
        lv__secondsbetweenenemies = (lv__secondsbetweenenemies * 2.0);
    }

    if ((gf_getcurrentmodtype() == ge_modtypes_increaseenemycount)) {
        lv__enemiesperround = (lv__enemiesperround + gv_enemymods[gv_currentround][1]);
    }

    auto45217C05_ae = lv__enemiesperround;
    lv__i = 1;
    for ( ; ( (auto45217C05_ai >= 0 && lv__i <= auto45217C05_ae) || (auto45217C05_ai < 0 && lv__i >= auto45217C05_ae) ) ; lv__i += auto45217C05_ai ) {
        lv__location = 0;
        for ( ; ( (auto15E4BA18_ai >= 0 && lv__location <= auto15E4BA18_ae) || (auto15E4BA18_ai < 0 && lv__location >= auto15E4BA18_ae) ) ; lv__location += auto15E4BA18_ai ) {
            if (lib1_gf_istrue(gv_activedefenderlocations[lv__location])) {
                lv__sublocation = 0;
                for ( ; ( (autoA599EEF7_ai >= 0 && lv__sublocation <= autoA599EEF7_ae) || (autoA599EEF7_ai < 0 && lv__sublocation >= autoA599EEF7_ae) ) ; lv__sublocation += autoA599EEF7_ai ) {
                    lv__spawnbehaviorlocation = gv_locationandsublocationtoenemypathlocation[lv__location][lv__sublocation];
                    lv__spawnbehavior = gv_spawnbehaviors[lv__spawnbehaviorlocation];
                    lv__enemyspawnpoint = gv_enemyspawnpointsperlocation[lv__location][lv__sublocation];
                    lv__enemyrallypoint = gv_enemyrallypointsperlocation[lv__location][lv__sublocation];
                    gf_spawnsingleenemy((lv__sublocation * (lv__secondsbetweenenemies / 2.0)), gf_getcurrentmodtype(), lv__enemyrallypoint, lv__enemyspawnpoint, gf_getcurrentenemyunittypetospawn(), lv__spawnbehavior, false);
                }
            }

        }
        if ((lv__i < lv__enemiesperround)) {
            Wait(lv__secondsbetweenenemies, c_timeReal);
        }

    }
    gv_isspawningenemies = false;
    return true;
}

void gf_spawnenemyghostsatlocation (int lp_location) {
    // Variable Declarations
    point lv__enemyrallypoint;
    point lv__enemyspawnpoint;
    int lv__p;
    string lv__spawnbehavior;
    int lv__spawnbehaviorlocation;
    fixed lv__staggerseconds;
    int lv__sublocation;

    // Automatic Variable Declarations
    const int auto3CA5BEB0_ae = 1;
    const int auto3CA5BEB0_ai = 1;

    // Variable Initialization
    lv__p = gv_locationtoplayer[lp_location];
    lv__staggerseconds = (gv_initialsecondsbetweenenemies / 2);

    // Implementation
    if (lib1_gf_istrue(gv_playertoghostsenabled[lv__p])) {
        if (gf_isboss()) {
            lv__staggerseconds = (lv__staggerseconds * 2);
        }

        lv__sublocation = 0;
        for ( ; ( (auto3CA5BEB0_ai >= 0 && lv__sublocation <= auto3CA5BEB0_ae) || (auto3CA5BEB0_ai < 0 && lv__sublocation >= auto3CA5BEB0_ae) ) ; lv__sublocation += auto3CA5BEB0_ai ) {
            lv__spawnbehaviorlocation = gv_locationandsublocationtoenemypathlocation[lp_location][lv__sublocation];
            lv__spawnbehavior = gv_spawnbehaviors[lv__spawnbehaviorlocation];
            lv__enemyspawnpoint = gv_enemyspawnpointsperlocation[lp_location][lv__sublocation];
            lv__enemyrallypoint = gv_enemyrallypointsperlocation[lp_location][lv__sublocation];
            gf_spawnsingleenemy((lv__sublocation * lv__staggerseconds), gf_getcurrentmodtype(), lv__enemyrallypoint, lv__enemyspawnpoint, gf_getcurrentenemyunittypetospawn(), lv__spawnbehavior, true);
        }
    }

}

trigger auto_gf_spawnsingleenemy_Trigger = null;
fixed auto_gf_spawnsingleenemy_lp_afterNseconds;
int auto_gf_spawnsingleenemy_lp_currentmodtype;
point auto_gf_spawnsingleenemy_lp_enemyrallypoint;
point auto_gf_spawnsingleenemy_lp_enemyspawnpoint;
string auto_gf_spawnsingleenemy_lp_enemyunittype;
string auto_gf_spawnsingleenemy_lp_spawnbehavior;
bool auto_gf_spawnsingleenemy_lp_isghost;

void gf_spawnsingleenemy (fixed lp_afterNseconds, int lp_currentmodtype, point lp_enemyrallypoint, point lp_enemyspawnpoint, string lp_enemyunittype, string lp_spawnbehavior, bool lp_isghost) {
    auto_gf_spawnsingleenemy_lp_afterNseconds = lp_afterNseconds;
    auto_gf_spawnsingleenemy_lp_currentmodtype = lp_currentmodtype;
    auto_gf_spawnsingleenemy_lp_enemyrallypoint = lp_enemyrallypoint;
    auto_gf_spawnsingleenemy_lp_enemyspawnpoint = lp_enemyspawnpoint;
    auto_gf_spawnsingleenemy_lp_enemyunittype = lp_enemyunittype;
    auto_gf_spawnsingleenemy_lp_spawnbehavior = lp_spawnbehavior;
    auto_gf_spawnsingleenemy_lp_isghost = lp_isghost;

    if (auto_gf_spawnsingleenemy_Trigger == null) {
        auto_gf_spawnsingleenemy_Trigger = TriggerCreate("auto_gf_spawnsingleenemy_TriggerFunc");
    }

    TriggerExecute(auto_gf_spawnsingleenemy_Trigger, false, false);
}

bool auto_gf_spawnsingleenemy_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_afterNseconds = auto_gf_spawnsingleenemy_lp_afterNseconds;
    int lp_currentmodtype = auto_gf_spawnsingleenemy_lp_currentmodtype;
    point lp_enemyrallypoint = auto_gf_spawnsingleenemy_lp_enemyrallypoint;
    point lp_enemyspawnpoint = auto_gf_spawnsingleenemy_lp_enemyspawnpoint;
    string lp_enemyunittype = auto_gf_spawnsingleenemy_lp_enemyunittype;
    string lp_spawnbehavior = auto_gf_spawnsingleenemy_lp_spawnbehavior;
    bool lp_isghost = auto_gf_spawnsingleenemy_lp_isghost;

    // Variable Declarations
    unit lv__spawnedenemyunit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    if ((lp_afterNseconds != 0)) {
        Wait(lp_afterNseconds, c_timeReal);
    }

    gf_createmoddedunitatpoint(lp_enemyunittype, gv_enemyplayer, lp_enemyspawnpoint, 0, lp_currentmodtype);
    lv__spawnedenemyunit = UnitLastCreated();
    UnitIssueOrder(lv__spawnedenemyunit, OrderTargetingPoint(AbilityCommand("move", 0), lp_enemyrallypoint), c_orderQueueReplace);
    UnitBehaviorAdd(lv__spawnedenemyunit, lp_spawnbehavior, lv__spawnedenemyunit, 1);
    UnitBehaviorAdd(lv__spawnedenemyunit, "PushHd", lv__spawnedenemyunit, 1);
    if (lib1_gf_istrue(lp_isghost)) {
        UnitBehaviorAdd(lv__spawnedenemyunit, "EnemyGhostHd", lv__spawnedenemyunit, 1);
        UnitGroupAdd(gv_enemyghostsonmap, lv__spawnedenemyunit);
    }

    return true;
}

void gf_startroundtimer (int lp_numseconds) {
    // Variable Declarations
    int lv__p;
    bool lv__enableordisable;
    bool lv__isbetweenrounds;
    bool lv__shouldshowrounddialog;
    bool lv__shouldstartroundtimer;

    // Automatic Variable Declarations
    playergroup autoF2254ACA_g;

    // Variable Initialization
    lv__enableordisable = true;
    lv__isbetweenrounds = (lp_numseconds == gv_secondsbetweenrounds);
    lv__shouldshowrounddialog = true;
    lv__shouldstartroundtimer = true;

    // Implementation
    if (lib1_gf_isfalse(gv_roundtimerexists)) {
        lv__shouldstartroundtimer = false;
    }
    else if (lib1_gf_istrue(lv__isbetweenrounds) && lib1_gf_istrue(gv_roundtimerisnonstop)) {
        lv__shouldstartroundtimer = false;
        lv__shouldshowrounddialog = false;
    }
    if (lib1_gf_istrue(lv__shouldstartroundtimer)) {
        TimerStart(gv_roundtimer, lp_numseconds, false, c_timeReal);
        gf_updatedialogtimervalue();
    }

    if (lib1_gf_istrue(lv__shouldshowrounddialog)) {
        DialogSetVisible(gv_rounddialog, PlayerGroupAll(), true);
        autoF2254ACA_g = gv_activedefenders;
        lv__p = -1;
        while (true) {
            lv__p = PlayerGroupNextPlayer(autoF2254ACA_g, lv__p);
            if (lv__p < 0) { break; }
            gv_playertoskipclicked[lv__p] = gv_autoskipbyplayer[lv__p];
            DialogControlSetEnabled(gv_rounddialogitemskip, PlayerGroupSingle(lv__p), lib1_gf_convertbooltoenabledisableoption(!(gv_playertoskipclicked[lv__p])));
        }
        gf_skipifallclicked();
    }
    else {
        gf_runround();
    }
}

void gf_updatedialogtimervalue () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lib1_gf_timerisactive(gv_roundtimer))) {
        libNtve_gf_SetDialogItemText(gv_rounddialogitemtimervalue, FixedToText(TimerGetRemaining(gv_roundtimer), 0), PlayerGroupAll());
    }

}

//--------------------------------------------------------------------------------------------------
// Trigger: init map
//--------------------------------------------------------------------------------------------------
bool gt_initmap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    gf_initgameattributevars();
    gf_initattributebuffamounts();
    gf_initdefendlocationtoislandregion();
    gf_initdefendlocationtopathtestsegments();
    gf_initmisc();
    gf_initenemyids();
    gf_initenemymaxhealthandshield();
    gf_initmodtypetobuff();
    gf_initroundtimer();
    gf_initunitpoints();
    gf_initunitperlocation();
    gf_initunitbeaconpoints();
    gf_initunitbeaconpointsperlocation();
    gf_initmodtypedice();
    gf_initmodtypetomodunit();
    gf_initplayergroups();
    gf_initbanks();
    gf_initalliance();
    gf_initresources();
    gf_initlocationchoosers();
    gf_initdefendlocationbeaconperlocation();
    gf_initdefendpointperlocation();
    gf_initenemyspawnpointsperlocation();
    gf_initenemyrallypointsperlocation();
    gf_initenemyteleregions();
    gf_initenemytelespawns();
    gf_initenemyrallypointspertelespawn();
    gf_inittelelocationtospawnclockwiselocation();
    gf_inittelelocationtoenemyspawnpathsegments();
    gf_initspawnpointperplayer();
    gf_initspawnbehaviors();
    gf_initlocationandsublocationtospawnclockwiselocation();
    gf_initenemypathlocationopposites();
    gf_initenemyclearregionperpathlocation();
    gf_initrounddialog();
    gf_initenemygroups();
    gf_initenemyperround25();
    gf_initenemyshowcasepoints();
    gf_initextralifepoints();
    gf_initextralives();
    gf_initchooserspawnpoints();
    gf_initenemymodpoints();
    gf_initpossibleenemyunitsperround();
    gf_initenemyperroundrest();
    gf_initenemymods();
    gf_initenemyshowcase();
    gf_initpathtesters();
    gf_initvotetokickplayerdialogs();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_initmap_Init () {
    gt_initmap = TriggerCreate("gt_initmap_Func");
    TriggerAddEventMapInit(gt_initmap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose spawn location - top
//--------------------------------------------------------------------------------------------------
bool gt_choosespawnlocationtop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderlocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderlocation = ge_clockwiselocation_top;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_choosespawnlocation(lv_defenderlocation, EventPlayer(), EventUnit());
    TriggerDestroy(gt_choosespawnlocationtop);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosespawnlocationtop_Init () {
    gt_choosespawnlocationtop = TriggerCreate("gt_choosespawnlocationtop_Func");
    TriggerAddEventUnitRange(gt_choosespawnlocationtop, null, UnitFromId(209261321), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose spawn location - top right
//--------------------------------------------------------------------------------------------------
bool gt_choosespawnlocationtopright_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderlocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderlocation = ge_clockwiselocation_topright;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_choosespawnlocation(lv_defenderlocation, EventPlayer(), EventUnit());
    TriggerDestroy(gt_choosespawnlocationtopright);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosespawnlocationtopright_Init () {
    gt_choosespawnlocationtopright = TriggerCreate("gt_choosespawnlocationtopright_Func");
    TriggerAddEventUnitRange(gt_choosespawnlocationtopright, null, UnitFromId(169646577), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose spawn location - right
//--------------------------------------------------------------------------------------------------
bool gt_choosespawnlocationright_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderlocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderlocation = ge_clockwiselocation_right;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_choosespawnlocation(lv_defenderlocation, EventPlayer(), EventUnit());
    TriggerDestroy(gt_choosespawnlocationright);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosespawnlocationright_Init () {
    gt_choosespawnlocationright = TriggerCreate("gt_choosespawnlocationright_Func");
    TriggerAddEventUnitRange(gt_choosespawnlocationright, null, UnitFromId(1976925429), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose spawn location - bot right
//--------------------------------------------------------------------------------------------------
bool gt_choosespawnlocationbotright_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderlocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderlocation = ge_clockwiselocation_botright;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_choosespawnlocation(lv_defenderlocation, EventPlayer(), EventUnit());
    TriggerDestroy(gt_choosespawnlocationbotright);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosespawnlocationbotright_Init () {
    gt_choosespawnlocationbotright = TriggerCreate("gt_choosespawnlocationbotright_Func");
    TriggerAddEventUnitRange(gt_choosespawnlocationbotright, null, UnitFromId(376238765), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose spawn location - bot
//--------------------------------------------------------------------------------------------------
bool gt_choosespawnlocationbot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderlocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderlocation = ge_clockwiselocation_bot;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_choosespawnlocation(lv_defenderlocation, EventPlayer(), EventUnit());
    TriggerDestroy(gt_choosespawnlocationbot);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosespawnlocationbot_Init () {
    gt_choosespawnlocationbot = TriggerCreate("gt_choosespawnlocationbot_Func");
    TriggerAddEventUnitRange(gt_choosespawnlocationbot, null, UnitFromId(220038668), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose spawn location - bot left
//--------------------------------------------------------------------------------------------------
bool gt_choosespawnlocationbotleft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderlocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderlocation = ge_clockwiselocation_botleft;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_choosespawnlocation(lv_defenderlocation, EventPlayer(), EventUnit());
    TriggerDestroy(gt_choosespawnlocationbotleft);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosespawnlocationbotleft_Init () {
    gt_choosespawnlocationbotleft = TriggerCreate("gt_choosespawnlocationbotleft_Func");
    TriggerAddEventUnitRange(gt_choosespawnlocationbotleft, null, UnitFromId(469124253), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose spawn location - left
//--------------------------------------------------------------------------------------------------
bool gt_choosespawnlocationleft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderlocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderlocation = ge_clockwiselocation_left;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_choosespawnlocation(lv_defenderlocation, EventPlayer(), EventUnit());
    TriggerDestroy(gt_choosespawnlocationleft);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosespawnlocationleft_Init () {
    gt_choosespawnlocationleft = TriggerCreate("gt_choosespawnlocationleft_Func");
    TriggerAddEventUnitRange(gt_choosespawnlocationleft, null, UnitFromId(302000048), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose spawn location - top left
//--------------------------------------------------------------------------------------------------
bool gt_choosespawnlocationtopleft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderlocation;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_defenderlocation = ge_clockwiselocation_topleft;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_choosespawnlocation(lv_defenderlocation, EventPlayer(), EventUnit());
    TriggerDestroy(gt_choosespawnlocationtopleft);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosespawnlocationtopleft_Init () {
    gt_choosespawnlocationtopleft = TriggerCreate("gt_choosespawnlocationtopleft_Func");
    TriggerAddEventUnitRange(gt_choosespawnlocationtopleft, null, UnitFromId(1243337835), 1.0, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: test paths
//--------------------------------------------------------------------------------------------------
bool gt_testpaths_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__building;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__building = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_testpathlock) {
        Wait(1.0, c_timeGame);
    }
    gv_testpathlock = true;
    if (lib1_gf_isfalse(gf_allactivepathsareclear())) {
        lib1_gf_messageuser(StringExternal("Param/Value/06E6A6BE"), lv__p);
        gf_refundplayer(lv__p, lv__building);
    }

    gv_testpathlock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_testpaths_Init () {
    gt_testpaths = TriggerCreate("gt_testpaths_Func");
    TriggerAddEventUnitCreated(gt_testpaths, null, "BuildZergHd", null);
    TriggerAddEventUnitCreated(gt_testpaths, null, "BuildTerranHd", null);
    TriggerAddEventUnitCreated(gt_testpaths, null, "BuildProtossHd", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: show kick player list
//--------------------------------------------------------------------------------------------------
bool gt_showkickplayerlist_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__di;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__di = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((lv__di == gv_startvotetokickplayerdibutton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_startvotetokickplayerdialog, PlayerGroupSingle(lv__p), false);
    DialogSetVisible(gv_kickplayerlistdialog[lv__p], PlayerGroupSingle(lv__p), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_showkickplayerlist_Init () {
    gt_showkickplayerlist = TriggerCreate("gt_showkickplayerlist_Func");
    TriggerAddEventDialogControl(gt_showkickplayerlist, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: kick player list - cancel
//--------------------------------------------------------------------------------------------------
bool gt_kickplayerlistcancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__di;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__di = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((lv__di == gv_kickplayerlistdicancel[lv__p]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_startvotetokickplayerdialog, PlayerGroupSingle(lv__p), true);
    DialogSetVisible(gv_kickplayerlistdialog[lv__p], PlayerGroupSingle(lv__p), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kickplayerlistcancel_Init () {
    gt_kickplayerlistcancel = TriggerCreate("gt_kickplayerlistcancel_Func");
    TriggerAddEventDialogControl(gt_kickplayerlistcancel, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: kick player list - choose player
//--------------------------------------------------------------------------------------------------
bool gt_kickplayerlistchooseplayer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__di;
    int lv__kickplayer;

    // Automatic Variable Declarations
    const int auto0299985E_ae = 7;
    const int auto0299985E_ai = 1;

    // Variable Initialization
    lv__p = EventPlayer();
    lv__di = EventDialogControl();

    // Actions
    if (!runActions) {
        return true;
    }

    lv__kickplayer = 0;
    for ( ; ( (auto0299985E_ai >= 0 && lv__kickplayer <= auto0299985E_ae) || (auto0299985E_ai < 0 && lv__kickplayer >= auto0299985E_ae) ) ; lv__kickplayer += auto0299985E_ai ) {
        if ((lv__di == gv_kickplayerlistdiplayer[lv__p][lv__kickplayer])) {
            gv_playerbeingvotedontokick = lv__kickplayer;
            gv_playerwhoinitiatedvote = lv__p;
            gf_startkickvoteforplayer(lv__p, lv__kickplayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kickplayerlistchooseplayer_Init () {
    gt_kickplayerlistchooseplayer = TriggerCreate("gt_kickplayerlistchooseplayer_Func");
    TriggerAddEventDialogControl(gt_kickplayerlistchooseplayer, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: cast kick vote
//--------------------------------------------------------------------------------------------------
bool gt_castkickvote_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__di;

    // Automatic Variable Declarations
    int auto931BA943_val;

    // Variable Initialization
    lv__p = EventPlayer();
    lv__di = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!(((lv__di == gv_kickplayervotediyes) || (lv__di == gv_kickplayervotedino) || (lv__di == gv_kickplayervotedimeh)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto931BA943_val = lv__di;
    if (auto931BA943_val == gv_kickplayervotediyes) {
        gf_castkickvote(lv__p, 1);
    }
    else if (auto931BA943_val == gv_kickplayervotedino) {
        gf_castkickvote(lv__p, -1);
    }
    else {
        gf_castkickvote(lv__p, 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_castkickvote_Init () {
    gt_castkickvote = TriggerCreate("gt_castkickvote_Func");
    TriggerAddEventDialogControl(gt_castkickvote, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: close vote results
//--------------------------------------------------------------------------------------------------
bool gt_closevoteresults_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__di;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__di = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((lv__di == gv_kickplayervoteresultsdiclose))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogSetVisible(gv_kickplayervoteresultsdialog, PlayerGroupSingle(lv__p), false);
    if ((PlayerGroupCount(gv_activedefenders) > 2)) {
        DialogSetVisible(gv_startvotetokickplayerdialog, PlayerGroupSingle(lv__p), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_closevoteresults_Init () {
    gt_closevoteresults = TriggerCreate("gt_closevoteresults_Func");
    TriggerAddEventDialogControl(gt_closevoteresults, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spam timer expires
//--------------------------------------------------------------------------------------------------
bool gt_spamtimerexpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    const int autoAF4ECC4F_ae = 8;
    const int autoAF4ECC4F_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__p = 1;
    for ( ; ( (autoAF4ECC4F_ai >= 0 && lv__p <= autoAF4ECC4F_ae) || (autoAF4ECC4F_ai < 0 && lv__p >= autoAF4ECC4F_ae) ) ; lv__p += autoAF4ECC4F_ai ) {
        if ((EventTimer() == gv_kickplayervotespamtimer[lv__p])) {
            gf_reenablestartvotebutton(lv__p);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spamtimerexpires_Init () {
    gt_spamtimerexpires = TriggerCreate("gt_spamtimerexpires_Func");
    TriggerAddEventTimer(gt_spamtimerexpires, gv_kickplayervotespamtimer[1]);
    TriggerAddEventTimer(gt_spamtimerexpires, gv_kickplayervotespamtimer[2]);
    TriggerAddEventTimer(gt_spamtimerexpires, gv_kickplayervotespamtimer[3]);
    TriggerAddEventTimer(gt_spamtimerexpires, gv_kickplayervotespamtimer[4]);
    TriggerAddEventTimer(gt_spamtimerexpires, gv_kickplayervotespamtimer[5]);
    TriggerAddEventTimer(gt_spamtimerexpires, gv_kickplayervotespamtimer[6]);
    TriggerAddEventTimer(gt_spamtimerexpires, gv_kickplayervotespamtimer[7]);
    TriggerAddEventTimer(gt_spamtimerexpires, gv_kickplayervotespamtimer[8]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: vote timer expires
//--------------------------------------------------------------------------------------------------
bool gt_votetimerexpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_showvoteresults();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_votetimerexpires_Init () {
    gt_votetimerexpires = TriggerCreate("gt_votetimerexpires_Func");
    TriggerAddEventTimer(gt_votetimerexpires, gv_kickplayervotetimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade spine crawler damage
//--------------------------------------------------------------------------------------------------
bool gt_upgradespinecrawlerdamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_autoupgradelockperplayer[lv__p]) {
        Wait(1.0, c_timeGame);
    }
    gv_autoupgradelockperplayer[lv__p] = true;
    if (lib1_gf_triggeringplayerhasatleastNresources(2, 0)) {
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSubtract, 2);
        TechTreeUpgradeAddLevel(lv__p, "ZergStructureDamageHd", 1);
    }

    gv_autoupgradelockperplayer[lv__p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradespinecrawlerdamage_Init () {
    gt_upgradespinecrawlerdamage = TriggerCreate("gt_upgradespinecrawlerdamage_Func");
    TriggerAddEventUnitAbility(gt_upgradespinecrawlerdamage, null, AbilityCommand("UpgradeSpineCrawlerDamageResearchCenterHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade bunker turret damage
//--------------------------------------------------------------------------------------------------
bool gt_upgradebunkerturretdamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_autoupgradelockperplayer[lv__p]) {
        Wait(1.0, c_timeGame);
    }
    gv_autoupgradelockperplayer[lv__p] = true;
    if (lib1_gf_triggeringplayerhasatleastNresources(2, 0)) {
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSubtract, 2);
        TechTreeUpgradeAddLevel(lv__p, "BunkerTurretDamageHd", 1);
    }

    gv_autoupgradelockperplayer[lv__p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebunkerturretdamage_Init () {
    gt_upgradebunkerturretdamage = TriggerCreate("gt_upgradebunkerturretdamage_Func");
    TriggerAddEventUnitAbility(gt_upgradebunkerturretdamage, null, AbilityCommand("UpgradeBunkerTurretDamageResearchCenterHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade photon cannon damage
//--------------------------------------------------------------------------------------------------
bool gt_upgradephotoncannondamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_autoupgradelockperplayer[lv__p]) {
        Wait(1.0, c_timeGame);
    }
    gv_autoupgradelockperplayer[lv__p] = true;
    if (lib1_gf_triggeringplayerhasatleastNresources(2, 0)) {
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSubtract, 2);
        TechTreeUpgradeAddLevel(lv__p, "ProtossStructureDamageHd", 1);
    }

    gv_autoupgradelockperplayer[lv__p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradephotoncannondamage_Init () {
    gt_upgradephotoncannondamage = TriggerCreate("gt_upgradephotoncannondamage_Func");
    TriggerAddEventUnitAbility(gt_upgradephotoncannondamage, null, AbilityCommand("UpgradePhotonCannonDamageResearchCenterHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade zerg unit damage
//--------------------------------------------------------------------------------------------------
bool gt_upgradezergunitdamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_autoupgradelockperplayer[lv__p]) {
        Wait(1.0, c_timeGame);
    }
    gv_autoupgradelockperplayer[lv__p] = true;
    if (lib1_gf_triggeringplayerhasatleastNresources(2, 0)) {
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSubtract, 2);
        TechTreeUpgradeAddLevel(lv__p, "UnitDamageZergHd", 1);
    }

    gv_autoupgradelockperplayer[lv__p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradezergunitdamage_Init () {
    gt_upgradezergunitdamage = TriggerCreate("gt_upgradezergunitdamage_Func");
    TriggerAddEventUnitAbility(gt_upgradezergunitdamage, null, AbilityCommand("UpgradeUnitDamageZergHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade terran unit damage
//--------------------------------------------------------------------------------------------------
bool gt_upgradeterranunitdamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_autoupgradelockperplayer[lv__p]) {
        Wait(1.0, c_timeGame);
    }
    gv_autoupgradelockperplayer[lv__p] = true;
    if (lib1_gf_triggeringplayerhasatleastNresources(2, 0)) {
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSubtract, 2);
        TechTreeUpgradeAddLevel(lv__p, "UnitDamageTerranHd", 1);
    }

    gv_autoupgradelockperplayer[lv__p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradeterranunitdamage_Init () {
    gt_upgradeterranunitdamage = TriggerCreate("gt_upgradeterranunitdamage_Func");
    TriggerAddEventUnitAbility(gt_upgradeterranunitdamage, null, AbilityCommand("UpgradeUnitDamageTerranHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade protoss unit damage
//--------------------------------------------------------------------------------------------------
bool gt_upgradeprotossunitdamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_autoupgradelockperplayer[lv__p]) {
        Wait(1.0, c_timeGame);
    }
    gv_autoupgradelockperplayer[lv__p] = true;
    if (lib1_gf_triggeringplayerhasatleastNresources(2, 0)) {
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSubtract, 2);
        TechTreeUpgradeAddLevel(lv__p, "UnitDamageProtossHd", 1);
    }

    gv_autoupgradelockperplayer[lv__p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradeprotossunitdamage_Init () {
    gt_upgradeprotossunitdamage = TriggerCreate("gt_upgradeprotossunitdamage_Func");
    TriggerAddEventUnitAbility(gt_upgradeprotossunitdamage, null, AbilityCommand("UpgradeUnitDamageProtossHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: idle enemy workers
//--------------------------------------------------------------------------------------------------
bool gt_idleenemyworkers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = gv_enemyplayer;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitbelongstoplayer(lv__p))) {
            return false;
        }

        if (!((lib1_gf_triggeringunitisoftype("LightDroneEnemyHd") || lib1_gf_triggeringunitisoftype("LightProbeEnemyHd") || lib1_gf_triggeringunitisoftype("LightSCVEnemyHd")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("attack", 0), UnitGroupClosestToPoint(UnitGroupAlliance(lv__p, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), UnitGetPosition(EventUnit()))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_idleenemyworkers_Init () {
    gt_idleenemyworkers = TriggerCreate("gt_idleenemyworkers_Func");
    TriggerAddEventUnitBecomesIdle(gt_idleenemyworkers, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: keep spawn clear of units
//--------------------------------------------------------------------------------------------------
bool gt_keepspawnclearofunits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv__r;
    point lv__spawnpoint;
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    unitgroup auto6B9A0BEF_g;
    int auto6B9A0BEF_u;

    // Variable Initialization
    lv__r = EventUnitRegion();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitbelongstoplayergroup(gv_activedefenders))) {
            return false;
        }

        if (!(lib1_gf_isfalse(gf_unitisbuilder(EventUnit())))) {
            return false;
        }

        if (!(lib1_gf_isfalse(lib1_gf_unitistype(EventUnit(), "AttackDroneHd")))) {
            return false;
        }

        if (!(lib1_gf_isfalse(lib1_gf_unitistype(EventUnit(), "WasplingHd")))) {
            return false;
        }

        if (!(lib1_gf_isfalse(UnitFilterMatch(EventUnit(), lv__p, UnitFilter((1 << c_targetFilterMissile), 0, 0, 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_lockkeepspawnclearofunits) {
        Wait(1.0, c_timeGame);
    }
    gv_lockkeepspawnclearofunits = true;
    auto6B9A0BEF_g = UnitGroupAlliance(EventPlayer(), c_unitAllianceAlly, lv__r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6B9A0BEF_u = UnitGroupCount(auto6B9A0BEF_g, c_unitCountAll);
    for (;; auto6B9A0BEF_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto6B9A0BEF_g, auto6B9A0BEF_u);
        if (lv__u == null) { break; }
        if (lib1_gf_isfalse(gf_unitisbuilder(lv__u)) && lib1_gf_isfalse(UnitFilterMatch(lv__u, lv__p, UnitFilter((1 << c_targetFilterMissile), 0, 0, 0))) && lib1_gf_istrue(PlayerGroupHasPlayer(gv_activedefenders, UnitGetOwner(lv__u)))) {
            lv__p = UnitGetOwner(lv__u);
            lv__spawnpoint = gv_spawnpointperplayer[lv__p];
            UnitSetPosition(lv__u, lv__spawnpoint, false);
            UnitIssueOrder(lv__u, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
        }

    }
    gv_lockkeepspawnclearofunits = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_keepspawnclearofunits_Init () {
    gt_keepspawnclearofunits = TriggerCreate("gt_keepspawnclearofunits_Func");
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(26), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(27), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(25), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(24), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(28), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(29), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(22), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(23), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(31), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(30), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(35), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(34), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(37), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(36), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(32), true);
    TriggerAddEventUnitRegion(gt_keepspawnclearofunits, null, RegionFromId(33), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: full refund available at start and between rounds
//--------------------------------------------------------------------------------------------------
bool gt_fullrefundavailableatstartandbetweenrounds_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__building;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__building = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_istrue(lib1_gf_or2(!(gv_allplayershavechosenlocation), DialogIsVisible(gv_rounddialog, 0))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv__building, "FullRefundAvailableSalvageHd", lv__building, 1);
    UnitGroupAdd(gv_unitswithfullrefundavailable, lv__building);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fullrefundavailableatstartandbetweenrounds_Init () {
    gt_fullrefundavailableatstartandbetweenrounds = TriggerCreate("gt_fullrefundavailableatstartandbetweenrounds_Func");
    TriggerAddEventUnitCreated(gt_fullrefundavailableatstartandbetweenrounds, null, "BuildZergHd", null);
    TriggerAddEventUnitCreated(gt_fullrefundavailableatstartandbetweenrounds, null, "BuildTerranHd", null);
    TriggerAddEventUnitCreated(gt_fullrefundavailableatstartandbetweenrounds, null, "BuildProtossHd", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: handle player drop
//--------------------------------------------------------------------------------------------------
bool gt_handleplayerdrop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup autoDE897DD0_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE897DD0_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoDE897DD0_g, lv__p);
        if (lv__p < 0) { break; }
        if ((PlayerStatus(lv__p) == c_playerStatusLeft)) {
            gf_removeplayer(lv__p);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_handleplayerdrop_Init () {
    gt_handleplayerdrop = TriggerCreate("gt_handleplayerdrop_Func");
    TriggerAddEventTimePeriodic(gt_handleplayerdrop, 1.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: bunker attack enemy and redirect attack
//--------------------------------------------------------------------------------------------------
bool gt_bunkerattackenemyandredirectattack_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("BunkerHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingUnit(AbilityCommand("AttackRedirect", 0), EventUnitTargetUnit()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_bunkerattackenemyandredirectattack_Init () {
    gt_bunkerattackenemyandredirectattack = TriggerCreate("gt_bunkerattackenemyandredirectattack_Func");
    TriggerAddEventUnitAbility(gt_bunkerattackenemyandredirectattack, null, AbilityCommand("AttackEnemyHd", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: full refund
//--------------------------------------------------------------------------------------------------
bool gt_fullrefund_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__cost;
    unit lv__u;
    int lv__p;
    string lv__b;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__u = EventUnit();
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv__cost = UnitTypeGetCost(UnitGetType(lv__u), c_unitCostMinerals);
    if (lib1_gf_unithasbuff(lv__u, "UpgradedTurretBunkerHd")) {
        if (lib1_gf_unithasbuff(lv__u, "ArtilleryTurretBunkerHd")) {
            lv__cost = lv__cost + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "UpgradeToArtilleryTurretBunkerHd", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", lv__p);
        }
        else if (lib1_gf_unithasbuff(lv__u, "HeavyTurretBunkerHd")) {
            lv__cost = lv__cost + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "UpgradeToHeavyTurretBunkerHd", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", lv__p);
        }
        else if (lib1_gf_unithasbuff(lv__u, "MissileTurretBunkerHd")) {
            lv__cost = lv__cost + CatalogFieldValueGetAsInt(c_gameCatalogAbil, "UpgradeToMissileTurretBunkerHd", "Cost[" + IntToString(0) + "].Resource[" + IntToString(c_resourceTypeMinerals) + "]", lv__p);
        }
    }

    PlayerModifyPropertyInt(EventPlayer(), c_playerPropMinerals, c_playerPropOperAdd, lv__cost);
    UnitKill(lv__u);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_fullrefund_Init () {
    gt_fullrefund = TriggerCreate("gt_fullrefund_Func");
    TriggerAddEventUnitAbility(gt_fullrefund, null, AbilityCommand("SalvageFullRefundHd", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: move spawn flag
//--------------------------------------------------------------------------------------------------
bool gt_movespawnflag_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    point lv__playerspawnpoint;
    point lv__newspawnpoint;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__playerspawnpoint = gv_spawnpointperplayer[EventPlayer()];
    lv__newspawnpoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_removeallunitsoftypeinregion("SpawnFlagHd", RegionEntireMap(), lv__p);
    lib1_gf_createunitatpoint("SpawnFlagHd", lv__newspawnpoint, lv__p, c_unitCreateIgnorePlacement);
    PointSet(lv__playerspawnpoint, lv__newspawnpoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_movespawnflag_Init () {
    gt_movespawnflag = TriggerCreate("gt_movespawnflag_Func");
    TriggerAddEventUnitAbility(gt_movespawnflag, null, AbilityCommand("BuildSpawnFlagHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - protoss - attack drone hub
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingprotossattackdronehub_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("AttackDroneHubHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingprotossattackdronehub_Init () {
    gt_upgradebuildingprotossattackdronehub = TriggerCreate("gt_upgradebuildingprotossattackdronehub_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingprotossattackdronehub, null, AbilityCommand("UpgradeToAttackDroneHubPhotonCannonHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - protoss - big boy cannon
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingprotossbigboycannon_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("BigBoyCannonHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingprotossbigboycannon_Init () {
    gt_upgradebuildingprotossbigboycannon = TriggerCreate("gt_upgradebuildingprotossbigboycannon_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingprotossbigboycannon, null, AbilityCommand("UpgradeToBigBoyCannonPhotonCannonHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - protoss - hole puncher
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingprotossholepuncher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("PhotonCannonHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingprotossholepuncher_Init () {
    gt_upgradebuildingprotossholepuncher = TriggerCreate("gt_upgradebuildingprotossholepuncher_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingprotossholepuncher, null, AbilityCommand("UpgradeToPhotonCannonHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - protoss - photon cannon
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingprotossphotoncannon_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("AttackDroneHubHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingprotossphotoncannon_Init () {
    gt_upgradebuildingprotossphotoncannon = TriggerCreate("gt_upgradebuildingprotossphotoncannon_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingprotossphotoncannon, null, AbilityCommand("UpgradeToAttackDroneHubPhotonCannonHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - terran - bunker
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingterranbunker_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("BunkerHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingterranbunker_Init () {
    gt_upgradebuildingterranbunker = TriggerCreate("gt_upgradebuildingterranbunker_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingterranbunker, null, AbilityCommand("UpgradeToBunkerHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - zerg - bile launcher
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingzergbilelauncher_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("BileLauncherHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingzergbilelauncher_Init () {
    gt_upgradebuildingzergbilelauncher = TriggerCreate("gt_upgradebuildingzergbilelauncher_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingzergbilelauncher, null, AbilityCommand("UpgradeToBileLauncherSpineCrawlerHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - zerg - spine crawler
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingzergspinecrawler_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("SpineCrawlerHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingzergspinecrawler_Init () {
    gt_upgradebuildingzergspinecrawler = TriggerCreate("gt_upgradebuildingzergspinecrawler_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingzergspinecrawler, null, AbilityCommand("UpgradeToSpineCrawlerHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - zerg - sunken colony
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingzergsunkencolony_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("SunkenColonyHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingzergsunkencolony_Init () {
    gt_upgradebuildingzergsunkencolony = TriggerCreate("gt_upgradebuildingzergsunkencolony_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingzergsunkencolony, null, AbilityCommand("UpgradeToSunkenColonySpineCrawlerHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade building - zerg - waspling burrow
//--------------------------------------------------------------------------------------------------
bool gt_upgradebuildingzergwasplingburrow_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_upgradebuilding("WasplingBurrowHd");
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgradebuildingzergwasplingburrow_Init () {
    gt_upgradebuildingzergwasplingburrow = TriggerCreate("gt_upgradebuildingzergwasplingburrow_Func");
    TriggerAddEventUnitAbility(gt_upgradebuildingzergwasplingburrow, null, AbilityCommand("UpgradeToWasplingBurrowSpineCrawlerHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: clear rally unit chooser
//--------------------------------------------------------------------------------------------------
bool gt_clearrallyunitchooser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__path;
    int lv__p;
    point lv__beacon;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__beacon = UnitGetPosition(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    PathDestroy(gv_unitchooserpathdisplayperplayer[lv__p]);
    PathCreateForUnit(PlayerGroupSingle(lv__p), gv_invisiblewaypointchooserperplayer[lv__p]);
    lv__path = PathLastCreated();
    PathAddWayPoint(lv__path, lv__beacon);
    PathSetDestinationPoint(lv__path, lv__beacon);
    gv_unitchooserpathdisplayperplayer[lv__p] = lv__path;
    gv_unitchooserpathexistsperplayer[lv__p] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_clearrallyunitchooser_Init () {
    gt_clearrallyunitchooser = TriggerCreate("gt_clearrallyunitchooser_Func");
    TriggerAddEventUnitAbility(gt_clearrallyunitchooser, null, AbilityCommand("RallyUnitChoosersHereHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: rally unit chooser
//--------------------------------------------------------------------------------------------------
bool gt_rallyunitchooser_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    PathDestroy(gv_unitchooserpathdisplayperplayer[lv__p]);
    gv_unitchooserpathexistsperplayer[lv__p] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_rallyunitchooser_Init () {
    gt_rallyunitchooser = TriggerCreate("gt_rallyunitchooser_Func");
    TriggerAddEventUnitAbility(gt_rallyunitchooser, null, AbilityCommand("ClearUnitChooserRallyHd", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: change race
//--------------------------------------------------------------------------------------------------
bool gt_changerace_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoAD020825_val;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_isdebugginglocally())) {
            return false;
        }

        if (!(lib1_gf_istesting())) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_displaydebugmessage(StringExternal("Param/Value/DCD029C6"));
    autoAD020825_val = EventChatMessage(false);
    if (autoAD020825_val == "-change race to terran") {
        PlayerSetRace(1, "Terr");
    }
    else if (autoAD020825_val == "-change race to zerg") {
        PlayerSetRace(1, "Zerg");
    }
    else if (autoAD020825_val == "-change race to protoss") {
        PlayerSetRace(1, "Prot");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_changerace_Init () {
    gt_changerace = TriggerCreate("gt_changerace_Func");
    TriggerAddEventChatMessage(gt_changerace, c_playerAny, "-change race to terran", true);
    TriggerAddEventChatMessage(gt_changerace, c_playerAny, "-change race to zerg", true);
    TriggerAddEventChatMessage(gt_changerace, c_playerAny, "-change race to protoss", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: kick
//--------------------------------------------------------------------------------------------------
bool gt_kick_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string auto200ECF1E_val;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_isdebugginglocally())) {
            return false;
        }

        if (!(lib1_gf_istesting())) {
            return false;
        }

        if (!(lib1_gf_istrue(gv_testingmultiplayerlocally))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_displaydebugmessage(StringExternal("Param/Value/787F09A4"));
    auto200ECF1E_val = EventChatMessage(false);
    if (auto200ECF1E_val == "-kick p2") {
        GameOver(2, c_gameOverDefeat, false, false);
        gf_removeplayer(2);
    }
    else if (auto200ECF1E_val == "-kick p3") {
        GameOver(3, c_gameOverDefeat, false, false);
        gf_removeplayer(3);
    }
    else if (auto200ECF1E_val == "-kick p4") {
        GameOver(4, c_gameOverDefeat, false, false);
        gf_removeplayer(4);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_kick_Init () {
    gt_kick = TriggerCreate("gt_kick_Func");
    TriggerAddEventChatMessage(gt_kick, c_playerAny, "-kick p2", true);
    TriggerAddEventChatMessage(gt_kick, c_playerAny, "-kick p3", true);
    TriggerAddEventChatMessage(gt_kick, c_playerAny, "-kick p4", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: test cast kick vote
//--------------------------------------------------------------------------------------------------
bool gt_testcastkickvote_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    string autoA7D742DB_val;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_isdebugginglocally())) {
            return false;
        }

        if (!(lib1_gf_istesting())) {
            return false;
        }

        if (!(lib1_gf_istrue(gv_testingmultiplayerlocally))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_displaydebugmessage(StringExternal("Param/Value/BC73E655"));
    autoA7D742DB_val = EventChatMessage(false);
    if (autoA7D742DB_val == "-vote yes p2") {
        gf_castkickvote(3, 1);
    }
    else if (autoA7D742DB_val == "-vote meh p2") {
        gf_castkickvote(3, 0);
    }
    else if (autoA7D742DB_val == "-vote no p2") {
        gf_castkickvote(3, -1);
    }
    else if (autoA7D742DB_val == "-vote yes p3") {
        gf_castkickvote(2, 1);
    }
    else if (autoA7D742DB_val == "-vote meh p3") {
        gf_castkickvote(2, 0);
    }
    else if (autoA7D742DB_val == "-vote no p3") {
        gf_castkickvote(2, -1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_testcastkickvote_Init () {
    gt_testcastkickvote = TriggerCreate("gt_testcastkickvote_Func");
    TriggerAddEventChatMessage(gt_testcastkickvote, c_playerAny, "-vote yes p2", true);
    TriggerAddEventChatMessage(gt_testcastkickvote, c_playerAny, "-vote meh p2", true);
    TriggerAddEventChatMessage(gt_testcastkickvote, c_playerAny, "-vote no p2", true);
    TriggerAddEventChatMessage(gt_testcastkickvote, c_playerAny, "-vote yes p3", true);
    TriggerAddEventChatMessage(gt_testcastkickvote, c_playerAny, "-vote meh p3", true);
    TriggerAddEventChatMessage(gt_testcastkickvote, c_playerAny, "-vote no p3", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: auto skip
//--------------------------------------------------------------------------------------------------
bool gt_autoskip_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_autoskipbyplayer[lv__p] = !(gv_autoskipbyplayer[lv__p]);
    TextExpressionSetToken("Param/Expression/F3CACBA2", "autoskip", lib1_gf_convertbooltoonoff(gv_autoskipbyplayer[lv__p]));
    lib1_gf_messageuser(TextExpressionAssemble("Param/Expression/F3CACBA2"), lv__p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_autoskip_Init () {
    gt_autoskip = TriggerCreate("gt_autoskip_Func");
    TriggerAddEventChatMessage(gt_autoskip, c_playerAny, "-autoskip", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: commands
//--------------------------------------------------------------------------------------------------
bool gt_commands_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_messageuser(StringExternal("Param/Value/AF3855F5"), lv__p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_commands_Init () {
    gt_commands = TriggerCreate("gt_commands_Func");
    TriggerAddEventChatMessage(gt_commands, c_playerAny, "-commands", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: toggle ghosts
//--------------------------------------------------------------------------------------------------
bool gt_toggleghosts_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_playertoghostsenabled[lv__p] = !(gv_playertoghostsenabled[lv__p]);
    TextExpressionSetToken("Param/Expression/CB02BB58", "ghosts_enabled", lib1_gf_convertbooltoonoff(gv_playertoghostsenabled[lv__p]));
    lib1_gf_messageuser(TextExpressionAssemble("Param/Expression/CB02BB58"), lv__p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_toggleghosts_Init () {
    gt_toggleghosts = TriggerCreate("gt_toggleghosts_Func");
    TriggerAddEventChatMessage(gt_toggleghosts, c_playerAny, "-toggle ghosts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose - top
//--------------------------------------------------------------------------------------------------
bool gt_choosetop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    region lv__r;
    int lv__p;
    int lv__choicetype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_top;
    lv__r = EventUnitRegion();
    lv__p = EventPlayer();
    lv__choicetype = ge_choicetype_unit;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_chooseunit(2, lv__location, lv__p, lv__r, lv__choicetype);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosetop_Init () {
    gt_choosetop = TriggerCreate("gt_choosetop_Func");
    TriggerAddEventUnitRegion(gt_choosetop, null, RegionCircle(PointFromId(78753967), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetop, null, RegionCircle(PointFromId(533997263), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetop, null, RegionCircle(PointFromId(2057706776), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetop, null, RegionCircle(PointFromId(69372940), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetop, null, RegionCircle(PointFromId(557071858), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetop, null, RegionCircle(PointFromId(704189669), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetop, null, RegionCircle(PointFromId(1591476509), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetop, null, RegionCircle(PointFromId(123965885), gv_chooserradius), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose - top right
//--------------------------------------------------------------------------------------------------
bool gt_choosetopright_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    region lv__r;
    int lv__p;
    int lv__choicetype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_topright;
    lv__r = EventUnitRegion();
    lv__p = EventPlayer();
    lv__choicetype = ge_choicetype_unit;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_chooseunit(2, lv__location, lv__p, lv__r, lv__choicetype);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosetopright_Init () {
    gt_choosetopright = TriggerCreate("gt_choosetopright_Func");
    TriggerAddEventUnitRegion(gt_choosetopright, null, RegionCircle(PointFromId(1456086433), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopright, null, RegionCircle(PointFromId(837803804), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopright, null, RegionCircle(PointFromId(1251994820), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopright, null, RegionCircle(PointFromId(625743367), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopright, null, RegionCircle(PointFromId(890760943), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopright, null, RegionCircle(PointFromId(1158879975), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopright, null, RegionCircle(PointFromId(651751040), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopright, null, RegionCircle(PointFromId(2116441393), gv_chooserradius), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose - right
//--------------------------------------------------------------------------------------------------
bool gt_chooseright_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    region lv__r;
    int lv__p;
    int lv__choicetype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_right;
    lv__r = EventUnitRegion();
    lv__p = EventPlayer();
    lv__choicetype = ge_choicetype_unit;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_chooseunit(3, lv__location, lv__p, lv__r, lv__choicetype);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_chooseright_Init () {
    gt_chooseright = TriggerCreate("gt_chooseright_Func");
    TriggerAddEventUnitRegion(gt_chooseright, null, RegionCircle(PointFromId(628985728), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseright, null, RegionCircle(PointFromId(691494978), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseright, null, RegionCircle(PointFromId(193140767), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseright, null, RegionCircle(PointFromId(1300210222), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseright, null, RegionCircle(PointFromId(1795181988), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseright, null, RegionCircle(PointFromId(978262974), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseright, null, RegionCircle(PointFromId(1428756895), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseright, null, RegionCircle(PointFromId(1639441590), gv_chooserradius), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose - bot right
//--------------------------------------------------------------------------------------------------
bool gt_choosebotright_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    region lv__r;
    int lv__p;
    int lv__choicetype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_botright;
    lv__r = EventUnitRegion();
    lv__p = EventPlayer();
    lv__choicetype = ge_choicetype_unit;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_chooseunit(4, lv__location, lv__p, lv__r, lv__choicetype);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosebotright_Init () {
    gt_choosebotright = TriggerCreate("gt_choosebotright_Func");
    TriggerAddEventUnitRegion(gt_choosebotright, null, RegionCircle(PointFromId(852033013), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosebotright, null, RegionCircle(PointFromId(551137157), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosebotright, null, RegionCircle(PointFromId(928879015), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosebotright, null, RegionCircle(PointFromId(1171033856), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosebotright, null, RegionCircle(PointFromId(1196786689), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosebotright, null, RegionCircle(PointFromId(194816851), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosebotright, null, RegionCircle(PointFromId(1776792780), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosebotright, null, RegionCircle(PointFromId(571005906), gv_chooserradius), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose - bot
//--------------------------------------------------------------------------------------------------
bool gt_choosebot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    region lv__r;
    int lv__p;
    int lv__choicetype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_bot;
    lv__r = EventUnitRegion();
    lv__p = EventPlayer();
    lv__choicetype = ge_choicetype_unit;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_chooseunit(5, lv__location, lv__p, lv__r, lv__choicetype);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosebot_Init () {
    gt_choosebot = TriggerCreate("gt_choosebot_Func");
    TriggerAddEventUnitRegion(gt_choosebot, null, RegionCircle(PointFromId(1025773052), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebot, null, RegionCircle(PointFromId(846440), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebot, null, RegionCircle(PointFromId(52267179), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebot, null, RegionCircle(PointFromId(1954757564), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebot, null, RegionCircle(PointFromId(2067720479), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebot, null, RegionCircle(PointFromId(910872851), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebot, null, RegionCircle(PointFromId(1981765748), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebot, null, RegionCircle(PointFromId(1621754594), gv_chooserradiusbig), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose - bot left
//--------------------------------------------------------------------------------------------------
bool gt_choosebotleft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    region lv__r;
    int lv__p;
    int lv__choicetype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_botleft;
    lv__r = EventUnitRegion();
    lv__p = EventPlayer();
    lv__choicetype = ge_choicetype_unit;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_chooseunit(6, lv__location, lv__p, lv__r, lv__choicetype);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosebotleft_Init () {
    gt_choosebotleft = TriggerCreate("gt_choosebotleft_Func");
    TriggerAddEventUnitRegion(gt_choosebotleft, null, RegionCircle(PointFromId(970550996), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebotleft, null, RegionCircle(PointFromId(1764278175), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebotleft, null, RegionCircle(PointFromId(151315752), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebotleft, null, RegionCircle(PointFromId(1345536700), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebotleft, null, RegionCircle(PointFromId(1208114324), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebotleft, null, RegionCircle(PointFromId(2090537115), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebotleft, null, RegionCircle(PointFromId(488609416), gv_chooserradiusbig), true);
    TriggerAddEventUnitRegion(gt_choosebotleft, null, RegionCircle(PointFromId(67347418), gv_chooserradiusbig), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose - left
//--------------------------------------------------------------------------------------------------
bool gt_chooseleft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    int lv__p;
    region lv__r;
    int lv__choicetype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_left;
    lv__p = EventPlayer();
    lv__r = EventUnitRegion();
    lv__choicetype = ge_choicetype_minerals;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_chooseunit(1, lv__location, lv__p, lv__r, lv__choicetype);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_chooseleft_Init () {
    gt_chooseleft = TriggerCreate("gt_chooseleft_Func");
    TriggerAddEventUnitRegion(gt_chooseleft, null, RegionCircle(PointFromId(1016863586), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseleft, null, RegionCircle(PointFromId(1154409010), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseleft, null, RegionCircle(PointFromId(4326746), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseleft, null, RegionCircle(PointFromId(1547170258), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseleft, null, RegionCircle(PointFromId(1981237702), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseleft, null, RegionCircle(PointFromId(1750397661), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseleft, null, RegionCircle(PointFromId(1429236056), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_chooseleft, null, RegionCircle(PointFromId(244062886), gv_chooserradius), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: choose - top left
//--------------------------------------------------------------------------------------------------
bool gt_choosetopleft_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__location;
    int lv__p;
    region lv__r;
    int lv__choicetype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__location = ge_clockwiselocation_topleft;
    lv__p = EventPlayer();
    lv__r = EventUnitRegion();
    lv__choicetype = ge_choicetype_unit;

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitisoftype("ChooserHd"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_chooseunit(1, lv__location, lv__p, lv__r, lv__choicetype);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_choosetopleft_Init () {
    gt_choosetopleft = TriggerCreate("gt_choosetopleft_Func");
    TriggerAddEventUnitRegion(gt_choosetopleft, null, RegionCircle(PointFromId(1061491136), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopleft, null, RegionCircle(PointFromId(1939567621), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopleft, null, RegionCircle(PointFromId(1552399524), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopleft, null, RegionCircle(PointFromId(1084233623), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopleft, null, RegionCircle(PointFromId(1599385838), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopleft, null, RegionCircle(PointFromId(69581309), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopleft, null, RegionCircle(PointFromId(659731607), gv_chooserradius), true);
    TriggerAddEventUnitRegion(gt_choosetopleft, null, RegionCircle(PointFromId(196851831), gv_chooserradius), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: all enemies gone
//--------------------------------------------------------------------------------------------------
bool gt_allenemiesgone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__showcaseunit;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(lib1_gf_isfalse(gv_isspawningenemies))) {
            return false;
        }

        if (!(lib1_gf_isfalse(lib1_gf_timerisactive(gv_roundtimer)))) {
            return false;
        }

        if (!(lib1_gf_istrue(gv_allplayershavechosenlocation))) {
            return false;
        }

        if (!(lib1_gf_triggeringunitbelongstoplayer(gv_enemyplayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_lockroundfinished) {
        Wait(1.0, c_timeGame);
    }
    gv_lockroundfinished = true;
    if (lib1_gf_fewerthanNunitsinregionforplayer(1, RegionEntireMap(), gv_enemyplayer) && lib1_gf_isfalse(gv_roundfinished)) {
        lv__showcaseunit = lib1_gf_unitatpoint(gv_enemyshowcasepoints[gv_currentround], gv_allycompplayer, gv_enemyperround[gv_currentround]);
        UnitBehaviorAdd(lv__showcaseunit, "CloakHd", lv__showcaseunit, 1);
        gv_currentround = gv_currentround + 1;
        gv_roundfinished = true;
        libNtve_gf_KillModel(gv_currentenemyindicator);
        if ((gv_currentround == gv_numrounds)) {
            gf_endgame(c_gameOverVictory);
        }
        else {
            libNtve_gf_CreateModelAtPoint("CurrentEnemyIndicatorHd", gv_enemyshowcasepoints[gv_currentround]);
            gv_currentenemyindicator = libNtve_gf_ActorLastCreated();
            gf_startallenemyghostspawnlocations();
            gf_startroundtimer(gv_secondsbetweenrounds);
        }
    }

    gv_lockroundfinished = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_allenemiesgone_Init () {
    gt_allenemiesgone = TriggerCreate("gt_allenemiesgone_Func");
    TriggerAddEventUnitRemoved(gt_allenemiesgone, null);
    TriggerAddEventUnitDied(gt_allenemiesgone, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: clear enemies
//--------------------------------------------------------------------------------------------------
bool gt_clearenemies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__spawnbehaviorlocation;
    string lv__spawnbehavior;
    point lv__telespawnpoint;
    point lv__telerallypoint;
    region lv__r;
    int lv__clearlocation;
    unit lv__u;

    // Automatic Variable Declarations
    const int auto13B32669_ae = 11;
    const int auto13B32669_ai = 1;
    unitgroup autoA9B761F0_g;
    int autoA9B761F0_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_lockclearenemies) {
        Wait(1.0, c_timeGame);
    }
    gv_lockclearenemies = true;
    lv__clearlocation = 0;
    for ( ; ( (auto13B32669_ai >= 0 && lv__clearlocation <= auto13B32669_ae) || (auto13B32669_ai < 0 && lv__clearlocation >= auto13B32669_ae) ) ; lv__clearlocation += auto13B32669_ai ) {
        lv__r = gv_enemyclearregionperlocation[lv__clearlocation];
        lv__spawnbehaviorlocation = gv_enemypathlocationopposites[lv__clearlocation];
        lv__spawnbehavior = gv_spawnbehaviors[lv__spawnbehaviorlocation];
        autoA9B761F0_g = UnitGroup(null, gv_enemyplayer, lv__r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoA9B761F0_u = UnitGroupCount(autoA9B761F0_g, c_unitCountAll);
        for (;; autoA9B761F0_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoA9B761F0_g, autoA9B761F0_u);
            if (lv__u == null) { break; }
            if (lib1_gf_istrue(UnitHasBehavior2(lv__u, lv__spawnbehavior))) {
                if (lib1_gf_isfalse(gf_isenemyghost(lv__u))) {
                    gf_removeenemy(lv__u);
                    gf_enemyreachedend();
                    if (gf_isboss()) {
                        gf_enemyreachedend();
                    }

                }
                else {
                    gf_removeghost(lv__u);
                }
            }

        }
    }
    gv_lockclearenemies = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_clearenemies_Init () {
    gt_clearenemies = TriggerCreate("gt_clearenemies_Func");
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(9), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(10), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(11), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(12), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(13), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(14), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(15), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(16), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(17), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(18), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(19), true);
    TriggerAddEventUnitRegion(gt_clearenemies, null, RegionFromId(20), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: every second, update dialog timer value
//--------------------------------------------------------------------------------------------------
bool gt_everysecondupdatedialogtimervalue_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_updatedialogtimervalue();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_everysecondupdatedialogtimervalue_Init () {
    gt_everysecondupdatedialogtimervalue = TriggerCreate("gt_everysecondupdatedialogtimervalue_Func");
    TriggerAddEventTimer(gt_everysecondupdatedialogtimervalue, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: gain choosers
//--------------------------------------------------------------------------------------------------
bool gt_gainchoosers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_triggeringunitbelongstoplayer(gv_enemyplayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_incrementenemieskilled();
    while (gv_lockenemieskilled) {
        Wait(1.0, c_timeGame);
    }
    gv_lockenemieskilled = true;
    if (gf_isboss()) {
        gf_incrementenemieskilled();
    }

    gv_lockenemieskilled = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_gainchoosers_Init () {
    gt_gainchoosers = TriggerCreate("gt_gainchoosers_Func");
    TriggerAddEventUnitDied(gt_gainchoosers, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: run round
//--------------------------------------------------------------------------------------------------
bool gt_runround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_runround();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_runround_Init () {
    gt_runround = TriggerCreate("gt_runround_Func");
    TriggerAddEventTimer(gt_runround, gv_roundtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ping choosers to new users
//--------------------------------------------------------------------------------------------------
bool gt_pingchooserstonewusers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__defenderlocation;

    // Automatic Variable Declarations
    playergroup autoF0ECEF8D_g;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF0ECEF8D_g = gv_activedefenders;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoF0ECEF8D_g, lv__p);
        if (lv__p < 0) { break; }
        if (gf_shouldpingchooser(lv__p)) {
            lv__defenderlocation = gv_playertodefenderlocation[lv__p];
            MinimapPing(PlayerGroupSingle(lv__p), gv_defendlocationtochooserspawnpoint[lv__defenderlocation], 2.0, Color(100.00, 0.00, 0.00));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_pingchooserstonewusers_Init () {
    gt_pingchooserstonewusers = TriggerCreate("gt_pingchooserstonewusers_Func");
    TriggerAddEventTimePeriodic(gt_pingchooserstonewusers, 5.0, c_timeReal);
}

//--------------------------------------------------------------------------------------------------
// Trigger: skip round timer
//--------------------------------------------------------------------------------------------------
bool gt_skiproundtimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__di;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__di = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((lv__di == gv_rounddialogitemskip))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(lv__di, PlayerGroupSingle(lv__p), false);
    gv_playertoskipclicked[lv__p] = true;
    gf_skipifallclicked();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_skiproundtimer_Init () {
    gt_skiproundtimer = TriggerCreate("gt_skiproundtimer_Func");
    TriggerAddEventDialogControl(gt_skiproundtimer, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: spawn enemy ghosts
//--------------------------------------------------------------------------------------------------
bool gt_spawnenemyghosts_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    timer auto7CD6736A_val;

    // Actions
    if (!runActions) {
        return true;
    }

    auto7CD6736A_val = EventTimer();
    if (auto7CD6736A_val == gv_enemyghostspawntimer[0]) {
        gf_spawnenemyghostsatlocation(0);
    }
    else if (auto7CD6736A_val == gv_enemyghostspawntimer[1]) {
        gf_spawnenemyghostsatlocation(1);
    }
    else if (auto7CD6736A_val == gv_enemyghostspawntimer[2]) {
        gf_spawnenemyghostsatlocation(2);
    }
    else if (auto7CD6736A_val == gv_enemyghostspawntimer[3]) {
        gf_spawnenemyghostsatlocation(3);
    }
    else if (auto7CD6736A_val == gv_enemyghostspawntimer[4]) {
        gf_spawnenemyghostsatlocation(4);
    }
    else if (auto7CD6736A_val == gv_enemyghostspawntimer[5]) {
        gf_spawnenemyghostsatlocation(5);
    }
    else if (auto7CD6736A_val == gv_enemyghostspawntimer[6]) {
        gf_spawnenemyghostsatlocation(6);
    }
    else if (auto7CD6736A_val == gv_enemyghostspawntimer[7]) {
        gf_spawnenemyghostsatlocation(7);
    }
    else {
    }
    TimerStart(EventTimer(), gv_secondsbetweenghostspawn, false, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_spawnenemyghosts_Init () {
    gt_spawnenemyghosts = TriggerCreate("gt_spawnenemyghosts_Func");
    TriggerAddEventTimer(gt_spawnenemyghosts, gv_enemyghostspawntimer[0]);
    TriggerAddEventTimer(gt_spawnenemyghosts, gv_enemyghostspawntimer[1]);
    TriggerAddEventTimer(gt_spawnenemyghosts, gv_enemyghostspawntimer[2]);
    TriggerAddEventTimer(gt_spawnenemyghosts, gv_enemyghostspawntimer[3]);
    TriggerAddEventTimer(gt_spawnenemyghosts, gv_enemyghostspawntimer[4]);
    TriggerAddEventTimer(gt_spawnenemyghosts, gv_enemyghostspawntimer[5]);
    TriggerAddEventTimer(gt_spawnenemyghosts, gv_enemyghostspawntimer[6]);
    TriggerAddEventTimer(gt_spawnenemyghosts, gv_enemyghostspawntimer[7]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: tele enemies
//--------------------------------------------------------------------------------------------------
bool gt_teleenemies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__spawnbehaviorlocation;
    string lv__spawnbehavior;
    point lv__telespawnpoint;
    point lv__telerallypoint;
    region lv__r;
    int lv__telelocation;
    unit lv__u;

    // Automatic Variable Declarations
    const int autoD1A92727_ae = 7;
    const int autoD1A92727_ai = 1;
    unitgroup auto24191DD2_g;
    int auto24191DD2_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv__telelocation = 0;
    for ( ; ( (autoD1A92727_ai >= 0 && lv__telelocation <= autoD1A92727_ae) || (autoD1A92727_ai < 0 && lv__telelocation >= autoD1A92727_ae) ) ; lv__telelocation += autoD1A92727_ai ) {
        lv__r = gv_enemyteleregions[lv__telelocation];
        lv__telespawnpoint = gv_enemytelespawns[lv__telelocation];
        lv__telerallypoint = gv_enemyrallypointspertelespawn[lv__telelocation];
        lv__spawnbehaviorlocation = gv_telelocationtospawnclockwiselocation[lv__telelocation];
        lv__spawnbehavior = gv_spawnbehaviors[lv__spawnbehaviorlocation];
        auto24191DD2_g = UnitGroup(null, gv_enemyplayer, lv__r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto24191DD2_u = UnitGroupCount(auto24191DD2_g, c_unitCountAll);
        for (;; auto24191DD2_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto24191DD2_g, auto24191DD2_u);
            if (lv__u == null) { break; }
            if (lib1_gf_istrue(UnitHasBehavior2(lv__u, lv__spawnbehavior))) {
                UnitSetPosition(lv__u, lv__telespawnpoint, false);
                UnitIssueOrder(lv__u, OrderTargetingPoint(AbilityCommand("move", 0), lv__telerallypoint), c_orderQueueReplace);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_teleenemies_Init () {
    gt_teleenemies = TriggerCreate("gt_teleenemies_Func");
    TriggerAddEventUnitRegion(gt_teleenemies, null, RegionFromId(6), true);
    TriggerAddEventUnitRegion(gt_teleenemies, null, RegionFromId(5), true);
    TriggerAddEventUnitRegion(gt_teleenemies, null, RegionFromId(3), true);
    TriggerAddEventUnitRegion(gt_teleenemies, null, RegionFromId(4), true);
    TriggerAddEventUnitRegion(gt_teleenemies, null, RegionFromId(7), true);
    TriggerAddEventUnitRegion(gt_teleenemies, null, RegionFromId(8), true);
    TriggerAddEventUnitRegion(gt_teleenemies, null, RegionFromId(2), true);
    TriggerAddEventUnitRegion(gt_teleenemies, null, RegionFromId(1), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_initmap_Init();
    gt_choosespawnlocationtop_Init();
    gt_choosespawnlocationtopright_Init();
    gt_choosespawnlocationright_Init();
    gt_choosespawnlocationbotright_Init();
    gt_choosespawnlocationbot_Init();
    gt_choosespawnlocationbotleft_Init();
    gt_choosespawnlocationleft_Init();
    gt_choosespawnlocationtopleft_Init();
    gt_testpaths_Init();
    gt_showkickplayerlist_Init();
    gt_kickplayerlistcancel_Init();
    gt_kickplayerlistchooseplayer_Init();
    gt_castkickvote_Init();
    gt_closevoteresults_Init();
    gt_spamtimerexpires_Init();
    gt_votetimerexpires_Init();
    gt_upgradespinecrawlerdamage_Init();
    gt_upgradebunkerturretdamage_Init();
    gt_upgradephotoncannondamage_Init();
    gt_upgradezergunitdamage_Init();
    gt_upgradeterranunitdamage_Init();
    gt_upgradeprotossunitdamage_Init();
    gt_idleenemyworkers_Init();
    gt_keepspawnclearofunits_Init();
    gt_fullrefundavailableatstartandbetweenrounds_Init();
    gt_handleplayerdrop_Init();
    gt_bunkerattackenemyandredirectattack_Init();
    gt_fullrefund_Init();
    gt_movespawnflag_Init();
    gt_upgradebuildingprotossattackdronehub_Init();
    gt_upgradebuildingprotossbigboycannon_Init();
    gt_upgradebuildingprotossholepuncher_Init();
    gt_upgradebuildingprotossphotoncannon_Init();
    gt_upgradebuildingterranbunker_Init();
    gt_upgradebuildingzergbilelauncher_Init();
    gt_upgradebuildingzergspinecrawler_Init();
    gt_upgradebuildingzergsunkencolony_Init();
    gt_upgradebuildingzergwasplingburrow_Init();
    gt_clearrallyunitchooser_Init();
    gt_rallyunitchooser_Init();
    gt_changerace_Init();
    gt_kick_Init();
    gt_testcastkickvote_Init();
    gt_autoskip_Init();
    gt_commands_Init();
    gt_toggleghosts_Init();
    gt_choosetop_Init();
    gt_choosetopright_Init();
    gt_chooseright_Init();
    gt_choosebotright_Init();
    gt_choosebot_Init();
    gt_choosebotleft_Init();
    gt_chooseleft_Init();
    gt_choosetopleft_Init();
    gt_allenemiesgone_Init();
    gt_clearenemies_Init();
    gt_everysecondupdatedialogtimervalue_Init();
    gt_gainchoosers_Init();
    gt_runround_Init();
    gt_pingchooserstonewusers_Init();
    gt_skiproundtimer_Init();
    gt_spawnenemyghosts_Init();
    gt_teleenemies_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
